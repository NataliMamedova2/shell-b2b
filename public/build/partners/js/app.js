/******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
        /******/
        /******/ 		// Check if module is in cache
        /******/ 		if(installedModules[moduleId]) {
            /******/ 			return installedModules[moduleId].exports;
            /******/ 		}
        /******/ 		// Create a new module (and put it into the cache)
        /******/ 		var module = installedModules[moduleId] = {
            /******/ 			i: moduleId,
            /******/ 			l: false,
            /******/ 			exports: {}
            /******/ 		};
        /******/
        /******/ 		// Execute the module function
        /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ 		// Flag the module as loaded
        /******/ 		module.l = true;
        /******/
        /******/ 		// Return the exports of the module
        /******/ 		return module.exports;
        /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
        /******/ 		if(!__webpack_require__.o(exports, name)) {
            /******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
            /******/ 		}
        /******/ 	};
    /******/
    /******/ 	// define __esModule on exports
    /******/ 	__webpack_require__.r = function(exports) {
        /******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
            /******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
            /******/ 		}
        /******/ 		Object.defineProperty(exports, '__esModule', { value: true });
        /******/ 	};
    /******/
    /******/ 	// create a fake namespace object
    /******/ 	// mode & 1: value is a module id, require it
    /******/ 	// mode & 2: merge all properties of value into the ns
    /******/ 	// mode & 4: return value when already ns object
    /******/ 	// mode & 8|1: behave like require
    /******/ 	__webpack_require__.t = function(value, mode) {
        /******/ 		if(mode & 1) value = __webpack_require__(value);
        /******/ 		if(mode & 8) return value;
        /******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
        /******/ 		var ns = Object.create(null);
        /******/ 		__webpack_require__.r(ns);
        /******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
        /******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
        /******/ 		return ns;
        /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
        /******/ 		var getter = module && module.__esModule ?
            /******/ 			function getDefault() { return module['default']; } :
            /******/ 			function getModuleExports() { return module; };
        /******/ 		__webpack_require__.d(getter, 'a', getter);
        /******/ 		return getter;
        /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "/build/admin/";
    /******/
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = 0);
    /******/ })
    /************************************************************************/
    /******/ ({

        /***/ "./node_modules/axios/index.js":
        /*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

            /***/ }),

        /***/ "./node_modules/axios/lib/adapters/xhr.js":
        /*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
            var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
            var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
            var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
            var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
            var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

            module.exports = function xhrAdapter(config) {
                return new Promise(function dispatchXhrRequest(resolve, reject) {
                    var requestData = config.data;
                    var requestHeaders = config.headers;

                    if (utils.isFormData(requestData)) {
                        delete requestHeaders['Content-Type']; // Let the browser set it
                    }

                    var request = new XMLHttpRequest();

                    // HTTP basic authentication
                    if (config.auth) {
                        var username = config.auth.username || '';
                        var password = config.auth.password || '';
                        requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
                    }

                    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

                    // Set the request timeout in MS
                    request.timeout = config.timeout;

                    // Listen for ready state
                    request.onreadystatechange = function handleLoad() {
                        if (!request || request.readyState !== 4) {
                            return;
                        }

                        // The request errored out and we didn't get a response, this will be
                        // handled by onerror instead
                        // With one exception: request that using file: protocol, most browsers
                        // will return status as 0 even though it's a successful request
                        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                            return;
                        }

                        // Prepare the response
                        var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
                        var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
                        var response = {
                            data: responseData,
                            status: request.status,
                            statusText: request.statusText,
                            headers: responseHeaders,
                            config: config,
                            request: request
                        };

                        settle(resolve, reject, response);

                        // Clean up request
                        request = null;
                    };

                    // Handle browser request cancellation (as opposed to a manual cancellation)
                    request.onabort = function handleAbort() {
                        if (!request) {
                            return;
                        }

                        reject(createError('Request aborted', config, 'ECONNABORTED', request));

                        // Clean up request
                        request = null;
                    };

                    // Handle low level network errors
                    request.onerror = function handleError() {
                        // Real errors are hidden from us by the browser
                        // onerror should only fire if it's a network error
                        reject(createError('Network Error', config, null, request));

                        // Clean up request
                        request = null;
                    };

                    // Handle timeout
                    request.ontimeout = function handleTimeout() {
                        reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
                            request));

                        // Clean up request
                        request = null;
                    };

                    // Add xsrf header
                    // This is only done if running in a standard browser environment.
                    // Specifically not if we're in a web worker, or react-native.
                    if (utils.isStandardBrowserEnv()) {
                        var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");

                        // Add xsrf header
                        var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
                            cookies.read(config.xsrfCookieName) :
                            undefined;

                        if (xsrfValue) {
                            requestHeaders[config.xsrfHeaderName] = xsrfValue;
                        }
                    }

                    // Add headers to the request
                    if ('setRequestHeader' in request) {
                        utils.forEach(requestHeaders, function setRequestHeader(val, key) {
                            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
                                // Remove Content-Type if data is undefined
                                delete requestHeaders[key];
                            } else {
                                // Otherwise add header to the request
                                request.setRequestHeader(key, val);
                            }
                        });
                    }

                    // Add withCredentials to request if needed
                    if (config.withCredentials) {
                        request.withCredentials = true;
                    }

                    // Add responseType to request if needed
                    if (config.responseType) {
                        try {
                            request.responseType = config.responseType;
                        } catch (e) {
                            // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
                            // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
                            if (config.responseType !== 'json') {
                                throw e;
                            }
                        }
                    }

                    // Handle progress if needed
                    if (typeof config.onDownloadProgress === 'function') {
                        request.addEventListener('progress', config.onDownloadProgress);
                    }

                    // Not all browsers support upload events
                    if (typeof config.onUploadProgress === 'function' && request.upload) {
                        request.upload.addEventListener('progress', config.onUploadProgress);
                    }

                    if (config.cancelToken) {
                        // Handle cancellation
                        config.cancelToken.promise.then(function onCanceled(cancel) {
                            if (!request) {
                                return;
                            }

                            request.abort();
                            reject(cancel);
                            // Clean up request
                            request = null;
                        });
                    }

                    if (requestData === undefined) {
                        requestData = null;
                    }

                    // Send the request
                    request.send(requestData);
                });
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/axios.js":
        /*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
            var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
            var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
            var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
            var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

            /**
             * Create an instance of Axios
             *
             * @param {Object} defaultConfig The default config for the instance
             * @return {Axios} A new instance of Axios
             */
            function createInstance(defaultConfig) {
                var context = new Axios(defaultConfig);
                var instance = bind(Axios.prototype.request, context);

                // Copy axios.prototype to instance
                utils.extend(instance, Axios.prototype, context);

                // Copy context to instance
                utils.extend(instance, context);

                return instance;
            }

// Create the default instance to be exported
            var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
            axios.Axios = Axios;

// Factory for creating new instances
            axios.create = function create(instanceConfig) {
                return createInstance(mergeConfig(axios.defaults, instanceConfig));
            };

// Expose Cancel & CancelToken
            axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
            axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
            axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
            axios.all = function all(promises) {
                return Promise.all(promises);
            };
            axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

            module.exports = axios;

// Allow use of default import syntax in TypeScript
            module.exports.default = axios;


            /***/ }),

        /***/ "./node_modules/axios/lib/cancel/Cancel.js":
        /*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            /**
             * A `Cancel` is an object that is thrown when an operation is canceled.
             *
             * @class
             * @param {string=} message The message.
             */
            function Cancel(message) {
                this.message = message;
            }

            Cancel.prototype.toString = function toString() {
                return 'Cancel' + (this.message ? ': ' + this.message : '');
            };

            Cancel.prototype.__CANCEL__ = true;

            module.exports = Cancel;


            /***/ }),

        /***/ "./node_modules/axios/lib/cancel/CancelToken.js":
        /*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

            /**
             * A `CancelToken` is an object that can be used to request cancellation of an operation.
             *
             * @class
             * @param {Function} executor The executor function.
             */
            function CancelToken(executor) {
                if (typeof executor !== 'function') {
                    throw new TypeError('executor must be a function.');
                }

                var resolvePromise;
                this.promise = new Promise(function promiseExecutor(resolve) {
                    resolvePromise = resolve;
                });

                var token = this;
                executor(function cancel(message) {
                    if (token.reason) {
                        // Cancellation has already been requested
                        return;
                    }

                    token.reason = new Cancel(message);
                    resolvePromise(token.reason);
                });
            }

            /**
             * Throws a `Cancel` if cancellation has been requested.
             */
            CancelToken.prototype.throwIfRequested = function throwIfRequested() {
                if (this.reason) {
                    throw this.reason;
                }
            };

            /**
             * Returns an object that contains a new `CancelToken` and a function that, when called,
             * cancels the `CancelToken`.
             */
            CancelToken.source = function source() {
                var cancel;
                var token = new CancelToken(function executor(c) {
                    cancel = c;
                });
                return {
                    token: token,
                    cancel: cancel
                };
            };

            module.exports = CancelToken;


            /***/ }),

        /***/ "./node_modules/axios/lib/cancel/isCancel.js":
        /*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            module.exports = function isCancel(value) {
                return !!(value && value.__CANCEL__);
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/core/Axios.js":
        /*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
            var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
            var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
            var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
            var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

            /**
             * Create a new instance of Axios
             *
             * @param {Object} instanceConfig The default config for the instance
             */
            function Axios(instanceConfig) {
                this.defaults = instanceConfig;
                this.interceptors = {
                    request: new InterceptorManager(),
                    response: new InterceptorManager()
                };
            }

            /**
             * Dispatch a request
             *
             * @param {Object} config The config specific for this request (merged with this.defaults)
             */
            Axios.prototype.request = function request(config) {
                /*eslint no-param-reassign:0*/
                // Allow for axios('example/url'[, config]) a la fetch API
                if (typeof config === 'string') {
                    config = arguments[1] || {};
                    config.url = arguments[0];
                } else {
                    config = config || {};
                }

                config = mergeConfig(this.defaults, config);
                config.method = config.method ? config.method.toLowerCase() : 'get';

                // Hook up interceptors middleware
                var chain = [dispatchRequest, undefined];
                var promise = Promise.resolve(config);

                this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
                    chain.unshift(interceptor.fulfilled, interceptor.rejected);
                });

                this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
                    chain.push(interceptor.fulfilled, interceptor.rejected);
                });

                while (chain.length) {
                    promise = promise.then(chain.shift(), chain.shift());
                }

                return promise;
            };

            Axios.prototype.getUri = function getUri(config) {
                config = mergeConfig(this.defaults, config);
                return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
            };

// Provide aliases for supported request methods
            utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
                /*eslint func-names:0*/
                Axios.prototype[method] = function(url, config) {
                    return this.request(utils.merge(config || {}, {
                        method: method,
                        url: url
                    }));
                };
            });

            utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
                /*eslint func-names:0*/
                Axios.prototype[method] = function(url, data, config) {
                    return this.request(utils.merge(config || {}, {
                        method: method,
                        url: url,
                        data: data
                    }));
                };
            });

            module.exports = Axios;


            /***/ }),

        /***/ "./node_modules/axios/lib/core/InterceptorManager.js":
        /*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

            function InterceptorManager() {
                this.handlers = [];
            }

            /**
             * Add a new interceptor to the stack
             *
             * @param {Function} fulfilled The function to handle `then` for a `Promise`
             * @param {Function} rejected The function to handle `reject` for a `Promise`
             *
             * @return {Number} An ID used to remove interceptor later
             */
            InterceptorManager.prototype.use = function use(fulfilled, rejected) {
                this.handlers.push({
                    fulfilled: fulfilled,
                    rejected: rejected
                });
                return this.handlers.length - 1;
            };

            /**
             * Remove an interceptor from the stack
             *
             * @param {Number} id The ID that was returned by `use`
             */
            InterceptorManager.prototype.eject = function eject(id) {
                if (this.handlers[id]) {
                    this.handlers[id] = null;
                }
            };

            /**
             * Iterate over all the registered interceptors
             *
             * This method is particularly useful for skipping over any
             * interceptors that may have become `null` calling `eject`.
             *
             * @param {Function} fn The function to call for each interceptor
             */
            InterceptorManager.prototype.forEach = function forEach(fn) {
                utils.forEach(this.handlers, function forEachHandler(h) {
                    if (h !== null) {
                        fn(h);
                    }
                });
            };

            module.exports = InterceptorManager;


            /***/ }),

        /***/ "./node_modules/axios/lib/core/createError.js":
        /*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

            /**
             * Create an Error with the specified message, config, error code, request and response.
             *
             * @param {string} message The error message.
             * @param {Object} config The config.
             * @param {string} [code] The error code (for example, 'ECONNABORTED').
             * @param {Object} [request] The request.
             * @param {Object} [response] The response.
             * @returns {Error} The created error.
             */
            module.exports = function createError(message, config, code, request, response) {
                var error = new Error(message);
                return enhanceError(error, config, code, request, response);
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/core/dispatchRequest.js":
        /*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
            var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
            var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
            var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");
            var isAbsoluteURL = __webpack_require__(/*! ./../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
            var combineURLs = __webpack_require__(/*! ./../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

            /**
             * Throws a `Cancel` if cancellation has been requested.
             */
            function throwIfCancellationRequested(config) {
                if (config.cancelToken) {
                    config.cancelToken.throwIfRequested();
                }
            }

            /**
             * Dispatch a request to the server using the configured adapter.
             *
             * @param {object} config The config that is to be used for the request
             * @returns {Promise} The Promise to be fulfilled
             */
            module.exports = function dispatchRequest(config) {
                throwIfCancellationRequested(config);

                // Support baseURL config
                if (config.baseURL && !isAbsoluteURL(config.url)) {
                    config.url = combineURLs(config.baseURL, config.url);
                }

                // Ensure headers exist
                config.headers = config.headers || {};

                // Transform request data
                config.data = transformData(
                    config.data,
                    config.headers,
                    config.transformRequest
                );

                // Flatten headers
                config.headers = utils.merge(
                    config.headers.common || {},
                    config.headers[config.method] || {},
                    config.headers || {}
                );

                utils.forEach(
                    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
                    function cleanHeaderConfig(method) {
                        delete config.headers[method];
                    }
                );

                var adapter = config.adapter || defaults.adapter;

                return adapter(config).then(function onAdapterResolution(response) {
                    throwIfCancellationRequested(config);

                    // Transform response data
                    response.data = transformData(
                        response.data,
                        response.headers,
                        config.transformResponse
                    );

                    return response;
                }, function onAdapterRejection(reason) {
                    if (!isCancel(reason)) {
                        throwIfCancellationRequested(config);

                        // Transform response data
                        if (reason && reason.response) {
                            reason.response.data = transformData(
                                reason.response.data,
                                reason.response.headers,
                                config.transformResponse
                            );
                        }
                    }

                    return Promise.reject(reason);
                });
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/core/enhanceError.js":
        /*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            /**
             * Update an Error with the specified config, error code, and response.
             *
             * @param {Error} error The error to update.
             * @param {Object} config The config.
             * @param {string} [code] The error code (for example, 'ECONNABORTED').
             * @param {Object} [request] The request.
             * @param {Object} [response] The response.
             * @returns {Error} The error.
             */
            module.exports = function enhanceError(error, config, code, request, response) {
                error.config = config;
                if (code) {
                    error.code = code;
                }

                error.request = request;
                error.response = response;
                error.isAxiosError = true;

                error.toJSON = function() {
                    return {
                        // Standard
                        message: this.message,
                        name: this.name,
                        // Microsoft
                        description: this.description,
                        number: this.number,
                        // Mozilla
                        fileName: this.fileName,
                        lineNumber: this.lineNumber,
                        columnNumber: this.columnNumber,
                        stack: this.stack,
                        // Axios
                        config: this.config,
                        code: this.code
                    };
                };
                return error;
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/core/mergeConfig.js":
        /*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

            /**
             * Config-specific merge-function which creates a new config-object
             * by merging two configuration objects together.
             *
             * @param {Object} config1
             * @param {Object} config2
             * @returns {Object} New object resulting from merging config2 to config1
             */
            module.exports = function mergeConfig(config1, config2) {
                // eslint-disable-next-line no-param-reassign
                config2 = config2 || {};
                var config = {};

                utils.forEach(['url', 'method', 'params', 'data'], function valueFromConfig2(prop) {
                    if (typeof config2[prop] !== 'undefined') {
                        config[prop] = config2[prop];
                    }
                });

                utils.forEach(['headers', 'auth', 'proxy'], function mergeDeepProperties(prop) {
                    if (utils.isObject(config2[prop])) {
                        config[prop] = utils.deepMerge(config1[prop], config2[prop]);
                    } else if (typeof config2[prop] !== 'undefined') {
                        config[prop] = config2[prop];
                    } else if (utils.isObject(config1[prop])) {
                        config[prop] = utils.deepMerge(config1[prop]);
                    } else if (typeof config1[prop] !== 'undefined') {
                        config[prop] = config1[prop];
                    }
                });

                utils.forEach([
                    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
                    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
                    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength',
                    'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken',
                    'socketPath'
                ], function defaultToConfig2(prop) {
                    if (typeof config2[prop] !== 'undefined') {
                        config[prop] = config2[prop];
                    } else if (typeof config1[prop] !== 'undefined') {
                        config[prop] = config1[prop];
                    }
                });

                return config;
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/core/settle.js":
        /*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

            /**
             * Resolve or reject a Promise based on response status.
             *
             * @param {Function} resolve A function that resolves the promise.
             * @param {Function} reject A function that rejects the promise.
             * @param {object} response The response.
             */
            module.exports = function settle(resolve, reject, response) {
                var validateStatus = response.config.validateStatus;
                if (!validateStatus || validateStatus(response.status)) {
                    resolve(response);
                } else {
                    reject(createError(
                        'Request failed with status code ' + response.status,
                        response.config,
                        null,
                        response.request,
                        response
                    ));
                }
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/core/transformData.js":
        /*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

            /**
             * Transform the data for a request or a response
             *
             * @param {Object|String} data The data to be transformed
             * @param {Array} headers The headers for the request or response
             * @param {Array|Function} fns A single function or Array of functions
             * @returns {*} The resulting transformed data
             */
            module.exports = function transformData(data, headers, fns) {
                /*eslint no-param-reassign:0*/
                utils.forEach(fns, function transform(fn) {
                    data = fn(data, headers);
                });

                return data;
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/defaults.js":
        /*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";
            /* WEBPACK VAR INJECTION */(function(process) {

                var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
                var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

                var DEFAULT_CONTENT_TYPE = {
                    'Content-Type': 'application/x-www-form-urlencoded'
                };

                function setContentTypeIfUnset(headers, value) {
                    if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
                        headers['Content-Type'] = value;
                    }
                }

                function getDefaultAdapter() {
                    var adapter;
                    // Only Node.JS has a process variable that is of [[Class]] process
                    if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
                        // For node use HTTP adapter
                        adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
                    } else if (typeof XMLHttpRequest !== 'undefined') {
                        // For browsers use XHR adapter
                        adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
                    }
                    return adapter;
                }

                var defaults = {
                    adapter: getDefaultAdapter(),

                    transformRequest: [function transformRequest(data, headers) {
                        normalizeHeaderName(headers, 'Accept');
                        normalizeHeaderName(headers, 'Content-Type');
                        if (utils.isFormData(data) ||
                            utils.isArrayBuffer(data) ||
                            utils.isBuffer(data) ||
                            utils.isStream(data) ||
                            utils.isFile(data) ||
                            utils.isBlob(data)
                        ) {
                            return data;
                        }
                        if (utils.isArrayBufferView(data)) {
                            return data.buffer;
                        }
                        if (utils.isURLSearchParams(data)) {
                            setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                            return data.toString();
                        }
                        if (utils.isObject(data)) {
                            setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
                            return JSON.stringify(data);
                        }
                        return data;
                    }],

                    transformResponse: [function transformResponse(data) {
                        /*eslint no-param-reassign:0*/
                        if (typeof data === 'string') {
                            try {
                                data = JSON.parse(data);
                            } catch (e) { /* Ignore */ }
                        }
                        return data;
                    }],

                    /**
                     * A timeout in milliseconds to abort a request. If set to 0 (default) a
                     * timeout is not created.
                     */
                    timeout: 0,

                    xsrfCookieName: 'XSRF-TOKEN',
                    xsrfHeaderName: 'X-XSRF-TOKEN',

                    maxContentLength: -1,

                    validateStatus: function validateStatus(status) {
                        return status >= 200 && status < 300;
                    }
                };

                defaults.headers = {
                    common: {
                        'Accept': 'application/json, text/plain, */*'
                    }
                };

                utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
                    defaults.headers[method] = {};
                });

                utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
                    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
                });

                module.exports = defaults;

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

            /***/ }),

        /***/ "./node_modules/axios/lib/helpers/bind.js":
        /*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            module.exports = function bind(fn, thisArg) {
                return function wrap() {
                    var args = new Array(arguments.length);
                    for (var i = 0; i < args.length; i++) {
                        args[i] = arguments[i];
                    }
                    return fn.apply(thisArg, args);
                };
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/helpers/buildURL.js":
        /*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

            function encode(val) {
                return encodeURIComponent(val).
                replace(/%40/gi, '@').
                replace(/%3A/gi, ':').
                replace(/%24/g, '$').
                replace(/%2C/gi, ',').
                replace(/%20/g, '+').
                replace(/%5B/gi, '[').
                replace(/%5D/gi, ']');
            }

            /**
             * Build a URL by appending params to the end
             *
             * @param {string} url The base of the url (e.g., http://www.google.com)
             * @param {object} [params] The params to be appended
             * @returns {string} The formatted url
             */
            module.exports = function buildURL(url, params, paramsSerializer) {
                /*eslint no-param-reassign:0*/
                if (!params) {
                    return url;
                }

                var serializedParams;
                if (paramsSerializer) {
                    serializedParams = paramsSerializer(params);
                } else if (utils.isURLSearchParams(params)) {
                    serializedParams = params.toString();
                } else {
                    var parts = [];

                    utils.forEach(params, function serialize(val, key) {
                        if (val === null || typeof val === 'undefined') {
                            return;
                        }

                        if (utils.isArray(val)) {
                            key = key + '[]';
                        } else {
                            val = [val];
                        }

                        utils.forEach(val, function parseValue(v) {
                            if (utils.isDate(v)) {
                                v = v.toISOString();
                            } else if (utils.isObject(v)) {
                                v = JSON.stringify(v);
                            }
                            parts.push(encode(key) + '=' + encode(v));
                        });
                    });

                    serializedParams = parts.join('&');
                }

                if (serializedParams) {
                    var hashmarkIndex = url.indexOf('#');
                    if (hashmarkIndex !== -1) {
                        url = url.slice(0, hashmarkIndex);
                    }

                    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
                }

                return url;
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/helpers/combineURLs.js":
        /*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            /**
             * Creates a new URL by combining the specified URLs
             *
             * @param {string} baseURL The base URL
             * @param {string} relativeURL The relative URL
             * @returns {string} The combined URL
             */
            module.exports = function combineURLs(baseURL, relativeURL) {
                return relativeURL
                    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
                    : baseURL;
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/helpers/cookies.js":
        /*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

            module.exports = (
                utils.isStandardBrowserEnv() ?

                    // Standard browser envs support document.cookie
                    (function standardBrowserEnv() {
                        return {
                            write: function write(name, value, expires, path, domain, secure) {
                                var cookie = [];
                                cookie.push(name + '=' + encodeURIComponent(value));

                                if (utils.isNumber(expires)) {
                                    cookie.push('expires=' + new Date(expires).toGMTString());
                                }

                                if (utils.isString(path)) {
                                    cookie.push('path=' + path);
                                }

                                if (utils.isString(domain)) {
                                    cookie.push('domain=' + domain);
                                }

                                if (secure === true) {
                                    cookie.push('secure');
                                }

                                document.cookie = cookie.join('; ');
                            },

                            read: function read(name) {
                                var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
                                return (match ? decodeURIComponent(match[3]) : null);
                            },

                            remove: function remove(name) {
                                this.write(name, '', Date.now() - 86400000);
                            }
                        };
                    })() :

                    // Non standard browser env (web workers, react-native) lack needed support.
                    (function nonStandardBrowserEnv() {
                        return {
                            write: function write() {},
                            read: function read() { return null; },
                            remove: function remove() {}
                        };
                    })()
            );


            /***/ }),

        /***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
        /*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            /**
             * Determines whether the specified URL is absolute
             *
             * @param {string} url The URL to test
             * @returns {boolean} True if the specified URL is absolute, otherwise false
             */
            module.exports = function isAbsoluteURL(url) {
                // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
                // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
                // by any combination of letters, digits, plus, period, or hyphen.
                return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
        /*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

            module.exports = (
                utils.isStandardBrowserEnv() ?

                    // Standard browser envs have full support of the APIs needed to test
                    // whether the request URL is of the same origin as current location.
                    (function standardBrowserEnv() {
                        var msie = /(msie|trident)/i.test(navigator.userAgent);
                        var urlParsingNode = document.createElement('a');
                        var originURL;

                        /**
                         * Parse a URL to discover it's components
                         *
                         * @param {String} url The URL to be parsed
                         * @returns {Object}
                         */
                        function resolveURL(url) {
                            var href = url;

                            if (msie) {
                                // IE needs attribute set twice to normalize properties
                                urlParsingNode.setAttribute('href', href);
                                href = urlParsingNode.href;
                            }

                            urlParsingNode.setAttribute('href', href);

                            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
                            return {
                                href: urlParsingNode.href,
                                protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                                host: urlParsingNode.host,
                                search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                                hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                                hostname: urlParsingNode.hostname,
                                port: urlParsingNode.port,
                                pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                                    urlParsingNode.pathname :
                                    '/' + urlParsingNode.pathname
                            };
                        }

                        originURL = resolveURL(window.location.href);

                        /**
                         * Determine if a URL shares the same origin as the current location
                         *
                         * @param {String} requestURL The URL to test
                         * @returns {boolean} True if URL shares the same origin, otherwise false
                         */
                        return function isURLSameOrigin(requestURL) {
                            var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
                            return (parsed.protocol === originURL.protocol &&
                                parsed.host === originURL.host);
                        };
                    })() :

                    // Non standard browser envs (web workers, react-native) lack needed support.
                    (function nonStandardBrowserEnv() {
                        return function isURLSameOrigin() {
                            return true;
                        };
                    })()
            );


            /***/ }),

        /***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
        /*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

            module.exports = function normalizeHeaderName(headers, normalizedName) {
                utils.forEach(headers, function processHeader(value, name) {
                    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                        headers[normalizedName] = value;
                        delete headers[name];
                    }
                });
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
        /*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
            var ignoreDuplicateOf = [
                'age', 'authorization', 'content-length', 'content-type', 'etag',
                'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
                'last-modified', 'location', 'max-forwards', 'proxy-authorization',
                'referer', 'retry-after', 'user-agent'
            ];

            /**
             * Parse headers into an object
             *
             * ```
             * Date: Wed, 27 Aug 2014 08:58:49 GMT
             * Content-Type: application/json
             * Connection: keep-alive
             * Transfer-Encoding: chunked
             * ```
             *
             * @param {String} headers Headers needing to be parsed
             * @returns {Object} Headers parsed into an object
             */
            module.exports = function parseHeaders(headers) {
                var parsed = {};
                var key;
                var val;
                var i;

                if (!headers) { return parsed; }

                utils.forEach(headers.split('\n'), function parser(line) {
                    i = line.indexOf(':');
                    key = utils.trim(line.substr(0, i)).toLowerCase();
                    val = utils.trim(line.substr(i + 1));

                    if (key) {
                        if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
                            return;
                        }
                        if (key === 'set-cookie') {
                            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
                        } else {
                            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
                        }
                    }
                });

                return parsed;
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/helpers/spread.js":
        /*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            /**
             * Syntactic sugar for invoking a function and expanding an array for arguments.
             *
             * Common use case would be to use `Function.prototype.apply`.
             *
             *  ```js
             *  function f(x, y, z) {}
             *  var args = [1, 2, 3];
             *  f.apply(null, args);
             *  ```
             *
             * With `spread` this example can be re-written.
             *
             *  ```js
             *  spread(function(x, y, z) {})([1, 2, 3]);
             *  ```
             *
             * @param {Function} callback
             * @returns {Function}
             */
            module.exports = function spread(callback) {
                return function wrap(arr) {
                    return callback.apply(null, arr);
                };
            };


            /***/ }),

        /***/ "./node_modules/axios/lib/utils.js":
        /*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";


            var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
            var isBuffer = __webpack_require__(/*! is-buffer */ "./node_modules/axios/node_modules/is-buffer/index.js");

            /*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

            var toString = Object.prototype.toString;

            /**
             * Determine if a value is an Array
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is an Array, otherwise false
             */
            function isArray(val) {
                return toString.call(val) === '[object Array]';
            }

            /**
             * Determine if a value is an ArrayBuffer
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is an ArrayBuffer, otherwise false
             */
            function isArrayBuffer(val) {
                return toString.call(val) === '[object ArrayBuffer]';
            }

            /**
             * Determine if a value is a FormData
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is an FormData, otherwise false
             */
            function isFormData(val) {
                return (typeof FormData !== 'undefined') && (val instanceof FormData);
            }

            /**
             * Determine if a value is a view on an ArrayBuffer
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
             */
            function isArrayBufferView(val) {
                var result;
                if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
                    result = ArrayBuffer.isView(val);
                } else {
                    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
                }
                return result;
            }

            /**
             * Determine if a value is a String
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a String, otherwise false
             */
            function isString(val) {
                return typeof val === 'string';
            }

            /**
             * Determine if a value is a Number
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a Number, otherwise false
             */
            function isNumber(val) {
                return typeof val === 'number';
            }

            /**
             * Determine if a value is undefined
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if the value is undefined, otherwise false
             */
            function isUndefined(val) {
                return typeof val === 'undefined';
            }

            /**
             * Determine if a value is an Object
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is an Object, otherwise false
             */
            function isObject(val) {
                return val !== null && typeof val === 'object';
            }

            /**
             * Determine if a value is a Date
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a Date, otherwise false
             */
            function isDate(val) {
                return toString.call(val) === '[object Date]';
            }

            /**
             * Determine if a value is a File
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a File, otherwise false
             */
            function isFile(val) {
                return toString.call(val) === '[object File]';
            }

            /**
             * Determine if a value is a Blob
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a Blob, otherwise false
             */
            function isBlob(val) {
                return toString.call(val) === '[object Blob]';
            }

            /**
             * Determine if a value is a Function
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a Function, otherwise false
             */
            function isFunction(val) {
                return toString.call(val) === '[object Function]';
            }

            /**
             * Determine if a value is a Stream
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a Stream, otherwise false
             */
            function isStream(val) {
                return isObject(val) && isFunction(val.pipe);
            }

            /**
             * Determine if a value is a URLSearchParams object
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a URLSearchParams object, otherwise false
             */
            function isURLSearchParams(val) {
                return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
            }

            /**
             * Trim excess whitespace off the beginning and end of a string
             *
             * @param {String} str The String to trim
             * @returns {String} The String freed of excess whitespace
             */
            function trim(str) {
                return str.replace(/^\s*/, '').replace(/\s*$/, '');
            }

            /**
             * Determine if we're running in a standard browser environment
             *
             * This allows axios to run in a web worker, and react-native.
             * Both environments support XMLHttpRequest, but not fully standard globals.
             *
             * web workers:
             *  typeof window -> undefined
             *  typeof document -> undefined
             *
             * react-native:
             *  navigator.product -> 'ReactNative'
             * nativescript
             *  navigator.product -> 'NativeScript' or 'NS'
             */
            function isStandardBrowserEnv() {
                if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                    navigator.product === 'NativeScript' ||
                    navigator.product === 'NS')) {
                    return false;
                }
                return (
                    typeof window !== 'undefined' &&
                    typeof document !== 'undefined'
                );
            }

            /**
             * Iterate over an Array or an Object invoking a function for each item.
             *
             * If `obj` is an Array callback will be called passing
             * the value, index, and complete array for each item.
             *
             * If 'obj' is an Object callback will be called passing
             * the value, key, and complete object for each property.
             *
             * @param {Object|Array} obj The object to iterate
             * @param {Function} fn The callback to invoke for each item
             */
            function forEach(obj, fn) {
                // Don't bother if no value provided
                if (obj === null || typeof obj === 'undefined') {
                    return;
                }

                // Force an array if not already something iterable
                if (typeof obj !== 'object') {
                    /*eslint no-param-reassign:0*/
                    obj = [obj];
                }

                if (isArray(obj)) {
                    // Iterate over array values
                    for (var i = 0, l = obj.length; i < l; i++) {
                        fn.call(null, obj[i], i, obj);
                    }
                } else {
                    // Iterate over object keys
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            fn.call(null, obj[key], key, obj);
                        }
                    }
                }
            }

            /**
             * Accepts varargs expecting each argument to be an object, then
             * immutably merges the properties of each object and returns result.
             *
             * When multiple objects contain the same key the later object in
             * the arguments list will take precedence.
             *
             * Example:
             *
             * ```js
             * var result = merge({foo: 123}, {foo: 456});
             * console.log(result.foo); // outputs 456
             * ```
             *
             * @param {Object} obj1 Object to merge
             * @returns {Object} Result of all merge properties
             */
            function merge(/* obj1, obj2, obj3, ... */) {
                var result = {};
                function assignValue(val, key) {
                    if (typeof result[key] === 'object' && typeof val === 'object') {
                        result[key] = merge(result[key], val);
                    } else {
                        result[key] = val;
                    }
                }

                for (var i = 0, l = arguments.length; i < l; i++) {
                    forEach(arguments[i], assignValue);
                }
                return result;
            }

            /**
             * Function equal to merge with the difference being that no reference
             * to original objects is kept.
             *
             * @see merge
             * @param {Object} obj1 Object to merge
             * @returns {Object} Result of all merge properties
             */
            function deepMerge(/* obj1, obj2, obj3, ... */) {
                var result = {};
                function assignValue(val, key) {
                    if (typeof result[key] === 'object' && typeof val === 'object') {
                        result[key] = deepMerge(result[key], val);
                    } else if (typeof val === 'object') {
                        result[key] = deepMerge({}, val);
                    } else {
                        result[key] = val;
                    }
                }

                for (var i = 0, l = arguments.length; i < l; i++) {
                    forEach(arguments[i], assignValue);
                }
                return result;
            }

            /**
             * Extends object a by mutably adding to it the properties of object b.
             *
             * @param {Object} a The object to be extended
             * @param {Object} b The object to copy properties from
             * @param {Object} thisArg The object to bind function to
             * @return {Object} The resulting value of object a
             */
            function extend(a, b, thisArg) {
                forEach(b, function assignValue(val, key) {
                    if (thisArg && typeof val === 'function') {
                        a[key] = bind(val, thisArg);
                    } else {
                        a[key] = val;
                    }
                });
                return a;
            }

            module.exports = {
                isArray: isArray,
                isArrayBuffer: isArrayBuffer,
                isBuffer: isBuffer,
                isFormData: isFormData,
                isArrayBufferView: isArrayBufferView,
                isString: isString,
                isNumber: isNumber,
                isObject: isObject,
                isUndefined: isUndefined,
                isDate: isDate,
                isFile: isFile,
                isBlob: isBlob,
                isFunction: isFunction,
                isStream: isStream,
                isURLSearchParams: isURLSearchParams,
                isStandardBrowserEnv: isStandardBrowserEnv,
                forEach: forEach,
                merge: merge,
                deepMerge: deepMerge,
                extend: extend,
                trim: trim
            };


            /***/ }),

        /***/ "./node_modules/axios/node_modules/is-buffer/index.js":
        /*!************************************************************!*\
  !*** ./node_modules/axios/node_modules/is-buffer/index.js ***!
  \************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

            module.exports = function isBuffer (obj) {
                return obj != null && obj.constructor != null &&
                    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
            }


            /***/ }),

        /***/ "./node_modules/bootstrap-datepicker/dist/js/bootstrap-datepicker.js":
        /*!***************************************************************************!*\
  !*** ./node_modules/bootstrap-datepicker/dist/js/bootstrap-datepicker.js ***!
  \***************************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * Datepicker for Bootstrap v1.9.0 (https://github.com/uxsolutions/bootstrap-datepicker)
 *
 * Licensed under the Apache License v2.0 (http://www.apache.org/licenses/LICENSE-2.0)
 */

            (function(factory){
                if (true) {
                    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
                        __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                            (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                } else {}
            }(function($, undefined){
                function UTCDate(){
                    return new Date(Date.UTC.apply(Date, arguments));
                }
                function UTCToday(){
                    var today = new Date();
                    return UTCDate(today.getFullYear(), today.getMonth(), today.getDate());
                }
                function isUTCEquals(date1, date2) {
                    return (
                        date1.getUTCFullYear() === date2.getUTCFullYear() &&
                        date1.getUTCMonth() === date2.getUTCMonth() &&
                        date1.getUTCDate() === date2.getUTCDate()
                    );
                }
                function alias(method, deprecationMsg){
                    return function(){
                        if (deprecationMsg !== undefined) {
                            $.fn.datepicker.deprecated(deprecationMsg);
                        }

                        return this[method].apply(this, arguments);
                    };
                }
                function isValidDate(d) {
                    return d && !isNaN(d.getTime());
                }

                var DateArray = (function(){
                    var extras = {
                        get: function(i){
                            return this.slice(i)[0];
                        },
                        contains: function(d){
                            // Array.indexOf is not cross-browser;
                            // $.inArray doesn't work with Dates
                            var val = d && d.valueOf();
                            for (var i=0, l=this.length; i < l; i++)
                                // Use date arithmetic to allow dates with different times to match
                                if (0 <= this[i].valueOf() - val && this[i].valueOf() - val < 1000*60*60*24)
                                    return i;
                            return -1;
                        },
                        remove: function(i){
                            this.splice(i,1);
                        },
                        replace: function(new_array){
                            if (!new_array)
                                return;
                            if (!$.isArray(new_array))
                                new_array = [new_array];
                            this.clear();
                            this.push.apply(this, new_array);
                        },
                        clear: function(){
                            this.length = 0;
                        },
                        copy: function(){
                            var a = new DateArray();
                            a.replace(this);
                            return a;
                        }
                    };

                    return function(){
                        var a = [];
                        a.push.apply(a, arguments);
                        $.extend(a, extras);
                        return a;
                    };
                })();


                // Picker object

                var Datepicker = function(element, options){
                    $.data(element, 'datepicker', this);

                    this._events = [];
                    this._secondaryEvents = [];

                    this._process_options(options);

                    this.dates = new DateArray();
                    this.viewDate = this.o.defaultViewDate;
                    this.focusDate = null;

                    this.element = $(element);
                    this.isInput = this.element.is('input');
                    this.inputField = this.isInput ? this.element : this.element.find('input');
                    this.component = this.element.hasClass('date') ? this.element.find('.add-on, .input-group-addon, .input-group-append, .input-group-prepend, .btn') : false;
                    if (this.component && this.component.length === 0)
                        this.component = false;
                    this.isInline = !this.component && this.element.is('div');

                    this.picker = $(DPGlobal.template);

                    // Checking templates and inserting
                    if (this._check_template(this.o.templates.leftArrow)) {
                        this.picker.find('.prev').html(this.o.templates.leftArrow);
                    }

                    if (this._check_template(this.o.templates.rightArrow)) {
                        this.picker.find('.next').html(this.o.templates.rightArrow);
                    }

                    this._buildEvents();
                    this._attachEvents();

                    if (this.isInline){
                        this.picker.addClass('datepicker-inline').appendTo(this.element);
                    }
                    else {
                        this.picker.addClass('datepicker-dropdown dropdown-menu');
                    }

                    if (this.o.rtl){
                        this.picker.addClass('datepicker-rtl');
                    }

                    if (this.o.calendarWeeks) {
                        this.picker.find('.datepicker-days .datepicker-switch, thead .datepicker-title, tfoot .today, tfoot .clear')
                            .attr('colspan', function(i, val){
                                return Number(val) + 1;
                            });
                    }

                    this._process_options({
                        startDate: this._o.startDate,
                        endDate: this._o.endDate,
                        daysOfWeekDisabled: this.o.daysOfWeekDisabled,
                        daysOfWeekHighlighted: this.o.daysOfWeekHighlighted,
                        datesDisabled: this.o.datesDisabled
                    });

                    this._allow_update = false;
                    this.setViewMode(this.o.startView);
                    this._allow_update = true;

                    this.fillDow();
                    this.fillMonths();

                    this.update();

                    if (this.isInline){
                        this.show();
                    }
                };

                Datepicker.prototype = {
                    constructor: Datepicker,

                    _resolveViewName: function(view){
                        $.each(DPGlobal.viewModes, function(i, viewMode){
                            if (view === i || $.inArray(view, viewMode.names) !== -1){
                                view = i;
                                return false;
                            }
                        });

                        return view;
                    },

                    _resolveDaysOfWeek: function(daysOfWeek){
                        if (!$.isArray(daysOfWeek))
                            daysOfWeek = daysOfWeek.split(/[,\s]*/);
                        return $.map(daysOfWeek, Number);
                    },

                    _check_template: function(tmp){
                        try {
                            // If empty
                            if (tmp === undefined || tmp === "") {
                                return false;
                            }
                            // If no html, everything ok
                            if ((tmp.match(/[<>]/g) || []).length <= 0) {
                                return true;
                            }
                            // Checking if html is fine
                            var jDom = $(tmp);
                            return jDom.length > 0;
                        }
                        catch (ex) {
                            return false;
                        }
                    },

                    _process_options: function(opts){
                        // Store raw options for reference
                        this._o = $.extend({}, this._o, opts);
                        // Processed options
                        var o = this.o = $.extend({}, this._o);

                        // Check if "de-DE" style date is available, if not language should
                        // fallback to 2 letter code eg "de"
                        var lang = o.language;
                        if (!dates[lang]){
                            lang = lang.split('-')[0];
                            if (!dates[lang])
                                lang = defaults.language;
                        }
                        o.language = lang;

                        // Retrieve view index from any aliases
                        o.startView = this._resolveViewName(o.startView);
                        o.minViewMode = this._resolveViewName(o.minViewMode);
                        o.maxViewMode = this._resolveViewName(o.maxViewMode);

                        // Check view is between min and max
                        o.startView = Math.max(this.o.minViewMode, Math.min(this.o.maxViewMode, o.startView));

                        // true, false, or Number > 0
                        if (o.multidate !== true){
                            o.multidate = Number(o.multidate) || false;
                            if (o.multidate !== false)
                                o.multidate = Math.max(0, o.multidate);
                        }
                        o.multidateSeparator = String(o.multidateSeparator);

                        o.weekStart %= 7;
                        o.weekEnd = (o.weekStart + 6) % 7;

                        var format = DPGlobal.parseFormat(o.format);
                        if (o.startDate !== -Infinity){
                            if (!!o.startDate){
                                if (o.startDate instanceof Date)
                                    o.startDate = this._local_to_utc(this._zero_time(o.startDate));
                                else
                                    o.startDate = DPGlobal.parseDate(o.startDate, format, o.language, o.assumeNearbyYear);
                            }
                            else {
                                o.startDate = -Infinity;
                            }
                        }
                        if (o.endDate !== Infinity){
                            if (!!o.endDate){
                                if (o.endDate instanceof Date)
                                    o.endDate = this._local_to_utc(this._zero_time(o.endDate));
                                else
                                    o.endDate = DPGlobal.parseDate(o.endDate, format, o.language, o.assumeNearbyYear);
                            }
                            else {
                                o.endDate = Infinity;
                            }
                        }

                        o.daysOfWeekDisabled = this._resolveDaysOfWeek(o.daysOfWeekDisabled||[]);
                        o.daysOfWeekHighlighted = this._resolveDaysOfWeek(o.daysOfWeekHighlighted||[]);

                        o.datesDisabled = o.datesDisabled||[];
                        if (!$.isArray(o.datesDisabled)) {
                            o.datesDisabled = o.datesDisabled.split(',');
                        }
                        o.datesDisabled = $.map(o.datesDisabled, function(d){
                            return DPGlobal.parseDate(d, format, o.language, o.assumeNearbyYear);
                        });

                        var plc = String(o.orientation).toLowerCase().split(/\s+/g),
                            _plc = o.orientation.toLowerCase();
                        plc = $.grep(plc, function(word){
                            return /^auto|left|right|top|bottom$/.test(word);
                        });
                        o.orientation = {x: 'auto', y: 'auto'};
                        if (!_plc || _plc === 'auto')
                            ; // no action
                        else if (plc.length === 1){
                            switch (plc[0]){
                                case 'top':
                                case 'bottom':
                                    o.orientation.y = plc[0];
                                    break;
                                case 'left':
                                case 'right':
                                    o.orientation.x = plc[0];
                                    break;
                            }
                        }
                        else {
                            _plc = $.grep(plc, function(word){
                                return /^left|right$/.test(word);
                            });
                            o.orientation.x = _plc[0] || 'auto';

                            _plc = $.grep(plc, function(word){
                                return /^top|bottom$/.test(word);
                            });
                            o.orientation.y = _plc[0] || 'auto';
                        }
                        if (o.defaultViewDate instanceof Date || typeof o.defaultViewDate === 'string') {
                            o.defaultViewDate = DPGlobal.parseDate(o.defaultViewDate, format, o.language, o.assumeNearbyYear);
                        } else if (o.defaultViewDate) {
                            var year = o.defaultViewDate.year || new Date().getFullYear();
                            var month = o.defaultViewDate.month || 0;
                            var day = o.defaultViewDate.day || 1;
                            o.defaultViewDate = UTCDate(year, month, day);
                        } else {
                            o.defaultViewDate = UTCToday();
                        }
                    },
                    _applyEvents: function(evs){
                        for (var i=0, el, ch, ev; i < evs.length; i++){
                            el = evs[i][0];
                            if (evs[i].length === 2){
                                ch = undefined;
                                ev = evs[i][1];
                            } else if (evs[i].length === 3){
                                ch = evs[i][1];
                                ev = evs[i][2];
                            }
                            el.on(ev, ch);
                        }
                    },
                    _unapplyEvents: function(evs){
                        for (var i=0, el, ev, ch; i < evs.length; i++){
                            el = evs[i][0];
                            if (evs[i].length === 2){
                                ch = undefined;
                                ev = evs[i][1];
                            } else if (evs[i].length === 3){
                                ch = evs[i][1];
                                ev = evs[i][2];
                            }
                            el.off(ev, ch);
                        }
                    },
                    _buildEvents: function(){
                        var events = {
                            keyup: $.proxy(function(e){
                                if ($.inArray(e.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) === -1)
                                    this.update();
                            }, this),
                            keydown: $.proxy(this.keydown, this),
                            paste: $.proxy(this.paste, this)
                        };

                        if (this.o.showOnFocus === true) {
                            events.focus = $.proxy(this.show, this);
                        }

                        if (this.isInput) { // single input
                            this._events = [
                                [this.element, events]
                            ];
                        }
                        // component: input + button
                        else if (this.component && this.inputField.length) {
                            this._events = [
                                // For components that are not readonly, allow keyboard nav
                                [this.inputField, events],
                                [this.component, {
                                    click: $.proxy(this.show, this)
                                }]
                            ];
                        }
                        else {
                            this._events = [
                                [this.element, {
                                    click: $.proxy(this.show, this),
                                    keydown: $.proxy(this.keydown, this)
                                }]
                            ];
                        }
                        this._events.push(
                            // Component: listen for blur on element descendants
                            [this.element, '*', {
                                blur: $.proxy(function(e){
                                    this._focused_from = e.target;
                                }, this)
                            }],
                            // Input: listen for blur on element
                            [this.element, {
                                blur: $.proxy(function(e){
                                    this._focused_from = e.target;
                                }, this)
                            }]
                        );

                        if (this.o.immediateUpdates) {
                            // Trigger input updates immediately on changed year/month
                            this._events.push([this.element, {
                                'changeYear changeMonth': $.proxy(function(e){
                                    this.update(e.date);
                                }, this)
                            }]);
                        }

                        this._secondaryEvents = [
                            [this.picker, {
                                click: $.proxy(this.click, this)
                            }],
                            [this.picker, '.prev, .next', {
                                click: $.proxy(this.navArrowsClick, this)
                            }],
                            [this.picker, '.day:not(.disabled)', {
                                click: $.proxy(this.dayCellClick, this)
                            }],
                            [$(window), {
                                resize: $.proxy(this.place, this)
                            }],
                            [$(document), {
                                'mousedown touchstart': $.proxy(function(e){
                                    // Clicked outside the datepicker, hide it
                                    if (!(
                                        this.element.is(e.target) ||
                                        this.element.find(e.target).length ||
                                        this.picker.is(e.target) ||
                                        this.picker.find(e.target).length ||
                                        this.isInline
                                    )){
                                        this.hide();
                                    }
                                }, this)
                            }]
                        ];
                    },
                    _attachEvents: function(){
                        this._detachEvents();
                        this._applyEvents(this._events);
                    },
                    _detachEvents: function(){
                        this._unapplyEvents(this._events);
                    },
                    _attachSecondaryEvents: function(){
                        this._detachSecondaryEvents();
                        this._applyEvents(this._secondaryEvents);
                    },
                    _detachSecondaryEvents: function(){
                        this._unapplyEvents(this._secondaryEvents);
                    },
                    _trigger: function(event, altdate){
                        var date = altdate || this.dates.get(-1),
                            local_date = this._utc_to_local(date);

                        this.element.trigger({
                            type: event,
                            date: local_date,
                            viewMode: this.viewMode,
                            dates: $.map(this.dates, this._utc_to_local),
                            format: $.proxy(function(ix, format){
                                if (arguments.length === 0){
                                    ix = this.dates.length - 1;
                                    format = this.o.format;
                                } else if (typeof ix === 'string'){
                                    format = ix;
                                    ix = this.dates.length - 1;
                                }
                                format = format || this.o.format;
                                var date = this.dates.get(ix);
                                return DPGlobal.formatDate(date, format, this.o.language);
                            }, this)
                        });
                    },

                    show: function(){
                        if (this.inputField.is(':disabled') || (this.inputField.prop('readonly') && this.o.enableOnReadonly === false))
                            return;
                        if (!this.isInline)
                            this.picker.appendTo(this.o.container);
                        this.place();
                        this.picker.show();
                        this._attachSecondaryEvents();
                        this._trigger('show');
                        if ((window.navigator.msMaxTouchPoints || 'ontouchstart' in document) && this.o.disableTouchKeyboard) {
                            $(this.element).blur();
                        }
                        return this;
                    },

                    hide: function(){
                        if (this.isInline || !this.picker.is(':visible'))
                            return this;
                        this.focusDate = null;
                        this.picker.hide().detach();
                        this._detachSecondaryEvents();
                        this.setViewMode(this.o.startView);

                        if (this.o.forceParse && this.inputField.val())
                            this.setValue();
                        this._trigger('hide');
                        return this;
                    },

                    destroy: function(){
                        this.hide();
                        this._detachEvents();
                        this._detachSecondaryEvents();
                        this.picker.remove();
                        delete this.element.data().datepicker;
                        if (!this.isInput){
                            delete this.element.data().date;
                        }
                        return this;
                    },

                    paste: function(e){
                        var dateString;
                        if (e.originalEvent.clipboardData && e.originalEvent.clipboardData.types
                            && $.inArray('text/plain', e.originalEvent.clipboardData.types) !== -1) {
                            dateString = e.originalEvent.clipboardData.getData('text/plain');
                        } else if (window.clipboardData) {
                            dateString = window.clipboardData.getData('Text');
                        } else {
                            return;
                        }
                        this.setDate(dateString);
                        this.update();
                        e.preventDefault();
                    },

                    _utc_to_local: function(utc){
                        if (!utc) {
                            return utc;
                        }

                        var local = new Date(utc.getTime() + (utc.getTimezoneOffset() * 60000));

                        if (local.getTimezoneOffset() !== utc.getTimezoneOffset()) {
                            local = new Date(utc.getTime() + (local.getTimezoneOffset() * 60000));
                        }

                        return local;
                    },
                    _local_to_utc: function(local){
                        return local && new Date(local.getTime() - (local.getTimezoneOffset()*60000));
                    },
                    _zero_time: function(local){
                        return local && new Date(local.getFullYear(), local.getMonth(), local.getDate());
                    },
                    _zero_utc_time: function(utc){
                        return utc && UTCDate(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate());
                    },

                    getDates: function(){
                        return $.map(this.dates, this._utc_to_local);
                    },

                    getUTCDates: function(){
                        return $.map(this.dates, function(d){
                            return new Date(d);
                        });
                    },

                    getDate: function(){
                        return this._utc_to_local(this.getUTCDate());
                    },

                    getUTCDate: function(){
                        var selected_date = this.dates.get(-1);
                        if (selected_date !== undefined) {
                            return new Date(selected_date);
                        } else {
                            return null;
                        }
                    },

                    clearDates: function(){
                        this.inputField.val('');
                        this.update();
                        this._trigger('changeDate');

                        if (this.o.autoclose) {
                            this.hide();
                        }
                    },

                    setDates: function(){
                        var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
                        this.update.apply(this, args);
                        this._trigger('changeDate');
                        this.setValue();
                        return this;
                    },

                    setUTCDates: function(){
                        var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
                        this.setDates.apply(this, $.map(args, this._utc_to_local));
                        return this;
                    },

                    setDate: alias('setDates'),
                    setUTCDate: alias('setUTCDates'),
                    remove: alias('destroy', 'Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead'),

                    setValue: function(){
                        var formatted = this.getFormattedDate();
                        this.inputField.val(formatted);
                        return this;
                    },

                    getFormattedDate: function(format){
                        if (format === undefined)
                            format = this.o.format;

                        var lang = this.o.language;
                        return $.map(this.dates, function(d){
                            return DPGlobal.formatDate(d, format, lang);
                        }).join(this.o.multidateSeparator);
                    },

                    getStartDate: function(){
                        return this.o.startDate;
                    },

                    setStartDate: function(startDate){
                        this._process_options({startDate: startDate});
                        this.update();
                        this.updateNavArrows();
                        return this;
                    },

                    getEndDate: function(){
                        return this.o.endDate;
                    },

                    setEndDate: function(endDate){
                        this._process_options({endDate: endDate});
                        this.update();
                        this.updateNavArrows();
                        return this;
                    },

                    setDaysOfWeekDisabled: function(daysOfWeekDisabled){
                        this._process_options({daysOfWeekDisabled: daysOfWeekDisabled});
                        this.update();
                        return this;
                    },

                    setDaysOfWeekHighlighted: function(daysOfWeekHighlighted){
                        this._process_options({daysOfWeekHighlighted: daysOfWeekHighlighted});
                        this.update();
                        return this;
                    },

                    setDatesDisabled: function(datesDisabled){
                        this._process_options({datesDisabled: datesDisabled});
                        this.update();
                        return this;
                    },

                    place: function(){
                        if (this.isInline)
                            return this;
                        var calendarWidth = this.picker.outerWidth(),
                            calendarHeight = this.picker.outerHeight(),
                            visualPadding = 10,
                            container = $(this.o.container),
                            windowWidth = container.width(),
                            scrollTop = this.o.container === 'body' ? $(document).scrollTop() : container.scrollTop(),
                            appendOffset = container.offset();

                        var parentsZindex = [0];
                        this.element.parents().each(function(){
                            var itemZIndex = $(this).css('z-index');
                            if (itemZIndex !== 'auto' && Number(itemZIndex) !== 0) parentsZindex.push(Number(itemZIndex));
                        });
                        var zIndex = Math.max.apply(Math, parentsZindex) + this.o.zIndexOffset;
                        var offset = this.component ? this.component.parent().offset() : this.element.offset();
                        var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);
                        var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);
                        var left = offset.left - appendOffset.left;
                        var top = offset.top - appendOffset.top;

                        if (this.o.container !== 'body') {
                            top += scrollTop;
                        }

                        this.picker.removeClass(
                            'datepicker-orient-top datepicker-orient-bottom '+
                            'datepicker-orient-right datepicker-orient-left'
                        );

                        if (this.o.orientation.x !== 'auto'){
                            this.picker.addClass('datepicker-orient-' + this.o.orientation.x);
                            if (this.o.orientation.x === 'right')
                                left -= calendarWidth - width;
                        }
                            // auto x orientation is best-placement: if it crosses a window
                        // edge, fudge it sideways
                        else {
                            if (offset.left < 0) {
                                // component is outside the window on the left side. Move it into visible range
                                this.picker.addClass('datepicker-orient-left');
                                left -= offset.left - visualPadding;
                            } else if (left + calendarWidth > windowWidth) {
                                // the calendar passes the widow right edge. Align it to component right side
                                this.picker.addClass('datepicker-orient-right');
                                left += width - calendarWidth;
                            } else {
                                if (this.o.rtl) {
                                    // Default to right
                                    this.picker.addClass('datepicker-orient-right');
                                } else {
                                    // Default to left
                                    this.picker.addClass('datepicker-orient-left');
                                }
                            }
                        }

                        // auto y orientation is best-situation: top or bottom, no fudging,
                        // decision based on which shows more of the calendar
                        var yorient = this.o.orientation.y,
                            top_overflow;
                        if (yorient === 'auto'){
                            top_overflow = -scrollTop + top - calendarHeight;
                            yorient = top_overflow < 0 ? 'bottom' : 'top';
                        }

                        this.picker.addClass('datepicker-orient-' + yorient);
                        if (yorient === 'top')
                            top -= calendarHeight + parseInt(this.picker.css('padding-top'));
                        else
                            top += height;

                        if (this.o.rtl) {
                            var right = windowWidth - (left + width);
                            this.picker.css({
                                top: top,
                                right: right,
                                zIndex: zIndex
                            });
                        } else {
                            this.picker.css({
                                top: top,
                                left: left,
                                zIndex: zIndex
                            });
                        }
                        return this;
                    },

                    _allow_update: true,
                    update: function(){
                        if (!this._allow_update)
                            return this;

                        var oldDates = this.dates.copy(),
                            dates = [],
                            fromArgs = false;
                        if (arguments.length){
                            $.each(arguments, $.proxy(function(i, date){
                                if (date instanceof Date)
                                    date = this._local_to_utc(date);
                                dates.push(date);
                            }, this));
                            fromArgs = true;
                        } else {
                            dates = this.isInput
                                ? this.element.val()
                                : this.element.data('date') || this.inputField.val();
                            if (dates && this.o.multidate)
                                dates = dates.split(this.o.multidateSeparator);
                            else
                                dates = [dates];
                            delete this.element.data().date;
                        }

                        dates = $.map(dates, $.proxy(function(date){
                            return DPGlobal.parseDate(date, this.o.format, this.o.language, this.o.assumeNearbyYear);
                        }, this));
                        dates = $.grep(dates, $.proxy(function(date){
                            return (
                                !this.dateWithinRange(date) ||
                                !date
                            );
                        }, this), true);
                        this.dates.replace(dates);

                        if (this.o.updateViewDate) {
                            if (this.dates.length)
                                this.viewDate = new Date(this.dates.get(-1));
                            else if (this.viewDate < this.o.startDate)
                                this.viewDate = new Date(this.o.startDate);
                            else if (this.viewDate > this.o.endDate)
                                this.viewDate = new Date(this.o.endDate);
                            else
                                this.viewDate = this.o.defaultViewDate;
                        }

                        if (fromArgs){
                            // setting date by clicking
                            this.setValue();
                            this.element.change();
                        }
                        else if (this.dates.length){
                            // setting date by typing
                            if (String(oldDates) !== String(this.dates) && fromArgs) {
                                this._trigger('changeDate');
                                this.element.change();
                            }
                        }
                        if (!this.dates.length && oldDates.length) {
                            this._trigger('clearDate');
                            this.element.change();
                        }

                        this.fill();
                        return this;
                    },

                    fillDow: function(){
                        if (this.o.showWeekDays) {
                            var dowCnt = this.o.weekStart,
                                html = '<tr>';
                            if (this.o.calendarWeeks){
                                html += '<th class="cw">&#160;</th>';
                            }
                            while (dowCnt < this.o.weekStart + 7){
                                html += '<th class="dow';
                                if ($.inArray(dowCnt, this.o.daysOfWeekDisabled) !== -1)
                                    html += ' disabled';
                                html += '">'+dates[this.o.language].daysMin[(dowCnt++)%7]+'</th>';
                            }
                            html += '</tr>';
                            this.picker.find('.datepicker-days thead').append(html);
                        }
                    },

                    fillMonths: function(){
                        var localDate = this._utc_to_local(this.viewDate);
                        var html = '';
                        var focused;
                        for (var i = 0; i < 12; i++){
                            focused = localDate && localDate.getMonth() === i ? ' focused' : '';
                            html += '<span class="month' + focused + '">' + dates[this.o.language].monthsShort[i] + '</span>';
                        }
                        this.picker.find('.datepicker-months td').html(html);
                    },

                    setRange: function(range){
                        if (!range || !range.length)
                            delete this.range;
                        else
                            this.range = $.map(range, function(d){
                                return d.valueOf();
                            });
                        this.fill();
                    },

                    getClassNames: function(date){
                        var cls = [],
                            year = this.viewDate.getUTCFullYear(),
                            month = this.viewDate.getUTCMonth(),
                            today = UTCToday();
                        if (date.getUTCFullYear() < year || (date.getUTCFullYear() === year && date.getUTCMonth() < month)){
                            cls.push('old');
                        } else if (date.getUTCFullYear() > year || (date.getUTCFullYear() === year && date.getUTCMonth() > month)){
                            cls.push('new');
                        }
                        if (this.focusDate && date.valueOf() === this.focusDate.valueOf())
                            cls.push('focused');
                        // Compare internal UTC date with UTC today, not local today
                        if (this.o.todayHighlight && isUTCEquals(date, today)) {
                            cls.push('today');
                        }
                        if (this.dates.contains(date) !== -1)
                            cls.push('active');
                        if (!this.dateWithinRange(date)){
                            cls.push('disabled');
                        }
                        if (this.dateIsDisabled(date)){
                            cls.push('disabled', 'disabled-date');
                        }
                        if ($.inArray(date.getUTCDay(), this.o.daysOfWeekHighlighted) !== -1){
                            cls.push('highlighted');
                        }

                        if (this.range){
                            if (date > this.range[0] && date < this.range[this.range.length-1]){
                                cls.push('range');
                            }
                            if ($.inArray(date.valueOf(), this.range) !== -1){
                                cls.push('selected');
                            }
                            if (date.valueOf() === this.range[0]){
                                cls.push('range-start');
                            }
                            if (date.valueOf() === this.range[this.range.length-1]){
                                cls.push('range-end');
                            }
                        }
                        return cls;
                    },

                    _fill_yearsView: function(selector, cssClass, factor, year, startYear, endYear, beforeFn){
                        var html = '';
                        var step = factor / 10;
                        var view = this.picker.find(selector);
                        var startVal = Math.floor(year / factor) * factor;
                        var endVal = startVal + step * 9;
                        var focusedVal = Math.floor(this.viewDate.getFullYear() / step) * step;
                        var selected = $.map(this.dates, function(d){
                            return Math.floor(d.getUTCFullYear() / step) * step;
                        });

                        var classes, tooltip, before;
                        for (var currVal = startVal - step; currVal <= endVal + step; currVal += step) {
                            classes = [cssClass];
                            tooltip = null;

                            if (currVal === startVal - step) {
                                classes.push('old');
                            } else if (currVal === endVal + step) {
                                classes.push('new');
                            }
                            if ($.inArray(currVal, selected) !== -1) {
                                classes.push('active');
                            }
                            if (currVal < startYear || currVal > endYear) {
                                classes.push('disabled');
                            }
                            if (currVal === focusedVal) {
                                classes.push('focused');
                            }

                            if (beforeFn !== $.noop) {
                                before = beforeFn(new Date(currVal, 0, 1));
                                if (before === undefined) {
                                    before = {};
                                } else if (typeof before === 'boolean') {
                                    before = {enabled: before};
                                } else if (typeof before === 'string') {
                                    before = {classes: before};
                                }
                                if (before.enabled === false) {
                                    classes.push('disabled');
                                }
                                if (before.classes) {
                                    classes = classes.concat(before.classes.split(/\s+/));
                                }
                                if (before.tooltip) {
                                    tooltip = before.tooltip;
                                }
                            }

                            html += '<span class="' + classes.join(' ') + '"' + (tooltip ? ' title="' + tooltip + '"' : '') + '>' + currVal + '</span>';
                        }

                        view.find('.datepicker-switch').text(startVal + '-' + endVal);
                        view.find('td').html(html);
                    },

                    fill: function(){
                        var d = new Date(this.viewDate),
                            year = d.getUTCFullYear(),
                            month = d.getUTCMonth(),
                            startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,
                            startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,
                            endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,
                            endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,
                            todaytxt = dates[this.o.language].today || dates['en'].today || '',
                            cleartxt = dates[this.o.language].clear || dates['en'].clear || '',
                            titleFormat = dates[this.o.language].titleFormat || dates['en'].titleFormat,
                            todayDate = UTCToday(),
                            titleBtnVisible = (this.o.todayBtn === true || this.o.todayBtn === 'linked') && todayDate >= this.o.startDate && todayDate <= this.o.endDate && !this.weekOfDateIsDisabled(todayDate),
                            tooltip,
                            before;
                        if (isNaN(year) || isNaN(month))
                            return;
                        this.picker.find('.datepicker-days .datepicker-switch')
                            .text(DPGlobal.formatDate(d, titleFormat, this.o.language));
                        this.picker.find('tfoot .today')
                            .text(todaytxt)
                            .css('display', titleBtnVisible ? 'table-cell' : 'none');
                        this.picker.find('tfoot .clear')
                            .text(cleartxt)
                            .css('display', this.o.clearBtn === true ? 'table-cell' : 'none');
                        this.picker.find('thead .datepicker-title')
                            .text(this.o.title)
                            .css('display', typeof this.o.title === 'string' && this.o.title !== '' ? 'table-cell' : 'none');
                        this.updateNavArrows();
                        this.fillMonths();
                        var prevMonth = UTCDate(year, month, 0),
                            day = prevMonth.getUTCDate();
                        prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7)%7);
                        var nextMonth = new Date(prevMonth);
                        if (prevMonth.getUTCFullYear() < 100){
                            nextMonth.setUTCFullYear(prevMonth.getUTCFullYear());
                        }
                        nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
                        nextMonth = nextMonth.valueOf();
                        var html = [];
                        var weekDay, clsName;
                        while (prevMonth.valueOf() < nextMonth){
                            weekDay = prevMonth.getUTCDay();
                            if (weekDay === this.o.weekStart){
                                html.push('<tr>');
                                if (this.o.calendarWeeks){
                                    // ISO 8601: First week contains first thursday.
                                    // ISO also states week starts on Monday, but we can be more abstract here.
                                    var
                                        // Start of current week: based on weekstart/current date
                                        ws = new Date(+prevMonth + (this.o.weekStart - weekDay - 7) % 7 * 864e5),
                                        // Thursday of this week
                                        th = new Date(Number(ws) + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),
                                        // First Thursday of year, year from thursday
                                        yth = new Date(Number(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay()) % 7 * 864e5),
                                        // Calendar week: ms between thursdays, div ms per day, div 7 days
                                        calWeek = (th - yth) / 864e5 / 7 + 1;
                                    html.push('<td class="cw">'+ calWeek +'</td>');
                                }
                            }
                            clsName = this.getClassNames(prevMonth);
                            clsName.push('day');

                            var content = prevMonth.getUTCDate();

                            if (this.o.beforeShowDay !== $.noop){
                                before = this.o.beforeShowDay(this._utc_to_local(prevMonth));
                                if (before === undefined)
                                    before = {};
                                else if (typeof before === 'boolean')
                                    before = {enabled: before};
                                else if (typeof before === 'string')
                                    before = {classes: before};
                                if (before.enabled === false)
                                    clsName.push('disabled');
                                if (before.classes)
                                    clsName = clsName.concat(before.classes.split(/\s+/));
                                if (before.tooltip)
                                    tooltip = before.tooltip;
                                if (before.content)
                                    content = before.content;
                            }

                            //Check if uniqueSort exists (supported by jquery >=1.12 and >=2.2)
                            //Fallback to unique function for older jquery versions
                            if ($.isFunction($.uniqueSort)) {
                                clsName = $.uniqueSort(clsName);
                            } else {
                                clsName = $.unique(clsName);
                            }

                            html.push('<td class="'+clsName.join(' ')+'"' + (tooltip ? ' title="'+tooltip+'"' : '') + ' data-date="' + prevMonth.getTime().toString() + '">' + content + '</td>');
                            tooltip = null;
                            if (weekDay === this.o.weekEnd){
                                html.push('</tr>');
                            }
                            prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
                        }
                        this.picker.find('.datepicker-days tbody').html(html.join(''));

                        var monthsTitle = dates[this.o.language].monthsTitle || dates['en'].monthsTitle || 'Months';
                        var months = this.picker.find('.datepicker-months')
                            .find('.datepicker-switch')
                            .text(this.o.maxViewMode < 2 ? monthsTitle : year)
                            .end()
                            .find('tbody span').removeClass('active');

                        $.each(this.dates, function(i, d){
                            if (d.getUTCFullYear() === year)
                                months.eq(d.getUTCMonth()).addClass('active');
                        });

                        if (year < startYear || year > endYear){
                            months.addClass('disabled');
                        }
                        if (year === startYear){
                            months.slice(0, startMonth).addClass('disabled');
                        }
                        if (year === endYear){
                            months.slice(endMonth+1).addClass('disabled');
                        }

                        if (this.o.beforeShowMonth !== $.noop){
                            var that = this;
                            $.each(months, function(i, month){
                                var moDate = new Date(year, i, 1);
                                var before = that.o.beforeShowMonth(moDate);
                                if (before === undefined)
                                    before = {};
                                else if (typeof before === 'boolean')
                                    before = {enabled: before};
                                else if (typeof before === 'string')
                                    before = {classes: before};
                                if (before.enabled === false && !$(month).hasClass('disabled'))
                                    $(month).addClass('disabled');
                                if (before.classes)
                                    $(month).addClass(before.classes);
                                if (before.tooltip)
                                    $(month).prop('title', before.tooltip);
                            });
                        }

                        // Generating decade/years picker
                        this._fill_yearsView(
                            '.datepicker-years',
                            'year',
                            10,
                            year,
                            startYear,
                            endYear,
                            this.o.beforeShowYear
                        );

                        // Generating century/decades picker
                        this._fill_yearsView(
                            '.datepicker-decades',
                            'decade',
                            100,
                            year,
                            startYear,
                            endYear,
                            this.o.beforeShowDecade
                        );

                        // Generating millennium/centuries picker
                        this._fill_yearsView(
                            '.datepicker-centuries',
                            'century',
                            1000,
                            year,
                            startYear,
                            endYear,
                            this.o.beforeShowCentury
                        );
                    },

                    updateNavArrows: function(){
                        if (!this._allow_update)
                            return;

                        var d = new Date(this.viewDate),
                            year = d.getUTCFullYear(),
                            month = d.getUTCMonth(),
                            startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,
                            startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,
                            endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,
                            endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,
                            prevIsDisabled,
                            nextIsDisabled,
                            factor = 1;
                        switch (this.viewMode){
                            case 4:
                                factor *= 10;
                            /* falls through */
                            case 3:
                                factor *= 10;
                            /* falls through */
                            case 2:
                                factor *= 10;
                            /* falls through */
                            case 1:
                                prevIsDisabled = Math.floor(year / factor) * factor <= startYear;
                                nextIsDisabled = Math.floor(year / factor) * factor + factor > endYear;
                                break;
                            case 0:
                                prevIsDisabled = year <= startYear && month <= startMonth;
                                nextIsDisabled = year >= endYear && month >= endMonth;
                                break;
                        }

                        this.picker.find('.prev').toggleClass('disabled', prevIsDisabled);
                        this.picker.find('.next').toggleClass('disabled', nextIsDisabled);
                    },

                    click: function(e){
                        e.preventDefault();
                        e.stopPropagation();

                        var target, dir, day, year, month;
                        target = $(e.target);

                        // Clicked on the switch
                        if (target.hasClass('datepicker-switch') && this.viewMode !== this.o.maxViewMode){
                            this.setViewMode(this.viewMode + 1);
                        }

                        // Clicked on today button
                        if (target.hasClass('today') && !target.hasClass('day')){
                            this.setViewMode(0);
                            this._setDate(UTCToday(), this.o.todayBtn === 'linked' ? null : 'view');
                        }

                        // Clicked on clear button
                        if (target.hasClass('clear')){
                            this.clearDates();
                        }

                        if (!target.hasClass('disabled')){
                            // Clicked on a month, year, decade, century
                            if (target.hasClass('month')
                                || target.hasClass('year')
                                || target.hasClass('decade')
                                || target.hasClass('century')) {
                                this.viewDate.setUTCDate(1);

                                day = 1;
                                if (this.viewMode === 1){
                                    month = target.parent().find('span').index(target);
                                    year = this.viewDate.getUTCFullYear();
                                    this.viewDate.setUTCMonth(month);
                                } else {
                                    month = 0;
                                    year = Number(target.text());
                                    this.viewDate.setUTCFullYear(year);
                                }

                                this._trigger(DPGlobal.viewModes[this.viewMode - 1].e, this.viewDate);

                                if (this.viewMode === this.o.minViewMode){
                                    this._setDate(UTCDate(year, month, day));
                                } else {
                                    this.setViewMode(this.viewMode - 1);
                                    this.fill();
                                }
                            }
                        }

                        if (this.picker.is(':visible') && this._focused_from){
                            this._focused_from.focus();
                        }
                        delete this._focused_from;
                    },

                    dayCellClick: function(e){
                        var $target = $(e.currentTarget);
                        var timestamp = $target.data('date');
                        var date = new Date(timestamp);

                        if (this.o.updateViewDate) {
                            if (date.getUTCFullYear() !== this.viewDate.getUTCFullYear()) {
                                this._trigger('changeYear', this.viewDate);
                            }

                            if (date.getUTCMonth() !== this.viewDate.getUTCMonth()) {
                                this._trigger('changeMonth', this.viewDate);
                            }
                        }
                        this._setDate(date);
                    },

                    // Clicked on prev or next
                    navArrowsClick: function(e){
                        var $target = $(e.currentTarget);
                        var dir = $target.hasClass('prev') ? -1 : 1;
                        if (this.viewMode !== 0){
                            dir *= DPGlobal.viewModes[this.viewMode].navStep * 12;
                        }
                        this.viewDate = this.moveMonth(this.viewDate, dir);
                        this._trigger(DPGlobal.viewModes[this.viewMode].e, this.viewDate);
                        this.fill();
                    },

                    _toggle_multidate: function(date){
                        var ix = this.dates.contains(date);
                        if (!date){
                            this.dates.clear();
                        }

                        if (ix !== -1){
                            if (this.o.multidate === true || this.o.multidate > 1 || this.o.toggleActive){
                                this.dates.remove(ix);
                            }
                        } else if (this.o.multidate === false) {
                            this.dates.clear();
                            this.dates.push(date);
                        }
                        else {
                            this.dates.push(date);
                        }

                        if (typeof this.o.multidate === 'number')
                            while (this.dates.length > this.o.multidate)
                                this.dates.remove(0);
                    },

                    _setDate: function(date, which){
                        if (!which || which === 'date')
                            this._toggle_multidate(date && new Date(date));
                        if ((!which && this.o.updateViewDate) || which === 'view')
                            this.viewDate = date && new Date(date);

                        this.fill();
                        this.setValue();
                        if (!which || which !== 'view') {
                            this._trigger('changeDate');
                        }
                        this.inputField.trigger('change');
                        if (this.o.autoclose && (!which || which === 'date')){
                            this.hide();
                        }
                    },

                    moveDay: function(date, dir){
                        var newDate = new Date(date);
                        newDate.setUTCDate(date.getUTCDate() + dir);

                        return newDate;
                    },

                    moveWeek: function(date, dir){
                        return this.moveDay(date, dir * 7);
                    },

                    moveMonth: function(date, dir){
                        if (!isValidDate(date))
                            return this.o.defaultViewDate;
                        if (!dir)
                            return date;
                        var new_date = new Date(date.valueOf()),
                            day = new_date.getUTCDate(),
                            month = new_date.getUTCMonth(),
                            mag = Math.abs(dir),
                            new_month, test;
                        dir = dir > 0 ? 1 : -1;
                        if (mag === 1){
                            test = dir === -1
                                // If going back one month, make sure month is not current month
                                // (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
                                ? function(){
                                    return new_date.getUTCMonth() === month;
                                }
                                // If going forward one month, make sure month is as expected
                                // (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
                                : function(){
                                    return new_date.getUTCMonth() !== new_month;
                                };
                            new_month = month + dir;
                            new_date.setUTCMonth(new_month);
                            // Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
                            new_month = (new_month + 12) % 12;
                        }
                        else {
                            // For magnitudes >1, move one month at a time...
                            for (var i=0; i < mag; i++)
                                // ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
                                new_date = this.moveMonth(new_date, dir);
                            // ...then reset the day, keeping it in the new month
                            new_month = new_date.getUTCMonth();
                            new_date.setUTCDate(day);
                            test = function(){
                                return new_month !== new_date.getUTCMonth();
                            };
                        }
                        // Common date-resetting loop -- if date is beyond end of month, make it
                        // end of month
                        while (test()){
                            new_date.setUTCDate(--day);
                            new_date.setUTCMonth(new_month);
                        }
                        return new_date;
                    },

                    moveYear: function(date, dir){
                        return this.moveMonth(date, dir*12);
                    },

                    moveAvailableDate: function(date, dir, fn){
                        do {
                            date = this[fn](date, dir);

                            if (!this.dateWithinRange(date))
                                return false;

                            fn = 'moveDay';
                        }
                        while (this.dateIsDisabled(date));

                        return date;
                    },

                    weekOfDateIsDisabled: function(date){
                        return $.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1;
                    },

                    dateIsDisabled: function(date){
                        return (
                            this.weekOfDateIsDisabled(date) ||
                            $.grep(this.o.datesDisabled, function(d){
                                return isUTCEquals(date, d);
                            }).length > 0
                        );
                    },

                    dateWithinRange: function(date){
                        return date >= this.o.startDate && date <= this.o.endDate;
                    },

                    keydown: function(e){
                        if (!this.picker.is(':visible')){
                            if (e.keyCode === 40 || e.keyCode === 27) { // allow down to re-show picker
                                this.show();
                                e.stopPropagation();
                            }
                            return;
                        }
                        var dateChanged = false,
                            dir, newViewDate,
                            focusDate = this.focusDate || this.viewDate;
                        switch (e.keyCode){
                            case 27: // escape
                                if (this.focusDate){
                                    this.focusDate = null;
                                    this.viewDate = this.dates.get(-1) || this.viewDate;
                                    this.fill();
                                }
                                else
                                    this.hide();
                                e.preventDefault();
                                e.stopPropagation();
                                break;
                            case 37: // left
                            case 38: // up
                            case 39: // right
                            case 40: // down
                                if (!this.o.keyboardNavigation || this.o.daysOfWeekDisabled.length === 7)
                                    break;
                                dir = e.keyCode === 37 || e.keyCode === 38 ? -1 : 1;
                                if (this.viewMode === 0) {
                                    if (e.ctrlKey){
                                        newViewDate = this.moveAvailableDate(focusDate, dir, 'moveYear');

                                        if (newViewDate)
                                            this._trigger('changeYear', this.viewDate);
                                    } else if (e.shiftKey){
                                        newViewDate = this.moveAvailableDate(focusDate, dir, 'moveMonth');

                                        if (newViewDate)
                                            this._trigger('changeMonth', this.viewDate);
                                    } else if (e.keyCode === 37 || e.keyCode === 39){
                                        newViewDate = this.moveAvailableDate(focusDate, dir, 'moveDay');
                                    } else if (!this.weekOfDateIsDisabled(focusDate)){
                                        newViewDate = this.moveAvailableDate(focusDate, dir, 'moveWeek');
                                    }
                                } else if (this.viewMode === 1) {
                                    if (e.keyCode === 38 || e.keyCode === 40) {
                                        dir = dir * 4;
                                    }
                                    newViewDate = this.moveAvailableDate(focusDate, dir, 'moveMonth');
                                } else if (this.viewMode === 2) {
                                    if (e.keyCode === 38 || e.keyCode === 40) {
                                        dir = dir * 4;
                                    }
                                    newViewDate = this.moveAvailableDate(focusDate, dir, 'moveYear');
                                }
                                if (newViewDate){
                                    this.focusDate = this.viewDate = newViewDate;
                                    this.setValue();
                                    this.fill();
                                    e.preventDefault();
                                }
                                break;
                            case 13: // enter
                                if (!this.o.forceParse)
                                    break;
                                focusDate = this.focusDate || this.dates.get(-1) || this.viewDate;
                                if (this.o.keyboardNavigation) {
                                    this._toggle_multidate(focusDate);
                                    dateChanged = true;
                                }
                                this.focusDate = null;
                                this.viewDate = this.dates.get(-1) || this.viewDate;
                                this.setValue();
                                this.fill();
                                if (this.picker.is(':visible')){
                                    e.preventDefault();
                                    e.stopPropagation();
                                    if (this.o.autoclose)
                                        this.hide();
                                }
                                break;
                            case 9: // tab
                                this.focusDate = null;
                                this.viewDate = this.dates.get(-1) || this.viewDate;
                                this.fill();
                                this.hide();
                                break;
                        }
                        if (dateChanged){
                            if (this.dates.length)
                                this._trigger('changeDate');
                            else
                                this._trigger('clearDate');
                            this.inputField.trigger('change');
                        }
                    },

                    setViewMode: function(viewMode){
                        this.viewMode = viewMode;
                        this.picker
                            .children('div')
                            .hide()
                            .filter('.datepicker-' + DPGlobal.viewModes[this.viewMode].clsName)
                            .show();
                        this.updateNavArrows();
                        this._trigger('changeViewMode', new Date(this.viewDate));
                    }
                };

                var DateRangePicker = function(element, options){
                    $.data(element, 'datepicker', this);
                    this.element = $(element);
                    this.inputs = $.map(options.inputs, function(i){
                        return i.jquery ? i[0] : i;
                    });
                    delete options.inputs;

                    this.keepEmptyValues = options.keepEmptyValues;
                    delete options.keepEmptyValues;

                    datepickerPlugin.call($(this.inputs), options)
                        .on('changeDate', $.proxy(this.dateUpdated, this));

                    this.pickers = $.map(this.inputs, function(i){
                        return $.data(i, 'datepicker');
                    });
                    this.updateDates();
                };
                DateRangePicker.prototype = {
                    updateDates: function(){
                        this.dates = $.map(this.pickers, function(i){
                            return i.getUTCDate();
                        });
                        this.updateRanges();
                    },
                    updateRanges: function(){
                        var range = $.map(this.dates, function(d){
                            return d.valueOf();
                        });
                        $.each(this.pickers, function(i, p){
                            p.setRange(range);
                        });
                    },
                    clearDates: function(){
                        $.each(this.pickers, function(i, p){
                            p.clearDates();
                        });
                    },
                    dateUpdated: function(e){
                        // `this.updating` is a workaround for preventing infinite recursion
                        // between `changeDate` triggering and `setUTCDate` calling.  Until
                        // there is a better mechanism.
                        if (this.updating)
                            return;
                        this.updating = true;

                        var dp = $.data(e.target, 'datepicker');

                        if (dp === undefined) {
                            return;
                        }

                        var new_date = dp.getUTCDate(),
                            keep_empty_values = this.keepEmptyValues,
                            i = $.inArray(e.target, this.inputs),
                            j = i - 1,
                            k = i + 1,
                            l = this.inputs.length;
                        if (i === -1)
                            return;

                        $.each(this.pickers, function(i, p){
                            if (!p.getUTCDate() && (p === dp || !keep_empty_values))
                                p.setUTCDate(new_date);
                        });

                        if (new_date < this.dates[j]){
                            // Date being moved earlier/left
                            while (j >= 0 && new_date < this.dates[j]){
                                this.pickers[j--].setUTCDate(new_date);
                            }
                        } else if (new_date > this.dates[k]){
                            // Date being moved later/right
                            while (k < l && new_date > this.dates[k]){
                                this.pickers[k++].setUTCDate(new_date);
                            }
                        }
                        this.updateDates();

                        delete this.updating;
                    },
                    destroy: function(){
                        $.map(this.pickers, function(p){ p.destroy(); });
                        $(this.inputs).off('changeDate', this.dateUpdated);
                        delete this.element.data().datepicker;
                    },
                    remove: alias('destroy', 'Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead')
                };

                function opts_from_el(el, prefix){
                    // Derive options from element data-attrs
                    var data = $(el).data(),
                        out = {}, inkey,
                        replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])');
                    prefix = new RegExp('^' + prefix.toLowerCase());
                    function re_lower(_,a){
                        return a.toLowerCase();
                    }
                    for (var key in data)
                        if (prefix.test(key)){
                            inkey = key.replace(replace, re_lower);
                            out[inkey] = data[key];
                        }
                    return out;
                }

                function opts_from_locale(lang){
                    // Derive options from locale plugins
                    var out = {};
                    // Check if "de-DE" style date is available, if not language should
                    // fallback to 2 letter code eg "de"
                    if (!dates[lang]){
                        lang = lang.split('-')[0];
                        if (!dates[lang])
                            return;
                    }
                    var d = dates[lang];
                    $.each(locale_opts, function(i,k){
                        if (k in d)
                            out[k] = d[k];
                    });
                    return out;
                }

                var old = $.fn.datepicker;
                var datepickerPlugin = function(option){
                    var args = Array.apply(null, arguments);
                    args.shift();
                    var internal_return;
                    this.each(function(){
                        var $this = $(this),
                            data = $this.data('datepicker'),
                            options = typeof option === 'object' && option;
                        if (!data){
                            var elopts = opts_from_el(this, 'date'),
                                // Preliminary otions
                                xopts = $.extend({}, defaults, elopts, options),
                                locopts = opts_from_locale(xopts.language),
                                // Options priority: js args, data-attrs, locales, defaults
                                opts = $.extend({}, defaults, locopts, elopts, options);
                            if ($this.hasClass('input-daterange') || opts.inputs){
                                $.extend(opts, {
                                    inputs: opts.inputs || $this.find('input').toArray()
                                });
                                data = new DateRangePicker(this, opts);
                            }
                            else {
                                data = new Datepicker(this, opts);
                            }
                            $this.data('datepicker', data);
                        }
                        if (typeof option === 'string' && typeof data[option] === 'function'){
                            internal_return = data[option].apply(data, args);
                        }
                    });

                    if (
                        internal_return === undefined ||
                        internal_return instanceof Datepicker ||
                        internal_return instanceof DateRangePicker
                    )
                        return this;

                    if (this.length > 1)
                        throw new Error('Using only allowed for the collection of a single element (' + option + ' function)');
                    else
                        return internal_return;
                };
                $.fn.datepicker = datepickerPlugin;

                var defaults = $.fn.datepicker.defaults = {
                    assumeNearbyYear: false,
                    autoclose: false,
                    beforeShowDay: $.noop,
                    beforeShowMonth: $.noop,
                    beforeShowYear: $.noop,
                    beforeShowDecade: $.noop,
                    beforeShowCentury: $.noop,
                    calendarWeeks: false,
                    clearBtn: false,
                    toggleActive: false,
                    daysOfWeekDisabled: [],
                    daysOfWeekHighlighted: [],
                    datesDisabled: [],
                    endDate: Infinity,
                    forceParse: true,
                    format: 'mm/dd/yyyy',
                    keepEmptyValues: false,
                    keyboardNavigation: true,
                    language: 'en',
                    minViewMode: 0,
                    maxViewMode: 4,
                    multidate: false,
                    multidateSeparator: ',',
                    orientation: "auto",
                    rtl: false,
                    startDate: -Infinity,
                    startView: 0,
                    todayBtn: false,
                    todayHighlight: false,
                    updateViewDate: true,
                    weekStart: 0,
                    disableTouchKeyboard: false,
                    enableOnReadonly: true,
                    showOnFocus: true,
                    zIndexOffset: 10,
                    container: 'body',
                    immediateUpdates: false,
                    title: '',
                    templates: {
                        leftArrow: '&#x00AB;',
                        rightArrow: '&#x00BB;'
                    },
                    showWeekDays: true
                };
                var locale_opts = $.fn.datepicker.locale_opts = [
                    'format',
                    'rtl',
                    'weekStart'
                ];
                $.fn.datepicker.Constructor = Datepicker;
                var dates = $.fn.datepicker.dates = {
                    en: {
                        days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                        daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                        daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
                        months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                        monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                        today: "Today",
                        clear: "Clear",
                        titleFormat: "MM yyyy"
                    },
                    uk: {
                        days: ["Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "П'ятниця", "Субота"],
                        daysShort: ["Нед", "Пнд", "Втр", "Срд", "Чтв", "Птн", "Суб"],
                        daysMin: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                        months: ["Cічень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"],
                        monthsShort: ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"],
                        today: "Сьогодні",
                        clear: "Очистити"
                    }
                };

                var DPGlobal = {
                    viewModes: [
                        {
                            names: ['days', 'month'],
                            clsName: 'days',
                            e: 'changeMonth'
                        },
                        {
                            names: ['months', 'year'],
                            clsName: 'months',
                            e: 'changeYear',
                            navStep: 1
                        },
                        {
                            names: ['years', 'decade'],
                            clsName: 'years',
                            e: 'changeDecade',
                            navStep: 10
                        },
                        {
                            names: ['decades', 'century'],
                            clsName: 'decades',
                            e: 'changeCentury',
                            navStep: 100
                        },
                        {
                            names: ['centuries', 'millennium'],
                            clsName: 'centuries',
                            e: 'changeMillennium',
                            navStep: 1000
                        }
                    ],
                    validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
                    nonpunctuation: /[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g,
                    parseFormat: function(format){
                        if (typeof format.toValue === 'function' && typeof format.toDisplay === 'function')
                            return format;
                        // IE treats \0 as a string end in inputs (truncating the value),
                        // so it's a bad format delimiter, anyway
                        var separators = format.replace(this.validParts, '\0').split('\0'),
                            parts = format.match(this.validParts);
                        if (!separators || !separators.length || !parts || parts.length === 0){
                            throw new Error("Invalid date format.");
                        }
                        return {separators: separators, parts: parts};
                    },
                    parseDate: function(date, format, language, assumeNearby){
                        if (!date)
                            return undefined;
                        if (date instanceof Date)
                            return date;
                        if (typeof format === 'string')
                            format = DPGlobal.parseFormat(format);
                        if (format.toValue)
                            return format.toValue(date, format, language);
                        var fn_map = {
                                d: 'moveDay',
                                m: 'moveMonth',
                                w: 'moveWeek',
                                y: 'moveYear'
                            },
                            dateAliases = {
                                yesterday: '-1d',
                                today: '+0d',
                                tomorrow: '+1d'
                            },
                            parts, part, dir, i, fn;
                        if (date in dateAliases){
                            date = dateAliases[date];
                        }
                        if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/i.test(date)){
                            parts = date.match(/([\-+]\d+)([dmwy])/gi);
                            date = new Date();
                            for (i=0; i < parts.length; i++){
                                part = parts[i].match(/([\-+]\d+)([dmwy])/i);
                                dir = Number(part[1]);
                                fn = fn_map[part[2].toLowerCase()];
                                date = Datepicker.prototype[fn](date, dir);
                            }
                            return Datepicker.prototype._zero_utc_time(date);
                        }

                        parts = date && date.match(this.nonpunctuation) || [];

                        function applyNearbyYear(year, threshold){
                            if (threshold === true)
                                threshold = 10;

                            // if year is 2 digits or less, than the user most likely is trying to get a recent century
                            if (year < 100){
                                year += 2000;
                                // if the new year is more than threshold years in advance, use last century
                                if (year > ((new Date()).getFullYear()+threshold)){
                                    year -= 100;
                                }
                            }

                            return year;
                        }

                        var parsed = {},
                            setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],
                            setters_map = {
                                yyyy: function(d,v){
                                    return d.setUTCFullYear(assumeNearby ? applyNearbyYear(v, assumeNearby) : v);
                                },
                                m: function(d,v){
                                    if (isNaN(d))
                                        return d;
                                    v -= 1;
                                    while (v < 0) v += 12;
                                    v %= 12;
                                    d.setUTCMonth(v);
                                    while (d.getUTCMonth() !== v)
                                        d.setUTCDate(d.getUTCDate()-1);
                                    return d;
                                },
                                d: function(d,v){
                                    return d.setUTCDate(v);
                                }
                            },
                            val, filtered;
                        setters_map['yy'] = setters_map['yyyy'];
                        setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
                        setters_map['dd'] = setters_map['d'];
                        date = UTCToday();
                        var fparts = format.parts.slice();
                        // Remove noop parts
                        if (parts.length !== fparts.length){
                            fparts = $(fparts).filter(function(i,p){
                                return $.inArray(p, setters_order) !== -1;
                            }).toArray();
                        }
                        // Process remainder
                        function match_part(){
                            var m = this.slice(0, parts[i].length),
                                p = parts[i].slice(0, m.length);
                            return m.toLowerCase() === p.toLowerCase();
                        }
                        if (parts.length === fparts.length){
                            var cnt;
                            for (i=0, cnt = fparts.length; i < cnt; i++){
                                val = parseInt(parts[i], 10);
                                part = fparts[i];
                                if (isNaN(val)){
                                    switch (part){
                                        case 'MM':
                                            filtered = $(dates[language].months).filter(match_part);
                                            val = $.inArray(filtered[0], dates[language].months) + 1;
                                            break;
                                        case 'M':
                                            filtered = $(dates[language].monthsShort).filter(match_part);
                                            val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
                                            break;
                                    }
                                }
                                parsed[part] = val;
                            }
                            var _date, s;
                            for (i=0; i < setters_order.length; i++){
                                s = setters_order[i];
                                if (s in parsed && !isNaN(parsed[s])){
                                    _date = new Date(date);
                                    setters_map[s](_date, parsed[s]);
                                    if (!isNaN(_date))
                                        date = _date;
                                }
                            }
                        }
                        return date;
                    },
                    formatDate: function(date, format, language){
                        if (!date)
                            return '';
                        if (typeof format === 'string')
                            format = DPGlobal.parseFormat(format);
                        if (format.toDisplay)
                            return format.toDisplay(date, format, language);
                        var val = {
                            d: date.getUTCDate(),
                            D: dates[language].daysShort[date.getUTCDay()],
                            DD: dates[language].days[date.getUTCDay()],
                            m: date.getUTCMonth() + 1,
                            M: dates[language].monthsShort[date.getUTCMonth()],
                            MM: dates[language].months[date.getUTCMonth()],
                            yy: date.getUTCFullYear().toString().substring(2),
                            yyyy: date.getUTCFullYear()
                        };
                        val.dd = (val.d < 10 ? '0' : '') + val.d;
                        val.mm = (val.m < 10 ? '0' : '') + val.m;
                        date = [];
                        var seps = $.extend([], format.separators);
                        for (var i=0, cnt = format.parts.length; i <= cnt; i++){
                            if (seps.length)
                                date.push(seps.shift());
                            date.push(val[format.parts[i]]);
                        }
                        return date.join('');
                    },
                    headTemplate: '<thead>'+
                        '<tr>'+
                        '<th colspan="7" class="datepicker-title"></th>'+
                        '</tr>'+
                        '<tr>'+
                        '<th class="prev">'+defaults.templates.leftArrow+'</th>'+
                        '<th colspan="5" class="datepicker-switch"></th>'+
                        '<th class="next">'+defaults.templates.rightArrow+'</th>'+
                        '</tr>'+
                        '</thead>',
                    contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
                    footTemplate: '<tfoot>'+
                        '<tr>'+
                        '<th colspan="7" class="today"></th>'+
                        '</tr>'+
                        '<tr>'+
                        '<th colspan="7" class="clear"></th>'+
                        '</tr>'+
                        '</tfoot>'
                };
                DPGlobal.template = '<div class="datepicker">'+
                    '<div class="datepicker-days">'+
                    '<table class="table-condensed">'+
                    DPGlobal.headTemplate+
                    '<tbody></tbody>'+
                    DPGlobal.footTemplate+
                    '</table>'+
                    '</div>'+
                    '<div class="datepicker-months">'+
                    '<table class="table-condensed">'+
                    DPGlobal.headTemplate+
                    DPGlobal.contTemplate+
                    DPGlobal.footTemplate+
                    '</table>'+
                    '</div>'+
                    '<div class="datepicker-years">'+
                    '<table class="table-condensed">'+
                    DPGlobal.headTemplate+
                    DPGlobal.contTemplate+
                    DPGlobal.footTemplate+
                    '</table>'+
                    '</div>'+
                    '<div class="datepicker-decades">'+
                    '<table class="table-condensed">'+
                    DPGlobal.headTemplate+
                    DPGlobal.contTemplate+
                    DPGlobal.footTemplate+
                    '</table>'+
                    '</div>'+
                    '<div class="datepicker-centuries">'+
                    '<table class="table-condensed">'+
                    DPGlobal.headTemplate+
                    DPGlobal.contTemplate+
                    DPGlobal.footTemplate+
                    '</table>'+
                    '</div>'+
                    '</div>';

                $.fn.datepicker.DPGlobal = DPGlobal;


                /* DATEPICKER NO CONFLICT
	* =================== */

                $.fn.datepicker.noConflict = function(){
                    $.fn.datepicker = old;
                    return this;
                };

                /* DATEPICKER VERSION
	 * =================== */
                $.fn.datepicker.version = '1.9.0';

                $.fn.datepicker.deprecated = function(msg){
                    var console = window.console;
                    if (console && console.warn) {
                        console.warn('DEPRECATED: ' + msg);
                    }
                };


                /* DATEPICKER DATA-API
	* ================== */

                $(document).on(
                    'focus.datepicker.data-api click.datepicker.data-api',
                    '[data-provide="datepicker"]',
                    function(e){
                        var $this = $(this);
                        if ($this.data('datepicker'))
                            return;
                        e.preventDefault();
                        // component click requires us to explicitly show it
                        datepickerPlugin.call($this, 'show');
                    }
                );
                $(function(){
                    datepickerPlugin.call($('[data-provide="datepicker-inline"]'));
                });

            }));


            /***/ }),

        /***/ "./node_modules/bootstrap-select/dist/js/bootstrap-select.js":
        /*!*******************************************************************!*\
  !*** ./node_modules/bootstrap-select/dist/js/bootstrap-select.js ***!
  \*******************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * Bootstrap-select v1.13.10 (https://developer.snapappointments.com/bootstrap-select)
 *
 * Copyright 2012-2019 SnapAppointments, LLC
 * Licensed under MIT (https://github.com/snapappointments/bootstrap-select/blob/master/LICENSE)
 */

            (function (root, factory) {
                if (root === undefined && window !== undefined) root = window;
                if (true) {
                    // AMD. Register as an anonymous module unless amdModuleId is set
                    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (a0) {
                        return (factory(a0));
                    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                } else {}
            }(this, function (jQuery) {

                (function ($) {
                    'use strict';

                    var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];

                    var uriAttrs = [
                        'background',
                        'cite',
                        'href',
                        'itemtype',
                        'longdesc',
                        'poster',
                        'src',
                        'xlink:href'
                    ];

                    var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;

                    var DefaultWhitelist = {
                        // Global attributes allowed on any supplied element below.
                        '*': ['class', 'dir', 'id', 'lang', 'role', 'tabindex', 'style', ARIA_ATTRIBUTE_PATTERN],
                        a: ['target', 'href', 'title', 'rel'],
                        area: [],
                        b: [],
                        br: [],
                        col: [],
                        code: [],
                        div: [],
                        em: [],
                        hr: [],
                        h1: [],
                        h2: [],
                        h3: [],
                        h4: [],
                        h5: [],
                        h6: [],
                        i: [],
                        img: ['src', 'alt', 'title', 'width', 'height'],
                        li: [],
                        ol: [],
                        p: [],
                        pre: [],
                        s: [],
                        small: [],
                        span: [],
                        sub: [],
                        sup: [],
                        strong: [],
                        u: [],
                        ul: []
                    }

                    /**
                     * A pattern that recognizes a commonly useful subset of URLs that are safe.
                     *
                     * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
                     */
                    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;

                    /**
                     * A pattern that matches safe data URLs. Only matches image, video and audio types.
                     *
                     * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
                     */
                    var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;

                    function allowedAttribute (attr, allowedAttributeList) {
                        var attrName = attr.nodeName.toLowerCase()

                        if ($.inArray(attrName, allowedAttributeList) !== -1) {
                            if ($.inArray(attrName, uriAttrs) !== -1) {
                                return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN))
                            }

                            return true
                        }

                        var regExp = $(allowedAttributeList).filter(function (index, value) {
                            return value instanceof RegExp
                        })

                        // Check if a regular expression validates the attribute.
                        for (var i = 0, l = regExp.length; i < l; i++) {
                            if (attrName.match(regExp[i])) {
                                return true
                            }
                        }

                        return false
                    }

                    function sanitizeHtml (unsafeElements, whiteList, sanitizeFn) {
                        if (sanitizeFn && typeof sanitizeFn === 'function') {
                            return sanitizeFn(unsafeElements);
                        }

                        var whitelistKeys = Object.keys(whiteList);

                        for (var i = 0, len = unsafeElements.length; i < len; i++) {
                            var elements = unsafeElements[i].querySelectorAll('*');

                            for (var j = 0, len2 = elements.length; j < len2; j++) {
                                var el = elements[j];
                                var elName = el.nodeName.toLowerCase();

                                if (whitelistKeys.indexOf(elName) === -1) {
                                    el.parentNode.removeChild(el);

                                    continue;
                                }

                                var attributeList = [].slice.call(el.attributes);
                                var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);

                                for (var k = 0, len3 = attributeList.length; k < len3; k++) {
                                    var attr = attributeList[k];

                                    if (!allowedAttribute(attr, whitelistedAttributes)) {
                                        el.removeAttribute(attr.nodeName);
                                    }
                                }
                            }
                        }
                    }

                    // Polyfill for browsers with no classList support
                    // Remove in v2
                    if (!('classList' in document.createElement('_'))) {
                        (function (view) {
                            if (!('Element' in view)) return;

                            var classListProp = 'classList',
                                protoProp = 'prototype',
                                elemCtrProto = view.Element[protoProp],
                                objCtr = Object,
                                classListGetter = function () {
                                    var $elem = $(this);

                                    return {
                                        add: function (classes) {
                                            classes = Array.prototype.slice.call(arguments).join(' ');
                                            return $elem.addClass(classes);
                                        },
                                        remove: function (classes) {
                                            classes = Array.prototype.slice.call(arguments).join(' ');
                                            return $elem.removeClass(classes);
                                        },
                                        toggle: function (classes, force) {
                                            return $elem.toggleClass(classes, force);
                                        },
                                        contains: function (classes) {
                                            return $elem.hasClass(classes);
                                        }
                                    }
                                };

                            if (objCtr.defineProperty) {
                                var classListPropDesc = {
                                    get: classListGetter,
                                    enumerable: true,
                                    configurable: true
                                };
                                try {
                                    objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
                                } catch (ex) { // IE 8 doesn't support enumerable:true
                                    // adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36
                                    // modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected
                                    if (ex.number === undefined || ex.number === -0x7FF5EC54) {
                                        classListPropDesc.enumerable = false;
                                        objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
                                    }
                                }
                            } else if (objCtr[protoProp].__defineGetter__) {
                                elemCtrProto.__defineGetter__(classListProp, classListGetter);
                            }
                        }(window));
                    }

                    var testElement = document.createElement('_');

                    testElement.classList.add('c1', 'c2');

                    if (!testElement.classList.contains('c2')) {
                        var _add = DOMTokenList.prototype.add,
                            _remove = DOMTokenList.prototype.remove;

                        DOMTokenList.prototype.add = function () {
                            Array.prototype.forEach.call(arguments, _add.bind(this));
                        }

                        DOMTokenList.prototype.remove = function () {
                            Array.prototype.forEach.call(arguments, _remove.bind(this));
                        }
                    }

                    testElement.classList.toggle('c3', false);

                    // Polyfill for IE 10 and Firefox <24, where classList.toggle does not
                    // support the second argument.
                    if (testElement.classList.contains('c3')) {
                        var _toggle = DOMTokenList.prototype.toggle;

                        DOMTokenList.prototype.toggle = function (token, force) {
                            if (1 in arguments && !this.contains(token) === !force) {
                                return force;
                            } else {
                                return _toggle.call(this, token);
                            }
                        };
                    }

                    testElement = null;

                    // shallow array comparison
                    function isEqual (array1, array2) {
                        return array1.length === array2.length && array1.every(function (element, index) {
                            return element === array2[index];
                        });
                    };

                    // <editor-fold desc="Shims">
                    if (!String.prototype.startsWith) {
                        (function () {
                            'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
                            var defineProperty = (function () {
                                // IE 8 only supports `Object.defineProperty` on DOM elements
                                try {
                                    var object = {};
                                    var $defineProperty = Object.defineProperty;
                                    var result = $defineProperty(object, object, object) && $defineProperty;
                                } catch (error) {
                                }
                                return result;
                            }());
                            var toString = {}.toString;
                            var startsWith = function (search) {
                                if (this == null) {
                                    throw new TypeError();
                                }
                                var string = String(this);
                                if (search && toString.call(search) == '[object RegExp]') {
                                    throw new TypeError();
                                }
                                var stringLength = string.length;
                                var searchString = String(search);
                                var searchLength = searchString.length;
                                var position = arguments.length > 1 ? arguments[1] : undefined;
                                // `ToInteger`
                                var pos = position ? Number(position) : 0;
                                if (pos != pos) { // better `isNaN`
                                    pos = 0;
                                }
                                var start = Math.min(Math.max(pos, 0), stringLength);
                                // Avoid the `indexOf` call if no match is possible
                                if (searchLength + start > stringLength) {
                                    return false;
                                }
                                var index = -1;
                                while (++index < searchLength) {
                                    if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {
                                        return false;
                                    }
                                }
                                return true;
                            };
                            if (defineProperty) {
                                defineProperty(String.prototype, 'startsWith', {
                                    'value': startsWith,
                                    'configurable': true,
                                    'writable': true
                                });
                            } else {
                                String.prototype.startsWith = startsWith;
                            }
                        }());
                    }

                    if (!Object.keys) {
                        Object.keys = function (
                            o, // object
                            k, // key
                            r  // result array
                        ) {
                            // initialize object and result
                            r = [];
                            // iterate over object keys
                            for (k in o) {
                                // fill result array with non-prototypical keys
                                r.hasOwnProperty.call(o, k) && r.push(k);
                            }
                            // return result
                            return r;
                        };
                    }

                    if (HTMLSelectElement && !HTMLSelectElement.prototype.hasOwnProperty('selectedOptions')) {
                        Object.defineProperty(HTMLSelectElement.prototype, 'selectedOptions', {
                            get: function () {
                                return this.querySelectorAll(':checked');
                            }
                        });
                    }

                    function getSelectedOptions (select, ignoreDisabled) {
                        var selectedOptions = select.selectedOptions,
                            options = [],
                            opt;

                        if (ignoreDisabled) {
                            for (var i = 0, len = selectedOptions.length; i < len; i++) {
                                opt = selectedOptions[i];

                                if (!(opt.disabled || opt.parentNode.tagName === 'OPTGROUP' && opt.parentNode.disabled)) {
                                    options.push(opt);
                                }
                            }

                            return options;
                        }

                        return selectedOptions;
                    }

                    // much faster than $.val()
                    function getSelectValues (select, selectedOptions) {
                        var value = [],
                            options = selectedOptions || select.selectedOptions,
                            opt;

                        for (var i = 0, len = options.length; i < len; i++) {
                            opt = options[i];

                            if (!(opt.disabled || opt.parentNode.tagName === 'OPTGROUP' && opt.parentNode.disabled)) {
                                value.push(opt.value || opt.text);
                            }
                        }

                        if (!select.multiple) {
                            return !value.length ? null : value[0];
                        }

                        return value;
                    }

                    // set data-selected on select element if the value has been programmatically selected
                    // prior to initialization of bootstrap-select
                    // * consider removing or replacing an alternative method *
                    var valHooks = {
                        useDefault: false,
                        _set: $.valHooks.select.set
                    };

                    $.valHooks.select.set = function (elem, value) {
                        if (value && !valHooks.useDefault) $(elem).data('selected', true);

                        return valHooks._set.apply(this, arguments);
                    };

                    var changedArguments = null;

                    var EventIsSupported = (function () {
                        try {
                            new Event('change');
                            return true;
                        } catch (e) {
                            return false;
                        }
                    })();

                    $.fn.triggerNative = function (eventName) {
                        var el = this[0],
                            event;

                        if (el.dispatchEvent) { // for modern browsers & IE9+
                            if (EventIsSupported) {
                                // For modern browsers
                                event = new Event(eventName, {
                                    bubbles: true
                                });
                            } else {
                                // For IE since it doesn't support Event constructor
                                event = document.createEvent('Event');
                                event.initEvent(eventName, true, false);
                            }

                            el.dispatchEvent(event);
                        } else if (el.fireEvent) { // for IE8
                            event = document.createEventObject();
                            event.eventType = eventName;
                            el.fireEvent('on' + eventName, event);
                        } else {
                            // fall back to jQuery.trigger
                            this.trigger(eventName);
                        }
                    };
                    // </editor-fold>

                    function stringSearch (li, searchString, method, normalize) {
                        var stringTypes = [
                                'display',
                                'subtext',
                                'tokens'
                            ],
                            searchSuccess = false;

                        for (var i = 0; i < stringTypes.length; i++) {
                            var stringType = stringTypes[i],
                                string = li[stringType];

                            if (string) {
                                string = string.toString();

                                // Strip HTML tags. This isn't perfect, but it's much faster than any other method
                                if (stringType === 'display') {
                                    string = string.replace(/<[^>]+>/g, '');
                                }

                                if (normalize) string = normalizeToBase(string);
                                string = string.toUpperCase();

                                if (method === 'contains') {
                                    searchSuccess = string.indexOf(searchString) >= 0;
                                } else {
                                    searchSuccess = string.startsWith(searchString);
                                }

                                if (searchSuccess) break;
                            }
                        }

                        return searchSuccess;
                    }

                    function toInteger (value) {
                        return parseInt(value, 10) || 0;
                    }

                    // Borrowed from Lodash (_.deburr)
                    /** Used to map Latin Unicode letters to basic Latin letters. */
                    var deburredLetters = {
                        // Latin-1 Supplement block.
                        '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
                        '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
                        '\xc7': 'C',  '\xe7': 'c',
                        '\xd0': 'D',  '\xf0': 'd',
                        '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
                        '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
                        '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
                        '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
                        '\xd1': 'N',  '\xf1': 'n',
                        '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
                        '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
                        '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
                        '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
                        '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
                        '\xc6': 'Ae', '\xe6': 'ae',
                        '\xde': 'Th', '\xfe': 'th',
                        '\xdf': 'ss',
                        // Latin Extended-A block.
                        '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
                        '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
                        '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
                        '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
                        '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
                        '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
                        '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
                        '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
                        '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
                        '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
                        '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
                        '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
                        '\u0134': 'J',  '\u0135': 'j',
                        '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
                        '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
                        '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
                        '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
                        '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
                        '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
                        '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
                        '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
                        '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
                        '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
                        '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
                        '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
                        '\u0163': 't',  '\u0165': 't', '\u0167': 't',
                        '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
                        '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
                        '\u0174': 'W',  '\u0175': 'w',
                        '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
                        '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
                        '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
                        '\u0132': 'IJ', '\u0133': 'ij',
                        '\u0152': 'Oe', '\u0153': 'oe',
                        '\u0149': "'n", '\u017f': 's'
                    };

                    /** Used to match Latin Unicode letters (excluding mathematical operators). */
                    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

                    /** Used to compose unicode character classes. */
                    var rsComboMarksRange = '\\u0300-\\u036f',
                        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
                        rsComboSymbolsRange = '\\u20d0-\\u20ff',
                        rsComboMarksExtendedRange = '\\u1ab0-\\u1aff',
                        rsComboMarksSupplementRange = '\\u1dc0-\\u1dff',
                        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange + rsComboMarksExtendedRange + rsComboMarksSupplementRange;

                    /** Used to compose unicode capture groups. */
                    var rsCombo = '[' + rsComboRange + ']';

                    /**
                     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
                     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
                     */
                    var reComboMark = RegExp(rsCombo, 'g');

                    function deburrLetter (key) {
                        return deburredLetters[key];
                    };

                    function normalizeToBase (string) {
                        string = string.toString();
                        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
                    }

                    // List of HTML entities for escaping.
                    var escapeMap = {
                        '&': '&amp;',
                        '<': '&lt;',
                        '>': '&gt;',
                        '"': '&quot;',
                        "'": '&#x27;',
                        '`': '&#x60;'
                    };

                    // Functions for escaping and unescaping strings to/from HTML interpolation.
                    var createEscaper = function (map) {
                        var escaper = function (match) {
                            return map[match];
                        };
                        // Regexes for identifying a key that needs to be escaped.
                        var source = '(?:' + Object.keys(map).join('|') + ')';
                        var testRegexp = RegExp(source);
                        var replaceRegexp = RegExp(source, 'g');
                        return function (string) {
                            string = string == null ? '' : '' + string;
                            return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
                        };
                    };

                    var htmlEscape = createEscaper(escapeMap);

                    /**
                     * ------------------------------------------------------------------------
                     * Constants
                     * ------------------------------------------------------------------------
                     */

                    var keyCodeMap = {
                        32: ' ',
                        48: '0',
                        49: '1',
                        50: '2',
                        51: '3',
                        52: '4',
                        53: '5',
                        54: '6',
                        55: '7',
                        56: '8',
                        57: '9',
                        59: ';',
                        65: 'A',
                        66: 'B',
                        67: 'C',
                        68: 'D',
                        69: 'E',
                        70: 'F',
                        71: 'G',
                        72: 'H',
                        73: 'I',
                        74: 'J',
                        75: 'K',
                        76: 'L',
                        77: 'M',
                        78: 'N',
                        79: 'O',
                        80: 'P',
                        81: 'Q',
                        82: 'R',
                        83: 'S',
                        84: 'T',
                        85: 'U',
                        86: 'V',
                        87: 'W',
                        88: 'X',
                        89: 'Y',
                        90: 'Z',
                        96: '0',
                        97: '1',
                        98: '2',
                        99: '3',
                        100: '4',
                        101: '5',
                        102: '6',
                        103: '7',
                        104: '8',
                        105: '9'
                    };

                    var keyCodes = {
                        ESCAPE: 27, // KeyboardEvent.which value for Escape (Esc) key
                        ENTER: 13, // KeyboardEvent.which value for Enter key
                        SPACE: 32, // KeyboardEvent.which value for space key
                        TAB: 9, // KeyboardEvent.which value for tab key
                        ARROW_UP: 38, // KeyboardEvent.which value for up arrow key
                        ARROW_DOWN: 40 // KeyboardEvent.which value for down arrow key
                    }

                    var version = {
                        success: false,
                        major: '3'
                    };

                    try {
                        version.full = ($.fn.dropdown.Constructor.VERSION || '').split(' ')[0].split('.');
                        version.major = version.full[0];
                        version.success = true;
                    } catch (err) {
                        // do nothing
                    }

                    var selectId = 0;

                    var EVENT_KEY = '.bs.select';

                    var classNames = {
                        DISABLED: 'disabled',
                        DIVIDER: 'divider',
                        SHOW: 'open',
                        DROPUP: 'dropup',
                        MENU: 'dropdown-menu',
                        MENURIGHT: 'dropdown-menu-right',
                        MENULEFT: 'dropdown-menu-left',
                        // to-do: replace with more advanced template/customization options
                        BUTTONCLASS: 'btn-default',
                        POPOVERHEADER: 'popover-title',
                        ICONBASE: 'glyphicon',
                        TICKICON: 'glyphicon-ok'
                    }

                    var Selector = {
                        MENU: '.' + classNames.MENU
                    }

                    var elementTemplates = {
                        span: document.createElement('span'),
                        i: document.createElement('i'),
                        subtext: document.createElement('small'),
                        a: document.createElement('a'),
                        li: document.createElement('li'),
                        whitespace: document.createTextNode('\u00A0'),
                        fragment: document.createDocumentFragment()
                    }

                    elementTemplates.a.setAttribute('role', 'option');
                    elementTemplates.subtext.className = 'text-muted';

                    elementTemplates.text = elementTemplates.span.cloneNode(false);
                    elementTemplates.text.className = 'text';

                    elementTemplates.checkMark = elementTemplates.span.cloneNode(false);

                    var REGEXP_ARROW = new RegExp(keyCodes.ARROW_UP + '|' + keyCodes.ARROW_DOWN);
                    var REGEXP_TAB_OR_ESCAPE = new RegExp('^' + keyCodes.TAB + '$|' + keyCodes.ESCAPE);

                    var generateOption = {
                        li: function (content, classes, optgroup) {
                            var li = elementTemplates.li.cloneNode(false);

                            if (content) {
                                if (content.nodeType === 1 || content.nodeType === 11) {
                                    li.appendChild(content);
                                } else {
                                    li.innerHTML = content;
                                }
                            }

                            if (typeof classes !== 'undefined' && classes !== '') li.className = classes;
                            if (typeof optgroup !== 'undefined' && optgroup !== null) li.classList.add('optgroup-' + optgroup);

                            return li;
                        },

                        a: function (text, classes, inline) {
                            var a = elementTemplates.a.cloneNode(true);

                            if (text) {
                                if (text.nodeType === 11) {
                                    a.appendChild(text);
                                } else {
                                    a.insertAdjacentHTML('beforeend', text);
                                }
                            }

                            if (typeof classes !== 'undefined' && classes !== '') a.className = classes;
                            if (version.major === '4') a.classList.add('dropdown-item');
                            if (inline) a.setAttribute('style', inline);

                            return a;
                        },

                        text: function (options, useFragment) {
                            var textElement = elementTemplates.text.cloneNode(false),
                                subtextElement,
                                iconElement;

                            if (options.content) {
                                textElement.innerHTML = options.content;
                            } else {
                                textElement.textContent = options.text;

                                if (options.icon) {
                                    var whitespace = elementTemplates.whitespace.cloneNode(false);

                                    // need to use <i> for icons in the button to prevent a breaking change
                                    // note: switch to span in next major release
                                    iconElement = (useFragment === true ? elementTemplates.i : elementTemplates.span).cloneNode(false);
                                    iconElement.className = options.iconBase + ' ' + options.icon;

                                    elementTemplates.fragment.appendChild(iconElement);
                                    elementTemplates.fragment.appendChild(whitespace);
                                }

                                if (options.subtext) {
                                    subtextElement = elementTemplates.subtext.cloneNode(false);
                                    subtextElement.textContent = options.subtext;
                                    textElement.appendChild(subtextElement);
                                }
                            }

                            if (useFragment === true) {
                                while (textElement.childNodes.length > 0) {
                                    elementTemplates.fragment.appendChild(textElement.childNodes[0]);
                                }
                            } else {
                                elementTemplates.fragment.appendChild(textElement);
                            }

                            return elementTemplates.fragment;
                        },

                        label: function (options) {
                            var textElement = elementTemplates.text.cloneNode(false),
                                subtextElement,
                                iconElement;

                            textElement.innerHTML = options.label;

                            if (options.icon) {
                                var whitespace = elementTemplates.whitespace.cloneNode(false);

                                iconElement = elementTemplates.span.cloneNode(false);
                                iconElement.className = options.iconBase + ' ' + options.icon;

                                elementTemplates.fragment.appendChild(iconElement);
                                elementTemplates.fragment.appendChild(whitespace);
                            }

                            if (options.subtext) {
                                subtextElement = elementTemplates.subtext.cloneNode(false);
                                subtextElement.textContent = options.subtext;
                                textElement.appendChild(subtextElement);
                            }

                            elementTemplates.fragment.appendChild(textElement);

                            return elementTemplates.fragment;
                        }
                    }

                    var Selectpicker = function (element, options) {
                        var that = this;

                        // bootstrap-select has been initialized - revert valHooks.select.set back to its original function
                        if (!valHooks.useDefault) {
                            $.valHooks.select.set = valHooks._set;
                            valHooks.useDefault = true;
                        }

                        this.$element = $(element);
                        this.$newElement = null;
                        this.$button = null;
                        this.$menu = null;
                        this.options = options;
                        this.selectpicker = {
                            main: {},
                            search: {},
                            current: {}, // current changes if a search is in progress
                            view: {},
                            keydown: {
                                keyHistory: '',
                                resetKeyHistory: {
                                    start: function () {
                                        return setTimeout(function () {
                                            that.selectpicker.keydown.keyHistory = '';
                                        }, 800);
                                    }
                                }
                            }
                        };
                        // If we have no title yet, try to pull it from the html title attribute (jQuery doesnt' pick it up as it's not a
                        // data-attribute)
                        if (this.options.title === null) {
                            this.options.title = this.$element.attr('title');
                        }

                        // Format window padding
                        var winPad = this.options.windowPadding;
                        if (typeof winPad === 'number') {
                            this.options.windowPadding = [winPad, winPad, winPad, winPad];
                        }

                        // Expose public methods
                        this.val = Selectpicker.prototype.val;
                        this.render = Selectpicker.prototype.render;
                        this.refresh = Selectpicker.prototype.refresh;
                        this.setStyle = Selectpicker.prototype.setStyle;
                        this.selectAll = Selectpicker.prototype.selectAll;
                        this.deselectAll = Selectpicker.prototype.deselectAll;
                        this.destroy = Selectpicker.prototype.destroy;
                        this.remove = Selectpicker.prototype.remove;
                        this.show = Selectpicker.prototype.show;
                        this.hide = Selectpicker.prototype.hide;

                        this.init();
                    };

                    Selectpicker.VERSION = '1.13.10';

                    // part of this is duplicated in i18n/defaults-en_US.js. Make sure to update both.
                    Selectpicker.DEFAULTS = {
                        noneSelectedText: 'Nothing selected',
                        noneResultsText: 'No results matched {0}',
                        countSelectedText: function (numSelected, numTotal) {
                            return (numSelected == 1) ? '{0} item selected' : '{0} items selected';
                        },
                        maxOptionsText: function (numAll, numGroup) {
                            return [
                                (numAll == 1) ? 'Limit reached ({n} item max)' : 'Limit reached ({n} items max)',
                                (numGroup == 1) ? 'Group limit reached ({n} item max)' : 'Group limit reached ({n} items max)'
                            ];
                        },
                        selectAllText: 'Select All',
                        deselectAllText: 'Deselect All',
                        doneButton: false,
                        doneButtonText: 'Close',
                        multipleSeparator: ', ',
                        styleBase: 'btn',
                        style: classNames.BUTTONCLASS,
                        size: 'auto',
                        title: null,
                        selectedTextFormat: 'values',
                        width: false,
                        container: false,
                        hideDisabled: false,
                        showSubtext: false,
                        showIcon: true,
                        showContent: true,
                        dropupAuto: true,
                        header: false,
                        liveSearch: false,
                        liveSearchPlaceholder: null,
                        liveSearchNormalize: false,
                        liveSearchStyle: 'contains',
                        actionsBox: false,
                        iconBase: classNames.ICONBASE,
                        tickIcon: classNames.TICKICON,
                        showTick: false,
                        template: {
                            caret: '<span class="caret"></span>'
                        },
                        maxOptions: false,
                        mobile: false,
                        selectOnTab: false,
                        dropdownAlignRight: false,
                        windowPadding: 0,
                        virtualScroll: 600,
                        display: false,
                        sanitize: true,
                        sanitizeFn: null,
                        whiteList: DefaultWhitelist
                    };

                    Selectpicker.prototype = {

                        constructor: Selectpicker,

                        init: function () {
                            var that = this,
                                id = this.$element.attr('id');

                            selectId++;
                            this.selectId = 'bs-select-' + selectId;

                            this.$element[0].classList.add('bs-select-hidden');

                            this.multiple = this.$element.prop('multiple');
                            this.autofocus = this.$element.prop('autofocus');

                            if (this.$element[0].classList.contains('show-tick')) {
                                this.options.showTick = true;
                            }

                            this.$newElement = this.createDropdown();
                            this.$element
                                .after(this.$newElement)
                                .prependTo(this.$newElement);

                            this.$button = this.$newElement.children('button');
                            this.$menu = this.$newElement.children(Selector.MENU);
                            this.$menuInner = this.$menu.children('.inner');
                            this.$searchbox = this.$menu.find('input');

                            this.$element[0].classList.remove('bs-select-hidden');

                            if (this.options.dropdownAlignRight === true) this.$menu[0].classList.add(classNames.MENURIGHT);

                            if (typeof id !== 'undefined') {
                                this.$button.attr('data-id', id);
                            }

                            this.checkDisabled();
                            this.clickListener();

                            if (this.options.liveSearch) {
                                this.liveSearchListener();
                                this.focusedParent = this.$searchbox[0];
                            } else {
                                this.focusedParent = this.$menuInner[0];
                            }

                            this.setStyle();
                            this.render();
                            this.setWidth();
                            if (this.options.container) {
                                this.selectPosition();
                            } else {
                                this.$element.on('hide' + EVENT_KEY, function () {
                                    if (that.isVirtual()) {
                                        // empty menu on close
                                        var menuInner = that.$menuInner[0],
                                            emptyMenu = menuInner.firstChild.cloneNode(false);

                                        // replace the existing UL with an empty one - this is faster than $.empty() or innerHTML = ''
                                        menuInner.replaceChild(emptyMenu, menuInner.firstChild);
                                        menuInner.scrollTop = 0;
                                    }
                                });
                            }
                            this.$menu.data('this', this);
                            this.$newElement.data('this', this);
                            if (this.options.mobile) this.mobile();

                            this.$newElement.on({
                                'hide.bs.dropdown': function (e) {
                                    that.$element.trigger('hide' + EVENT_KEY, e);
                                },
                                'hidden.bs.dropdown': function (e) {
                                    that.$element.trigger('hidden' + EVENT_KEY, e);
                                },
                                'show.bs.dropdown': function (e) {
                                    that.$element.trigger('show' + EVENT_KEY, e);
                                },
                                'shown.bs.dropdown': function (e) {
                                    that.$element.trigger('shown' + EVENT_KEY, e);
                                }
                            });

                            if (that.$element[0].hasAttribute('required')) {
                                this.$element.on('invalid' + EVENT_KEY, function () {
                                    that.$button[0].classList.add('bs-invalid');

                                    that.$element
                                        .on('shown' + EVENT_KEY + '.invalid', function () {
                                            that.$element
                                                .val(that.$element.val()) // set the value to hide the validation message in Chrome when menu is opened
                                                .off('shown' + EVENT_KEY + '.invalid');
                                        })
                                        .on('rendered' + EVENT_KEY, function () {
                                            // if select is no longer invalid, remove the bs-invalid class
                                            if (this.validity.valid) that.$button[0].classList.remove('bs-invalid');
                                            that.$element.off('rendered' + EVENT_KEY);
                                        });

                                    that.$button.on('blur' + EVENT_KEY, function () {
                                        that.$element.trigger('focus').trigger('blur');
                                        that.$button.off('blur' + EVENT_KEY);
                                    });
                                });
                            }

                            setTimeout(function () {
                                that.createLi();
                                that.$element.trigger('loaded' + EVENT_KEY);
                            });
                        },

                        createDropdown: function () {
                            // Options
                            // If we are multiple or showTick option is set, then add the show-tick class
                            var showTick = (this.multiple || this.options.showTick) ? ' show-tick' : '',
                                multiselectable = this.multiple ? ' aria-multiselectable="true"' : '',
                                inputGroup = '',
                                autofocus = this.autofocus ? ' autofocus' : '';

                            if (version.major < 4 && this.$element.parent().hasClass('input-group')) {
                                inputGroup = ' input-group-btn';
                            }

                            // Elements
                            var drop,
                                header = '',
                                searchbox = '',
                                actionsbox = '',
                                donebutton = '';

                            if (this.options.header) {
                                header =
                                    '<div class="' + classNames.POPOVERHEADER + '">' +
                                    '<button type="button" class="close" aria-hidden="true">&times;</button>' +
                                    this.options.header +
                                    '</div>';
                            }

                            if (this.options.liveSearch) {
                                searchbox =
                                    '<div class="bs-searchbox">' +
                                    '<input type="text" class="form-control" autocomplete="off"' +
                                    (
                                        this.options.liveSearchPlaceholder === null ? ''
                                            :
                                            ' placeholder="' + htmlEscape(this.options.liveSearchPlaceholder) + '"'
                                    ) +
                                    ' role="combobox" aria-label="Search" aria-controls="' + this.selectId + '" aria-autocomplete="list">' +
                                    '</div>';
                            }

                            if (this.multiple && this.options.actionsBox) {
                                actionsbox =
                                    '<div class="bs-actionsbox">' +
                                    '<div class="btn-group btn-group-sm btn-block">' +
                                    '<button type="button" class="actions-btn bs-select-all btn ' + classNames.BUTTONCLASS + '">' +
                                    this.options.selectAllText +
                                    '</button>' +
                                    '<button type="button" class="actions-btn bs-deselect-all btn ' + classNames.BUTTONCLASS + '">' +
                                    this.options.deselectAllText +
                                    '</button>' +
                                    '</div>' +
                                    '</div>';
                            }

                            if (this.multiple && this.options.doneButton) {
                                donebutton =
                                    '<div class="bs-donebutton">' +
                                    '<div class="btn-group btn-block">' +
                                    '<button type="button" class="btn btn-sm ' + classNames.BUTTONCLASS + '">' +
                                    this.options.doneButtonText +
                                    '</button>' +
                                    '</div>' +
                                    '</div>';
                            }

                            drop =
                                '<div class="dropdown bootstrap-select' + showTick + inputGroup + '">' +
                                '<button type="button" class="' + this.options.styleBase + ' dropdown-toggle" ' + (this.options.display === 'static' ? 'data-display="static"' : '') + 'data-toggle="dropdown"' + autofocus + ' role="combobox" aria-owns="' + this.selectId + '" aria-haspopup="listbox" aria-expanded="false">' +
                                '<div class="filter-option">' +
                                '<div class="filter-option-inner">' +
                                '<div class="filter-option-inner-inner"></div>' +
                                '</div> ' +
                                '</div>' +
                                (
                                    version.major === '4' ? ''
                                        :
                                        '<span class="bs-caret">' +
                                        this.options.template.caret +
                                        '</span>'
                                ) +
                                '</button>' +
                                '<div class="' + classNames.MENU + ' ' + (version.major === '4' ? '' : classNames.SHOW) + '">' +
                                header +
                                searchbox +
                                actionsbox +
                                '<div class="inner ' + classNames.SHOW + '" role="listbox" id="' + this.selectId + '" tabindex="-1" ' + multiselectable + '>' +
                                '<ul class="' + classNames.MENU + ' inner ' + (version.major === '4' ? classNames.SHOW : '') + '" role="presentation">' +
                                '</ul>' +
                                '</div>' +
                                donebutton +
                                '</div>' +
                                '</div>';

                            return $(drop);
                        },

                        setPositionData: function () {
                            this.selectpicker.view.canHighlight = [];
                            this.selectpicker.view.size = 0;

                            for (var i = 0; i < this.selectpicker.current.data.length; i++) {
                                var li = this.selectpicker.current.data[i],
                                    canHighlight = true;

                                if (li.type === 'divider') {
                                    canHighlight = false;
                                    li.height = this.sizeInfo.dividerHeight;
                                } else if (li.type === 'optgroup-label') {
                                    canHighlight = false;
                                    li.height = this.sizeInfo.dropdownHeaderHeight;
                                } else {
                                    li.height = this.sizeInfo.liHeight;
                                }

                                if (li.disabled) canHighlight = false;

                                this.selectpicker.view.canHighlight.push(canHighlight);

                                if (canHighlight) {
                                    this.selectpicker.view.size++;
                                    li.posinset = this.selectpicker.view.size;
                                }

                                li.position = (i === 0 ? 0 : this.selectpicker.current.data[i - 1].position) + li.height;
                            }
                        },

                        isVirtual: function () {
                            return (this.options.virtualScroll !== false) && (this.selectpicker.main.elements.length >= this.options.virtualScroll) || this.options.virtualScroll === true;
                        },

                        createView: function (isSearching, setSize, refresh) {
                            var that = this,
                                scrollTop = 0,
                                active = [],
                                selected,
                                prevActive;

                            this.selectpicker.current = isSearching ? this.selectpicker.search : this.selectpicker.main;

                            this.setPositionData();

                            if (setSize) {
                                if (refresh) {
                                    scrollTop = this.$menuInner[0].scrollTop;
                                } else if (!that.multiple) {
                                    var element = that.$element[0],
                                        selectedIndex = (element.options[element.selectedIndex] || {}).liIndex;

                                    if (typeof selectedIndex === 'number' && that.options.size !== false) {
                                        var selectedData = that.selectpicker.main.data[selectedIndex],
                                            position = selectedData && selectedData.position;

                                        if (position) {
                                            scrollTop = position - ((that.sizeInfo.menuInnerHeight + that.sizeInfo.liHeight) / 2);
                                        }
                                    }
                                }
                            }

                            scroll(scrollTop, true);

                            this.$menuInner.off('scroll.createView').on('scroll.createView', function (e, updateValue) {
                                if (!that.noScroll) scroll(this.scrollTop, updateValue);
                                that.noScroll = false;
                            });

                            function scroll (scrollTop, init) {
                                var size = that.selectpicker.current.elements.length,
                                    chunks = [],
                                    chunkSize,
                                    chunkCount,
                                    firstChunk,
                                    lastChunk,
                                    currentChunk,
                                    prevPositions,
                                    positionIsDifferent,
                                    previousElements,
                                    menuIsDifferent = true,
                                    isVirtual = that.isVirtual();

                                that.selectpicker.view.scrollTop = scrollTop;

                                if (isVirtual === true) {
                                    // if an option that is encountered that is wider than the current menu width, update the menu width accordingly
                                    if (that.sizeInfo.hasScrollBar && that.$menu[0].offsetWidth > that.sizeInfo.totalMenuWidth) {
                                        that.sizeInfo.menuWidth = that.$menu[0].offsetWidth;
                                        that.sizeInfo.totalMenuWidth = that.sizeInfo.menuWidth + that.sizeInfo.scrollBarWidth;
                                        that.$menu.css('min-width', that.sizeInfo.menuWidth);
                                    }
                                }

                                chunkSize = Math.ceil(that.sizeInfo.menuInnerHeight / that.sizeInfo.liHeight * 1.5); // number of options in a chunk
                                chunkCount = Math.round(size / chunkSize) || 1; // number of chunks

                                for (var i = 0; i < chunkCount; i++) {
                                    var endOfChunk = (i + 1) * chunkSize;

                                    if (i === chunkCount - 1) {
                                        endOfChunk = size;
                                    }

                                    chunks[i] = [
                                        (i) * chunkSize + (!i ? 0 : 1),
                                        endOfChunk
                                    ];

                                    if (!size) break;

                                    if (currentChunk === undefined && scrollTop <= that.selectpicker.current.data[endOfChunk - 1].position - that.sizeInfo.menuInnerHeight) {
                                        currentChunk = i;
                                    }
                                }

                                if (currentChunk === undefined) currentChunk = 0;

                                prevPositions = [that.selectpicker.view.position0, that.selectpicker.view.position1];

                                // always display previous, current, and next chunks
                                firstChunk = Math.max(0, currentChunk - 1);
                                lastChunk = Math.min(chunkCount - 1, currentChunk + 1);

                                that.selectpicker.view.position0 = isVirtual === false ? 0 : (Math.max(0, chunks[firstChunk][0]) || 0);
                                that.selectpicker.view.position1 = isVirtual === false ? size : (Math.min(size, chunks[lastChunk][1]) || 0);

                                positionIsDifferent = prevPositions[0] !== that.selectpicker.view.position0 || prevPositions[1] !== that.selectpicker.view.position1;

                                if (that.activeIndex !== undefined) {
                                    prevActive = that.selectpicker.main.elements[that.prevActiveIndex];
                                    active = that.selectpicker.main.elements[that.activeIndex];
                                    selected = that.selectpicker.main.elements[that.selectedIndex];

                                    if (init) {
                                        if (that.activeIndex !== that.selectedIndex) {
                                            that.defocusItem(active);
                                        }
                                        that.activeIndex = undefined;
                                    }

                                    if (that.activeIndex && that.activeIndex !== that.selectedIndex) {
                                        that.defocusItem(selected);
                                    }
                                }

                                if (that.prevActiveIndex !== undefined && that.prevActiveIndex !== that.activeIndex && that.prevActiveIndex !== that.selectedIndex) {
                                    that.defocusItem(prevActive);
                                }

                                if (init || positionIsDifferent) {
                                    previousElements = that.selectpicker.view.visibleElements ? that.selectpicker.view.visibleElements.slice() : [];

                                    if (isVirtual === false) {
                                        that.selectpicker.view.visibleElements = that.selectpicker.current.elements;
                                    } else {
                                        that.selectpicker.view.visibleElements = that.selectpicker.current.elements.slice(that.selectpicker.view.position0, that.selectpicker.view.position1);
                                    }

                                    that.setOptionStatus();

                                    // if searching, check to make sure the list has actually been updated before updating DOM
                                    // this prevents unnecessary repaints
                                    if (isSearching || (isVirtual === false && init)) menuIsDifferent = !isEqual(previousElements, that.selectpicker.view.visibleElements);

                                    // if virtual scroll is disabled and not searching,
                                    // menu should never need to be updated more than once
                                    if ((init || isVirtual === true) && menuIsDifferent) {
                                        var menuInner = that.$menuInner[0],
                                            menuFragment = document.createDocumentFragment(),
                                            emptyMenu = menuInner.firstChild.cloneNode(false),
                                            marginTop,
                                            marginBottom,
                                            elements = that.selectpicker.view.visibleElements,
                                            toSanitize = [];

                                        // replace the existing UL with an empty one - this is faster than $.empty()
                                        menuInner.replaceChild(emptyMenu, menuInner.firstChild);

                                        for (var i = 0, visibleElementsLen = elements.length; i < visibleElementsLen; i++) {
                                            var element = elements[i],
                                                elText,
                                                elementData;

                                            if (that.options.sanitize) {
                                                elText = element.lastChild;

                                                if (elText) {
                                                    elementData = that.selectpicker.current.data[i + that.selectpicker.view.position0];

                                                    if (elementData && elementData.content && !elementData.sanitized) {
                                                        toSanitize.push(elText);
                                                        elementData.sanitized = true;
                                                    }
                                                }
                                            }

                                            menuFragment.appendChild(element);
                                        }

                                        if (that.options.sanitize && toSanitize.length) {
                                            sanitizeHtml(toSanitize, that.options.whiteList, that.options.sanitizeFn);
                                        }

                                        if (isVirtual === true) {
                                            marginTop = (that.selectpicker.view.position0 === 0 ? 0 : that.selectpicker.current.data[that.selectpicker.view.position0 - 1].position);
                                            marginBottom = (that.selectpicker.view.position1 > size - 1 ? 0 : that.selectpicker.current.data[size - 1].position - that.selectpicker.current.data[that.selectpicker.view.position1 - 1].position);

                                            menuInner.firstChild.style.marginTop = marginTop + 'px';
                                            menuInner.firstChild.style.marginBottom = marginBottom + 'px';
                                        } else {
                                            menuInner.firstChild.style.marginTop = 0;
                                            menuInner.firstChild.style.marginBottom = 0;
                                        }

                                        menuInner.firstChild.appendChild(menuFragment);
                                    }
                                }

                                that.prevActiveIndex = that.activeIndex;

                                if (!that.options.liveSearch) {
                                    that.$menuInner.trigger('focus');
                                } else if (isSearching && init) {
                                    var index = 0,
                                        newActive;

                                    if (!that.selectpicker.view.canHighlight[index]) {
                                        index = 1 + that.selectpicker.view.canHighlight.slice(1).indexOf(true);
                                    }

                                    newActive = that.selectpicker.view.visibleElements[index];

                                    that.defocusItem(that.selectpicker.view.currentActive);

                                    that.activeIndex = (that.selectpicker.current.data[index] || {}).index;

                                    that.focusItem(newActive);
                                }
                            }

                            $(window)
                                .off('resize' + EVENT_KEY + '.' + this.selectId + '.createView')
                                .on('resize' + EVENT_KEY + '.' + this.selectId + '.createView', function () {
                                    var isActive = that.$newElement.hasClass(classNames.SHOW);

                                    if (isActive) scroll(that.$menuInner[0].scrollTop);
                                });
                        },

                        focusItem: function (li, liData, noStyle) {
                            if (li) {
                                liData = liData || this.selectpicker.main.data[this.activeIndex];
                                var a = li.firstChild;

                                if (a) {
                                    a.setAttribute('aria-setsize', this.selectpicker.view.size);
                                    a.setAttribute('aria-posinset', liData.posinset);

                                    if (noStyle !== true) {
                                        this.focusedParent.setAttribute('aria-activedescendant', a.id);
                                        li.classList.add('active');
                                        a.classList.add('active');
                                    }
                                }
                            }
                        },

                        defocusItem: function (li) {
                            if (li) {
                                li.classList.remove('active');
                                if (li.firstChild) li.firstChild.classList.remove('active');
                            }
                        },

                        setPlaceholder: function () {
                            var updateIndex = false;

                            if (this.options.title && !this.multiple) {
                                if (!this.selectpicker.view.titleOption) this.selectpicker.view.titleOption = document.createElement('option');

                                // this option doesn't create a new <li> element, but does add a new option at the start,
                                // so startIndex should increase to prevent having to check every option for the bs-title-option class
                                updateIndex = true;

                                var element = this.$element[0],
                                    isSelected = false,
                                    titleNotAppended = !this.selectpicker.view.titleOption.parentNode;

                                if (titleNotAppended) {
                                    // Use native JS to prepend option (faster)
                                    this.selectpicker.view.titleOption.className = 'bs-title-option';
                                    this.selectpicker.view.titleOption.value = '';

                                    // Check if selected or data-selected attribute is already set on an option. If not, select the titleOption option.
                                    // the selected item may have been changed by user or programmatically before the bootstrap select plugin runs,
                                    // if so, the select will have the data-selected attribute
                                    var $opt = $(element.options[element.selectedIndex]);
                                    isSelected = $opt.attr('selected') === undefined && this.$element.data('selected') === undefined;
                                }

                                if (titleNotAppended || this.selectpicker.view.titleOption.index !== 0) {
                                    element.insertBefore(this.selectpicker.view.titleOption, element.firstChild);
                                }

                                // Set selected *after* appending to select,
                                // otherwise the option doesn't get selected in IE
                                // set using selectedIndex, as setting the selected attr to true here doesn't work in IE11
                                if (isSelected) element.selectedIndex = 0;
                            }

                            return updateIndex;
                        },

                        createLi: function () {
                            var that = this,
                                iconBase = this.options.iconBase,
                                optionSelector = ':not([hidden]):not([data-hidden="true"])',
                                mainElements = [],
                                mainData = [],
                                widestOptionLength = 0,
                                optID = 0,
                                startIndex = this.setPlaceholder() ? 1 : 0; // append the titleOption if necessary and skip the first option in the loop

                            if (this.options.hideDisabled) optionSelector += ':not(:disabled)';

                            if ((that.options.showTick || that.multiple) && !elementTemplates.checkMark.parentNode) {
                                elementTemplates.checkMark.className = iconBase + ' ' + that.options.tickIcon + ' check-mark';
                                elementTemplates.a.appendChild(elementTemplates.checkMark);
                            }

                            var selectOptions = this.$element[0].querySelectorAll('select > *' + optionSelector);

                            function addDivider (config) {
                                var previousData = mainData[mainData.length - 1];

                                // ensure optgroup doesn't create back-to-back dividers
                                if (
                                    previousData &&
                                    previousData.type === 'divider' &&
                                    (previousData.optID || config.optID)
                                ) {
                                    return;
                                }

                                config = config || {};
                                config.type = 'divider';

                                mainElements.push(
                                    generateOption.li(
                                        false,
                                        classNames.DIVIDER,
                                        (config.optID ? config.optID + 'div' : undefined)
                                    )
                                );

                                mainData.push(config);
                            }

                            function addOption (option, config) {
                                config = config || {};

                                config.divider = option.getAttribute('data-divider') === 'true';

                                if (config.divider) {
                                    addDivider({
                                        optID: config.optID
                                    });
                                } else {
                                    var liIndex = mainData.length,
                                        cssText = option.style.cssText,
                                        inlineStyle = cssText ? htmlEscape(cssText) : '',
                                        optionClass = (option.className || '') + (config.optgroupClass || '');

                                    if (config.optID) optionClass = 'opt ' + optionClass;

                                    config.text = option.textContent;

                                    config.content = option.getAttribute('data-content');
                                    config.tokens = option.getAttribute('data-tokens');
                                    config.subtext = option.getAttribute('data-subtext');
                                    config.icon = option.getAttribute('data-icon');
                                    config.iconBase = iconBase;

                                    var textElement = generateOption.text(config);
                                    var liElement = generateOption.li(
                                        generateOption.a(
                                            textElement,
                                            optionClass,
                                            inlineStyle
                                        ),
                                        '',
                                        config.optID
                                    );

                                    if (liElement.firstChild) {
                                        liElement.firstChild.id = that.selectId + '-' + liIndex;
                                    }

                                    mainElements.push(liElement);

                                    option.liIndex = liIndex;

                                    config.display = config.content || config.text;
                                    config.type = 'option';
                                    config.index = liIndex;
                                    config.option = option;
                                    config.disabled = config.disabled || option.disabled;

                                    mainData.push(config);

                                    var combinedLength = 0;

                                    // count the number of characters in the option - not perfect, but should work in most cases
                                    if (config.display) combinedLength += config.display.length;
                                    if (config.subtext) combinedLength += config.subtext.length;
                                    // if there is an icon, ensure this option's width is checked
                                    if (config.icon) combinedLength += 1;

                                    if (combinedLength > widestOptionLength) {
                                        widestOptionLength = combinedLength;

                                        // guess which option is the widest
                                        // use this when calculating menu width
                                        // not perfect, but it's fast, and the width will be updating accordingly when scrolling
                                        that.selectpicker.view.widestOption = mainElements[mainElements.length - 1];
                                    }
                                }
                            }

                            function addOptgroup (index, selectOptions) {
                                var optgroup = selectOptions[index],
                                    previous = selectOptions[index - 1],
                                    next = selectOptions[index + 1],
                                    options = optgroup.querySelectorAll('option' + optionSelector);

                                if (!options.length) return;

                                var config = {
                                        label: htmlEscape(optgroup.label),
                                        subtext: optgroup.getAttribute('data-subtext'),
                                        icon: optgroup.getAttribute('data-icon'),
                                        iconBase: iconBase
                                    },
                                    optgroupClass = ' ' + (optgroup.className || ''),
                                    headerIndex,
                                    lastIndex;

                                optID++;

                                if (previous) {
                                    addDivider({ optID: optID });
                                }

                                var labelElement = generateOption.label(config);

                                mainElements.push(
                                    generateOption.li(labelElement, 'dropdown-header' + optgroupClass, optID)
                                );

                                mainData.push({
                                    display: config.label,
                                    subtext: config.subtext,
                                    type: 'optgroup-label',
                                    optID: optID
                                });

                                for (var j = 0, len = options.length; j < len; j++) {
                                    var option = options[j];

                                    if (j === 0) {
                                        headerIndex = mainData.length - 1;
                                        lastIndex = headerIndex + len;
                                    }

                                    addOption(option, {
                                        headerIndex: headerIndex,
                                        lastIndex: lastIndex,
                                        optID: optID,
                                        optgroupClass: optgroupClass,
                                        disabled: optgroup.disabled
                                    });
                                }

                                if (next) {
                                    addDivider({ optID: optID });
                                }
                            }

                            for (var len = selectOptions.length; startIndex < len; startIndex++) {
                                var item = selectOptions[startIndex];

                                if (item.tagName !== 'OPTGROUP') {
                                    addOption(item, {});
                                } else {
                                    addOptgroup(startIndex, selectOptions);
                                }
                            }

                            this.selectpicker.main.elements = mainElements;
                            this.selectpicker.main.data = mainData;

                            this.selectpicker.current = this.selectpicker.main;
                        },

                        findLis: function () {
                            return this.$menuInner.find('.inner > li');
                        },

                        render: function () {
                            // ensure titleOption is appended and selected (if necessary) before getting selectedOptions
                            this.setPlaceholder();

                            var that = this,
                                element = this.$element[0],
                                selectedOptions = getSelectedOptions(element, this.options.hideDisabled),
                                selectedCount = selectedOptions.length,
                                button = this.$button[0],
                                buttonInner = button.querySelector('.filter-option-inner-inner'),
                                multipleSeparator = document.createTextNode(this.options.multipleSeparator),
                                titleFragment = elementTemplates.fragment.cloneNode(false),
                                showCount,
                                countMax,
                                hasContent = false;

                            button.classList.toggle('bs-placeholder', that.multiple ? !selectedCount : !getSelectValues(element, selectedOptions));

                            this.tabIndex();

                            if (this.options.selectedTextFormat === 'static') {
                                titleFragment = generateOption.text({ text: this.options.title }, true);
                            } else {
                                showCount = this.multiple && this.options.selectedTextFormat.indexOf('count') !== -1 && selectedCount > 1;

                                // determine if the number of selected options will be shown (showCount === true)
                                if (showCount) {
                                    countMax = this.options.selectedTextFormat.split('>');
                                    showCount = (countMax.length > 1 && selectedCount > countMax[1]) || (countMax.length === 1 && selectedCount >= 2);
                                }

                                // only loop through all selected options if the count won't be shown
                                if (showCount === false) {
                                    for (var selectedIndex = 0; selectedIndex < selectedCount; selectedIndex++) {
                                        if (selectedIndex < 50) {
                                            var option = selectedOptions[selectedIndex],
                                                titleOptions = {},
                                                thisData = {
                                                    content: option.getAttribute('data-content'),
                                                    subtext: option.getAttribute('data-subtext'),
                                                    icon: option.getAttribute('data-icon')
                                                };

                                            if (this.multiple && selectedIndex > 0) {
                                                titleFragment.appendChild(multipleSeparator.cloneNode(false));
                                            }

                                            if (option.title) {
                                                titleOptions.text = option.title;
                                            } else if (thisData.content && that.options.showContent) {
                                                titleOptions.content = thisData.content.toString();
                                                hasContent = true;
                                            } else {
                                                if (that.options.showIcon) {
                                                    titleOptions.icon = thisData.icon;
                                                    titleOptions.iconBase = this.options.iconBase;
                                                }
                                                if (that.options.showSubtext && !that.multiple && thisData.subtext) titleOptions.subtext = ' ' + thisData.subtext;
                                                titleOptions.text = option.textContent.trim();
                                            }

                                            titleFragment.appendChild(generateOption.text(titleOptions, true));
                                        } else {
                                            break;
                                        }
                                    }

                                    // add ellipsis
                                    if (selectedCount > 49) {
                                        titleFragment.appendChild(document.createTextNode('...'));
                                    }
                                } else {
                                    var optionSelector = ':not([hidden]):not([data-hidden="true"]):not([data-divider="true"])';
                                    if (this.options.hideDisabled) optionSelector += ':not(:disabled)';

                                    // If this is a multiselect, and selectedTextFormat is count, then show 1 of 2 selected, etc.
                                    var totalCount = this.$element[0].querySelectorAll('select > option' + optionSelector + ', optgroup' + optionSelector + ' option' + optionSelector).length,
                                        tr8nText = (typeof this.options.countSelectedText === 'function') ? this.options.countSelectedText(selectedCount, totalCount) : this.options.countSelectedText;

                                    titleFragment = generateOption.text({
                                        text: tr8nText.replace('{0}', selectedCount.toString()).replace('{1}', totalCount.toString())
                                    }, true);
                                }
                            }

                            if (this.options.title == undefined) {
                                // use .attr to ensure undefined is returned if title attribute is not set
                                this.options.title = this.$element.attr('title');
                            }

                            // If the select doesn't have a title, then use the default, or if nothing is set at all, use noneSelectedText
                            if (!titleFragment.childNodes.length) {
                                titleFragment = generateOption.text({
                                    text: typeof this.options.title !== 'undefined' ? this.options.title : this.options.noneSelectedText
                                }, true);
                            }

                            // strip all HTML tags and trim the result, then unescape any escaped tags
                            button.title = titleFragment.textContent.replace(/<[^>]*>?/g, '').trim();

                            if (this.options.sanitize && hasContent) {
                                sanitizeHtml([titleFragment], that.options.whiteList, that.options.sanitizeFn);
                            }

                            buttonInner.innerHTML = '';
                            buttonInner.appendChild(titleFragment);

                            if (version.major < 4 && this.$newElement[0].classList.contains('bs3-has-addon')) {
                                var filterExpand = button.querySelector('.filter-expand'),
                                    clone = buttonInner.cloneNode(true);

                                clone.className = 'filter-expand';

                                if (filterExpand) {
                                    button.replaceChild(clone, filterExpand);
                                } else {
                                    button.appendChild(clone);
                                }
                            }

                            this.$element.trigger('rendered' + EVENT_KEY);
                        },

                        /**
                         * @param [style]
                         * @param [status]
                         */
                        setStyle: function (newStyle, status) {
                            var button = this.$button[0],
                                newElement = this.$newElement[0],
                                style = this.options.style.trim(),
                                buttonClass;

                            if (this.$element.attr('class')) {
                                this.$newElement.addClass(this.$element.attr('class').replace(/selectpicker|mobile-device|bs-select-hidden|validate\[.*\]/gi, ''));
                            }

                            if (version.major < 4) {
                                newElement.classList.add('bs3');

                                if (newElement.parentNode.classList.contains('input-group') &&
                                    (newElement.previousElementSibling || newElement.nextElementSibling) &&
                                    (newElement.previousElementSibling || newElement.nextElementSibling).classList.contains('input-group-addon')
                                ) {
                                    newElement.classList.add('bs3-has-addon');
                                }
                            }

                            if (newStyle) {
                                buttonClass = newStyle.trim();
                            } else {
                                buttonClass = style;
                            }

                            if (status == 'add') {
                                if (buttonClass) button.classList.add.apply(button.classList, buttonClass.split(' '));
                            } else if (status == 'remove') {
                                if (buttonClass) button.classList.remove.apply(button.classList, buttonClass.split(' '));
                            } else {
                                if (style) button.classList.remove.apply(button.classList, style.split(' '));
                                if (buttonClass) button.classList.add.apply(button.classList, buttonClass.split(' '));
                            }
                        },

                        liHeight: function (refresh) {
                            if (!refresh && (this.options.size === false || this.sizeInfo)) return;

                            if (!this.sizeInfo) this.sizeInfo = {};

                            var newElement = document.createElement('div'),
                                menu = document.createElement('div'),
                                menuInner = document.createElement('div'),
                                menuInnerInner = document.createElement('ul'),
                                divider = document.createElement('li'),
                                dropdownHeader = document.createElement('li'),
                                li = document.createElement('li'),
                                a = document.createElement('a'),
                                text = document.createElement('span'),
                                header = this.options.header && this.$menu.find('.' + classNames.POPOVERHEADER).length > 0 ? this.$menu.find('.' + classNames.POPOVERHEADER)[0].cloneNode(true) : null,
                                search = this.options.liveSearch ? document.createElement('div') : null,
                                actions = this.options.actionsBox && this.multiple && this.$menu.find('.bs-actionsbox').length > 0 ? this.$menu.find('.bs-actionsbox')[0].cloneNode(true) : null,
                                doneButton = this.options.doneButton && this.multiple && this.$menu.find('.bs-donebutton').length > 0 ? this.$menu.find('.bs-donebutton')[0].cloneNode(true) : null,
                                firstOption = this.$element.find('option')[0];

                            this.sizeInfo.selectWidth = this.$newElement[0].offsetWidth;

                            text.className = 'text';
                            a.className = 'dropdown-item ' + (firstOption ? firstOption.className : '');
                            newElement.className = this.$menu[0].parentNode.className + ' ' + classNames.SHOW;
                            newElement.style.width = this.sizeInfo.selectWidth + 'px';
                            if (this.options.width === 'auto') menu.style.minWidth = 0;
                            menu.className = classNames.MENU + ' ' + classNames.SHOW;
                            menuInner.className = 'inner ' + classNames.SHOW;
                            menuInnerInner.className = classNames.MENU + ' inner ' + (version.major === '4' ? classNames.SHOW : '');
                            divider.className = classNames.DIVIDER;
                            dropdownHeader.className = 'dropdown-header';

                            text.appendChild(document.createTextNode('\u200b'));
                            a.appendChild(text);
                            li.appendChild(a);
                            dropdownHeader.appendChild(text.cloneNode(true));

                            if (this.selectpicker.view.widestOption) {
                                menuInnerInner.appendChild(this.selectpicker.view.widestOption.cloneNode(true));
                            }

                            menuInnerInner.appendChild(li);
                            menuInnerInner.appendChild(divider);
                            menuInnerInner.appendChild(dropdownHeader);
                            if (header) menu.appendChild(header);
                            if (search) {
                                var input = document.createElement('input');
                                search.className = 'bs-searchbox';
                                input.className = 'form-control';
                                search.appendChild(input);
                                menu.appendChild(search);
                            }
                            if (actions) menu.appendChild(actions);
                            menuInner.appendChild(menuInnerInner);
                            menu.appendChild(menuInner);
                            if (doneButton) menu.appendChild(doneButton);
                            newElement.appendChild(menu);

                            document.body.appendChild(newElement);

                            var liHeight = li.offsetHeight,
                                dropdownHeaderHeight = dropdownHeader ? dropdownHeader.offsetHeight : 0,
                                headerHeight = header ? header.offsetHeight : 0,
                                searchHeight = search ? search.offsetHeight : 0,
                                actionsHeight = actions ? actions.offsetHeight : 0,
                                doneButtonHeight = doneButton ? doneButton.offsetHeight : 0,
                                dividerHeight = $(divider).outerHeight(true),
                                // fall back to jQuery if getComputedStyle is not supported
                                menuStyle = window.getComputedStyle ? window.getComputedStyle(menu) : false,
                                menuWidth = menu.offsetWidth,
                                $menu = menuStyle ? null : $(menu),
                                menuPadding = {
                                    vert: toInteger(menuStyle ? menuStyle.paddingTop : $menu.css('paddingTop')) +
                                        toInteger(menuStyle ? menuStyle.paddingBottom : $menu.css('paddingBottom')) +
                                        toInteger(menuStyle ? menuStyle.borderTopWidth : $menu.css('borderTopWidth')) +
                                        toInteger(menuStyle ? menuStyle.borderBottomWidth : $menu.css('borderBottomWidth')),
                                    horiz: toInteger(menuStyle ? menuStyle.paddingLeft : $menu.css('paddingLeft')) +
                                        toInteger(menuStyle ? menuStyle.paddingRight : $menu.css('paddingRight')) +
                                        toInteger(menuStyle ? menuStyle.borderLeftWidth : $menu.css('borderLeftWidth')) +
                                        toInteger(menuStyle ? menuStyle.borderRightWidth : $menu.css('borderRightWidth'))
                                },
                                menuExtras = {
                                    vert: menuPadding.vert +
                                        toInteger(menuStyle ? menuStyle.marginTop : $menu.css('marginTop')) +
                                        toInteger(menuStyle ? menuStyle.marginBottom : $menu.css('marginBottom')) + 2,
                                    horiz: menuPadding.horiz +
                                        toInteger(menuStyle ? menuStyle.marginLeft : $menu.css('marginLeft')) +
                                        toInteger(menuStyle ? menuStyle.marginRight : $menu.css('marginRight')) + 2
                                },
                                scrollBarWidth;

                            menuInner.style.overflowY = 'scroll';

                            scrollBarWidth = menu.offsetWidth - menuWidth;

                            document.body.removeChild(newElement);

                            this.sizeInfo.liHeight = liHeight;
                            this.sizeInfo.dropdownHeaderHeight = dropdownHeaderHeight;
                            this.sizeInfo.headerHeight = headerHeight;
                            this.sizeInfo.searchHeight = searchHeight;
                            this.sizeInfo.actionsHeight = actionsHeight;
                            this.sizeInfo.doneButtonHeight = doneButtonHeight;
                            this.sizeInfo.dividerHeight = dividerHeight;
                            this.sizeInfo.menuPadding = menuPadding;
                            this.sizeInfo.menuExtras = menuExtras;
                            this.sizeInfo.menuWidth = menuWidth;
                            this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth;
                            this.sizeInfo.scrollBarWidth = scrollBarWidth;
                            this.sizeInfo.selectHeight = this.$newElement[0].offsetHeight;

                            this.setPositionData();
                        },

                        getSelectPosition: function () {
                            var that = this,
                                $window = $(window),
                                pos = that.$newElement.offset(),
                                $container = $(that.options.container),
                                containerPos;

                            if (that.options.container && $container.length && !$container.is('body')) {
                                containerPos = $container.offset();
                                containerPos.top += parseInt($container.css('borderTopWidth'));
                                containerPos.left += parseInt($container.css('borderLeftWidth'));
                            } else {
                                containerPos = { top: 0, left: 0 };
                            }

                            var winPad = that.options.windowPadding;

                            this.sizeInfo.selectOffsetTop = pos.top - containerPos.top - $window.scrollTop();
                            this.sizeInfo.selectOffsetBot = $window.height() - this.sizeInfo.selectOffsetTop - this.sizeInfo.selectHeight - containerPos.top - winPad[2];
                            this.sizeInfo.selectOffsetLeft = pos.left - containerPos.left - $window.scrollLeft();
                            this.sizeInfo.selectOffsetRight = $window.width() - this.sizeInfo.selectOffsetLeft - this.sizeInfo.selectWidth - containerPos.left - winPad[1];
                            this.sizeInfo.selectOffsetTop -= winPad[0];
                            this.sizeInfo.selectOffsetLeft -= winPad[3];
                        },

                        setMenuSize: function (isAuto) {
                            this.getSelectPosition();

                            var selectWidth = this.sizeInfo.selectWidth,
                                liHeight = this.sizeInfo.liHeight,
                                headerHeight = this.sizeInfo.headerHeight,
                                searchHeight = this.sizeInfo.searchHeight,
                                actionsHeight = this.sizeInfo.actionsHeight,
                                doneButtonHeight = this.sizeInfo.doneButtonHeight,
                                divHeight = this.sizeInfo.dividerHeight,
                                menuPadding = this.sizeInfo.menuPadding,
                                menuInnerHeight,
                                menuHeight,
                                divLength = 0,
                                minHeight,
                                _minHeight,
                                maxHeight,
                                menuInnerMinHeight,
                                estimate;

                            if (this.options.dropupAuto) {
                                // Get the estimated height of the menu without scrollbars.
                                // This is useful for smaller menus, where there might be plenty of room
                                // below the button without setting dropup, but we can't know
                                // the exact height of the menu until createView is called later
                                estimate = liHeight * this.selectpicker.current.elements.length + menuPadding.vert;
                                this.$newElement.toggleClass(classNames.DROPUP, this.sizeInfo.selectOffsetTop - this.sizeInfo.selectOffsetBot > this.sizeInfo.menuExtras.vert && estimate + this.sizeInfo.menuExtras.vert + 50 > this.sizeInfo.selectOffsetBot);
                            }

                            if (this.options.size === 'auto') {
                                _minHeight = this.selectpicker.current.elements.length > 3 ? this.sizeInfo.liHeight * 3 + this.sizeInfo.menuExtras.vert - 2 : 0;
                                menuHeight = this.sizeInfo.selectOffsetBot - this.sizeInfo.menuExtras.vert;
                                minHeight = _minHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight;
                                menuInnerMinHeight = Math.max(_minHeight - menuPadding.vert, 0);

                                if (this.$newElement.hasClass(classNames.DROPUP)) {
                                    menuHeight = this.sizeInfo.selectOffsetTop - this.sizeInfo.menuExtras.vert;
                                }

                                maxHeight = menuHeight;
                                menuInnerHeight = menuHeight - headerHeight - searchHeight - actionsHeight - doneButtonHeight - menuPadding.vert;
                            } else if (this.options.size && this.options.size != 'auto' && this.selectpicker.current.elements.length > this.options.size) {
                                for (var i = 0; i < this.options.size; i++) {
                                    if (this.selectpicker.current.data[i].type === 'divider') divLength++;
                                }

                                menuHeight = liHeight * this.options.size + divLength * divHeight + menuPadding.vert;
                                menuInnerHeight = menuHeight - menuPadding.vert;
                                maxHeight = menuHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight;
                                minHeight = menuInnerMinHeight = '';
                            }

                            if (this.options.dropdownAlignRight === 'auto') {
                                this.$menu.toggleClass(classNames.MENURIGHT, this.sizeInfo.selectOffsetLeft > this.sizeInfo.selectOffsetRight && this.sizeInfo.selectOffsetRight < (this.sizeInfo.totalMenuWidth - selectWidth));
                            }

                            this.$menu.css({
                                'max-height': maxHeight + 'px',
                                'overflow': 'hidden',
                                'min-height': minHeight + 'px'
                            });

                            this.$menuInner.css({
                                'max-height': menuInnerHeight + 'px',
                                'overflow-y': 'auto',
                                'min-height': menuInnerMinHeight + 'px'
                            });

                            // ensure menuInnerHeight is always a positive number to prevent issues calculating chunkSize in createView
                            this.sizeInfo.menuInnerHeight = Math.max(menuInnerHeight, 1);

                            if (this.selectpicker.current.data.length && this.selectpicker.current.data[this.selectpicker.current.data.length - 1].position > this.sizeInfo.menuInnerHeight) {
                                this.sizeInfo.hasScrollBar = true;
                                this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth + this.sizeInfo.scrollBarWidth;

                                this.$menu.css('min-width', this.sizeInfo.totalMenuWidth);
                            }

                            if (this.dropdown && this.dropdown._popper) this.dropdown._popper.update();
                        },

                        setSize: function (refresh) {
                            this.liHeight(refresh);

                            if (this.options.header) this.$menu.css('padding-top', 0);
                            if (this.options.size === false) return;

                            var that = this,
                                $window = $(window);

                            this.setMenuSize();

                            if (this.options.liveSearch) {
                                this.$searchbox
                                    .off('input.setMenuSize propertychange.setMenuSize')
                                    .on('input.setMenuSize propertychange.setMenuSize', function () {
                                        return that.setMenuSize();
                                    });
                            }

                            if (this.options.size === 'auto') {
                                $window
                                    .off('resize' + EVENT_KEY + '.' + this.selectId + '.setMenuSize' + ' scroll' + EVENT_KEY + '.' + this.selectId + '.setMenuSize')
                                    .on('resize' + EVENT_KEY + '.' + this.selectId + '.setMenuSize' + ' scroll' + EVENT_KEY + '.' + this.selectId + '.setMenuSize', function () {
                                        return that.setMenuSize();
                                    });
                            } else if (this.options.size && this.options.size != 'auto' && this.selectpicker.current.elements.length > this.options.size) {
                                $window.off('resize' + EVENT_KEY + '.' + this.selectId + '.setMenuSize' + ' scroll' + EVENT_KEY + '.' + this.selectId + '.setMenuSize');
                            }

                            that.createView(false, true, refresh);
                        },

                        setWidth: function () {
                            var that = this;

                            if (this.options.width === 'auto') {
                                requestAnimationFrame(function () {
                                    that.$menu.css('min-width', '0');

                                    that.$element.on('loaded' + EVENT_KEY, function () {
                                        that.liHeight();
                                        that.setMenuSize();

                                        // Get correct width if element is hidden
                                        var $selectClone = that.$newElement.clone().appendTo('body'),
                                            btnWidth = $selectClone.css('width', 'auto').children('button').outerWidth();

                                        $selectClone.remove();

                                        // Set width to whatever's larger, button title or longest option
                                        that.sizeInfo.selectWidth = Math.max(that.sizeInfo.totalMenuWidth, btnWidth);
                                        that.$newElement.css('width', that.sizeInfo.selectWidth + 'px');
                                    });
                                });
                            } else if (this.options.width === 'fit') {
                                // Remove inline min-width so width can be changed from 'auto'
                                this.$menu.css('min-width', '');
                                this.$newElement.css('width', '').addClass('fit-width');
                            } else if (this.options.width) {
                                // Remove inline min-width so width can be changed from 'auto'
                                this.$menu.css('min-width', '');
                                this.$newElement.css('width', this.options.width);
                            } else {
                                // Remove inline min-width/width so width can be changed
                                this.$menu.css('min-width', '');
                                this.$newElement.css('width', '');
                            }
                            // Remove fit-width class if width is changed programmatically
                            if (this.$newElement.hasClass('fit-width') && this.options.width !== 'fit') {
                                this.$newElement[0].classList.remove('fit-width');
                            }
                        },

                        selectPosition: function () {
                            this.$bsContainer = $('<div class="bs-container" />');

                            var that = this,
                                $container = $(this.options.container),
                                pos,
                                containerPos,
                                actualHeight,
                                getPlacement = function ($element) {
                                    var containerPosition = {},
                                        // fall back to dropdown's default display setting if display is not manually set
                                        display = that.options.display || (
                                            // Bootstrap 3 doesn't have $.fn.dropdown.Constructor.Default
                                            $.fn.dropdown.Constructor.Default ? $.fn.dropdown.Constructor.Default.display
                                                : false
                                        );

                                    that.$bsContainer.addClass($element.attr('class').replace(/form-control|fit-width/gi, '')).toggleClass(classNames.DROPUP, $element.hasClass(classNames.DROPUP));
                                    pos = $element.offset();

                                    if (!$container.is('body')) {
                                        containerPos = $container.offset();
                                        containerPos.top += parseInt($container.css('borderTopWidth')) - $container.scrollTop();
                                        containerPos.left += parseInt($container.css('borderLeftWidth')) - $container.scrollLeft();
                                    } else {
                                        containerPos = { top: 0, left: 0 };
                                    }

                                    actualHeight = $element.hasClass(classNames.DROPUP) ? 0 : $element[0].offsetHeight;

                                    // Bootstrap 4+ uses Popper for menu positioning
                                    if (version.major < 4 || display === 'static') {
                                        containerPosition.top = pos.top - containerPos.top + actualHeight;
                                        containerPosition.left = pos.left - containerPos.left;
                                    }

                                    containerPosition.width = $element[0].offsetWidth;

                                    that.$bsContainer.css(containerPosition);
                                };

                            this.$button.on('click.bs.dropdown.data-api', function () {
                                if (that.isDisabled()) {
                                    return;
                                }

                                getPlacement(that.$newElement);

                                that.$bsContainer
                                    .appendTo(that.options.container)
                                    .toggleClass(classNames.SHOW, !that.$button.hasClass(classNames.SHOW))
                                    .append(that.$menu);
                            });

                            $(window)
                                .off('resize' + EVENT_KEY + '.' + this.selectId + ' scroll' + EVENT_KEY + '.' + this.selectId)
                                .on('resize' + EVENT_KEY + '.' + this.selectId + ' scroll' + EVENT_KEY + '.' + this.selectId, function () {
                                    var isActive = that.$newElement.hasClass(classNames.SHOW);

                                    if (isActive) getPlacement(that.$newElement);
                                });

                            this.$element.on('hide' + EVENT_KEY, function () {
                                that.$menu.data('height', that.$menu.height());
                                that.$bsContainer.detach();
                            });
                        },

                        setOptionStatus: function (selectedOnly) {
                            var that = this;

                            that.noScroll = false;

                            if (that.selectpicker.view.visibleElements && that.selectpicker.view.visibleElements.length) {
                                for (var i = 0; i < that.selectpicker.view.visibleElements.length; i++) {
                                    var liData = that.selectpicker.current.data[i + that.selectpicker.view.position0],
                                        option = liData.option;

                                    if (option) {
                                        if (selectedOnly !== true) {
                                            that.setDisabled(
                                                liData.index,
                                                liData.disabled
                                            );
                                        }

                                        that.setSelected(
                                            liData.index,
                                            option.selected
                                        );
                                    }
                                }
                            }
                        },

                        /**
                         * @param {number} index - the index of the option that is being changed
                         * @param {boolean} selected - true if the option is being selected, false if being deselected
                         */
                        setSelected: function (index, selected) {
                            var li = this.selectpicker.main.elements[index],
                                liData = this.selectpicker.main.data[index],
                                activeIndexIsSet = this.activeIndex !== undefined,
                                thisIsActive = this.activeIndex === index,
                                prevActive,
                                a,
                                // if current option is already active
                                // OR
                                // if the current option is being selected, it's NOT multiple, and
                                // activeIndex is undefined:
                                //  - when the menu is first being opened, OR
                                //  - after a search has been performed, OR
                                //  - when retainActive is false when selecting a new option (i.e. index of the newly selected option is not the same as the current activeIndex)
                                keepActive = thisIsActive || (selected && !this.multiple && !activeIndexIsSet);

                            liData.selected = selected;

                            a = li.firstChild;

                            if (selected) {
                                this.selectedIndex = index;
                            }

                            li.classList.toggle('selected', selected);

                            if (keepActive) {
                                this.focusItem(li, liData);
                                this.selectpicker.view.currentActive = li;
                                this.activeIndex = index;
                            } else {
                                this.defocusItem(li);
                            }

                            if (a) {
                                a.classList.toggle('selected', selected);

                                if (selected) {
                                    a.setAttribute('aria-selected', true);
                                } else {
                                    if (this.multiple) {
                                        a.setAttribute('aria-selected', false);
                                    } else {
                                        a.removeAttribute('aria-selected');
                                    }
                                }
                            }

                            if (!keepActive && !activeIndexIsSet && selected && this.prevActiveIndex !== undefined) {
                                prevActive = this.selectpicker.main.elements[this.prevActiveIndex];

                                this.defocusItem(prevActive);
                            }
                        },

                        /**
                         * @param {number} index - the index of the option that is being disabled
                         * @param {boolean} disabled - true if the option is being disabled, false if being enabled
                         */
                        setDisabled: function (index, disabled) {
                            var li = this.selectpicker.main.elements[index],
                                a;

                            this.selectpicker.main.data[index].disabled = disabled;

                            a = li.firstChild;

                            li.classList.toggle(classNames.DISABLED, disabled);

                            if (a) {
                                if (version.major === '4') a.classList.toggle(classNames.DISABLED, disabled);

                                if (disabled) {
                                    a.setAttribute('aria-disabled', disabled);
                                    a.setAttribute('tabindex', -1);
                                } else {
                                    a.removeAttribute('aria-disabled');
                                    a.setAttribute('tabindex', 0);
                                }
                            }
                        },

                        isDisabled: function () {
                            return this.$element[0].disabled;
                        },

                        checkDisabled: function () {
                            var that = this;

                            if (this.isDisabled()) {
                                this.$newElement[0].classList.add(classNames.DISABLED);
                                this.$button.addClass(classNames.DISABLED).attr('tabindex', -1).attr('aria-disabled', true);
                            } else {
                                if (this.$button[0].classList.contains(classNames.DISABLED)) {
                                    this.$newElement[0].classList.remove(classNames.DISABLED);
                                    this.$button.removeClass(classNames.DISABLED).attr('aria-disabled', false);
                                }

                                if (this.$button.attr('tabindex') == -1 && !this.$element.data('tabindex')) {
                                    this.$button.removeAttr('tabindex');
                                }
                            }

                            this.$button.on('click', function () {
                                return !that.isDisabled();
                            });
                        },

                        tabIndex: function () {
                            if (this.$element.data('tabindex') !== this.$element.attr('tabindex') &&
                                (this.$element.attr('tabindex') !== -98 && this.$element.attr('tabindex') !== '-98')) {
                                this.$element.data('tabindex', this.$element.attr('tabindex'));
                                this.$button.attr('tabindex', this.$element.data('tabindex'));
                            }

                            this.$element.attr('tabindex', -98);
                        },

                        clickListener: function () {
                            var that = this,
                                $document = $(document);

                            $document.data('spaceSelect', false);

                            this.$button.on('keyup', function (e) {
                                if (/(32)/.test(e.keyCode.toString(10)) && $document.data('spaceSelect')) {
                                    e.preventDefault();
                                    $document.data('spaceSelect', false);
                                }
                            });

                            this.$newElement.on('show.bs.dropdown', function () {
                                if (version.major > 3 && !that.dropdown) {
                                    that.dropdown = that.$button.data('bs.dropdown');
                                    that.dropdown._menu = that.$menu[0];
                                }
                            });

                            this.$button.on('click.bs.dropdown.data-api', function () {
                                if (!that.$newElement.hasClass(classNames.SHOW)) {
                                    that.setSize();
                                }
                            });

                            function setFocus () {
                                if (that.options.liveSearch) {
                                    that.$searchbox.trigger('focus');
                                } else {
                                    that.$menuInner.trigger('focus');
                                }
                            }

                            function checkPopperExists () {
                                if (that.dropdown && that.dropdown._popper && that.dropdown._popper.state.isCreated) {
                                    setFocus();
                                } else {
                                    requestAnimationFrame(checkPopperExists);
                                }
                            }

                            this.$element.on('shown' + EVENT_KEY, function () {
                                if (that.$menuInner[0].scrollTop !== that.selectpicker.view.scrollTop) {
                                    that.$menuInner[0].scrollTop = that.selectpicker.view.scrollTop;
                                }

                                if (version.major > 3) {
                                    requestAnimationFrame(checkPopperExists);
                                } else {
                                    setFocus();
                                }
                            });

                            // ensure posinset and setsize are correct before selecting an option via a click
                            this.$menuInner.on('mouseenter', 'li a', function (e) {
                                var hoverLi = this.parentElement,
                                    position0 = that.isVirtual() ? that.selectpicker.view.position0 : 0,
                                    index = Array.prototype.indexOf.call(hoverLi.parentElement.children, hoverLi),
                                    hoverData = that.selectpicker.current.data[index + position0];

                                that.focusItem(hoverLi, hoverData, true);
                            });

                            this.$menuInner.on('click', 'li a', function (e, retainActive) {
                                var $this = $(this),
                                    element = that.$element[0],
                                    position0 = that.isVirtual() ? that.selectpicker.view.position0 : 0,
                                    clickedData = that.selectpicker.current.data[$this.parent().index() + position0],
                                    clickedIndex = clickedData.index,
                                    prevValue = getSelectValues(element),
                                    prevIndex = element.selectedIndex,
                                    prevOption = element.options[prevIndex],
                                    triggerChange = true;

                                // Don't close on multi choice menu
                                if (that.multiple && that.options.maxOptions !== 1) {
                                    e.stopPropagation();
                                }

                                e.preventDefault();

                                // Don't run if the select is disabled
                                if (!that.isDisabled() && !$this.parent().hasClass(classNames.DISABLED)) {
                                    var $options = that.$element.find('option'),
                                        option = clickedData.option,
                                        $option = $(option),
                                        state = option.selected,
                                        $optgroup = $option.parent('optgroup'),
                                        $optgroupOptions = $optgroup.find('option'),
                                        maxOptions = that.options.maxOptions,
                                        maxOptionsGrp = $optgroup.data('maxOptions') || false;

                                    if (clickedIndex === that.activeIndex) retainActive = true;

                                    if (!retainActive) {
                                        that.prevActiveIndex = that.activeIndex;
                                        that.activeIndex = undefined;
                                    }

                                    if (!that.multiple) { // Deselect all others if not multi select box
                                        prevOption.selected = false;
                                        option.selected = true;
                                        that.setSelected(clickedIndex, true);
                                    } else { // Toggle the one we have chosen if we are multi select.
                                        option.selected = !state;

                                        that.setSelected(clickedIndex, !state);
                                        $this.trigger('blur');

                                        if (maxOptions !== false || maxOptionsGrp !== false) {
                                            var maxReached = maxOptions < $options.filter(':selected').length,
                                                maxReachedGrp = maxOptionsGrp < $optgroup.find('option:selected').length;

                                            if ((maxOptions && maxReached) || (maxOptionsGrp && maxReachedGrp)) {
                                                if (maxOptions && maxOptions == 1) {
                                                    $options.prop('selected', false);
                                                    $option.prop('selected', true);

                                                    for (var i = 0; i < $options.length; i++) {
                                                        that.setSelected(i, false);
                                                    }

                                                    that.setSelected(clickedIndex, true);
                                                } else if (maxOptionsGrp && maxOptionsGrp == 1) {
                                                    $optgroup.find('option:selected').prop('selected', false);
                                                    $option.prop('selected', true);

                                                    for (var i = 0; i < $optgroupOptions.length; i++) {
                                                        var option = $optgroupOptions[i];
                                                        that.setSelected($options.index(option), false);
                                                    }

                                                    that.setSelected(clickedIndex, true);
                                                } else {
                                                    var maxOptionsText = typeof that.options.maxOptionsText === 'string' ? [that.options.maxOptionsText, that.options.maxOptionsText] : that.options.maxOptionsText,
                                                        maxOptionsArr = typeof maxOptionsText === 'function' ? maxOptionsText(maxOptions, maxOptionsGrp) : maxOptionsText,
                                                        maxTxt = maxOptionsArr[0].replace('{n}', maxOptions),
                                                        maxTxtGrp = maxOptionsArr[1].replace('{n}', maxOptionsGrp),
                                                        $notify = $('<div class="notify"></div>');
                                                    // If {var} is set in array, replace it
                                                    /** @deprecated */
                                                    if (maxOptionsArr[2]) {
                                                        maxTxt = maxTxt.replace('{var}', maxOptionsArr[2][maxOptions > 1 ? 0 : 1]);
                                                        maxTxtGrp = maxTxtGrp.replace('{var}', maxOptionsArr[2][maxOptionsGrp > 1 ? 0 : 1]);
                                                    }

                                                    $option.prop('selected', false);

                                                    that.$menu.append($notify);

                                                    if (maxOptions && maxReached) {
                                                        $notify.append($('<div>' + maxTxt + '</div>'));
                                                        triggerChange = false;
                                                        that.$element.trigger('maxReached' + EVENT_KEY);
                                                    }

                                                    if (maxOptionsGrp && maxReachedGrp) {
                                                        $notify.append($('<div>' + maxTxtGrp + '</div>'));
                                                        triggerChange = false;
                                                        that.$element.trigger('maxReachedGrp' + EVENT_KEY);
                                                    }

                                                    setTimeout(function () {
                                                        that.setSelected(clickedIndex, false);
                                                    }, 10);

                                                    $notify.delay(750).fadeOut(300, function () {
                                                        $(this).remove();
                                                    });
                                                }
                                            }
                                        }
                                    }

                                    if (!that.multiple || (that.multiple && that.options.maxOptions === 1)) {
                                        that.$button.trigger('focus');
                                    } else if (that.options.liveSearch) {
                                        that.$searchbox.trigger('focus');
                                    }

                                    // Trigger select 'change'
                                    if (triggerChange) {
                                        if (that.multiple || prevIndex !== element.selectedIndex) {
                                            // $option.prop('selected') is current option state (selected/unselected). prevValue is the value of the select prior to being changed.
                                            changedArguments = [option.index, $option.prop('selected'), prevValue];
                                            that.$element
                                                .triggerNative('change');
                                        }
                                    }
                                }
                            });

                            this.$menu.on('click', 'li.' + classNames.DISABLED + ' a, .' + classNames.POPOVERHEADER + ', .' + classNames.POPOVERHEADER + ' :not(.close)', function (e) {
                                if (e.currentTarget == this) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    if (that.options.liveSearch && !$(e.target).hasClass('close')) {
                                        that.$searchbox.trigger('focus');
                                    } else {
                                        that.$button.trigger('focus');
                                    }
                                }
                            });

                            this.$menuInner.on('click', '.divider, .dropdown-header', function (e) {
                                e.preventDefault();
                                e.stopPropagation();
                                if (that.options.liveSearch) {
                                    that.$searchbox.trigger('focus');
                                } else {
                                    that.$button.trigger('focus');
                                }
                            });

                            this.$menu.on('click', '.' + classNames.POPOVERHEADER + ' .close', function () {
                                that.$button.trigger('click');
                            });

                            this.$searchbox.on('click', function (e) {
                                e.stopPropagation();
                            });

                            this.$menu.on('click', '.actions-btn', function (e) {
                                if (that.options.liveSearch) {
                                    that.$searchbox.trigger('focus');
                                } else {
                                    that.$button.trigger('focus');
                                }

                                e.preventDefault();
                                e.stopPropagation();

                                if ($(this).hasClass('bs-select-all')) {
                                    that.selectAll();
                                } else {
                                    that.deselectAll();
                                }
                            });

                            this.$element
                                .on('change' + EVENT_KEY, function () {
                                    that.render();
                                    that.$element.trigger('changed' + EVENT_KEY, changedArguments);
                                    changedArguments = null;
                                })
                                .on('focus' + EVENT_KEY, function () {
                                    if (!that.options.mobile) that.$button.trigger('focus');
                                });
                        },

                        liveSearchListener: function () {
                            var that = this,
                                noResults = document.createElement('li');

                            this.$button.on('click.bs.dropdown.data-api', function () {
                                if (!!that.$searchbox.val()) {
                                    that.$searchbox.val('');
                                }
                            });

                            this.$searchbox.on('click.bs.dropdown.data-api focus.bs.dropdown.data-api touchend.bs.dropdown.data-api', function (e) {
                                e.stopPropagation();
                            });

                            this.$searchbox.on('input propertychange', function () {
                                var searchValue = that.$searchbox.val();

                                that.selectpicker.search.elements = [];
                                that.selectpicker.search.data = [];

                                if (searchValue) {
                                    var i,
                                        searchMatch = [],
                                        q = searchValue.toUpperCase(),
                                        cache = {},
                                        cacheArr = [],
                                        searchStyle = that._searchStyle(),
                                        normalizeSearch = that.options.liveSearchNormalize;

                                    if (normalizeSearch) q = normalizeToBase(q);

                                    that._$lisSelected = that.$menuInner.find('.selected');

                                    for (var i = 0; i < that.selectpicker.main.data.length; i++) {
                                        var li = that.selectpicker.main.data[i];

                                        if (!cache[i]) {
                                            cache[i] = stringSearch(li, q, searchStyle, normalizeSearch);
                                        }

                                        if (cache[i] && li.headerIndex !== undefined && cacheArr.indexOf(li.headerIndex) === -1) {
                                            if (li.headerIndex > 0) {
                                                cache[li.headerIndex - 1] = true;
                                                cacheArr.push(li.headerIndex - 1);
                                            }

                                            cache[li.headerIndex] = true;
                                            cacheArr.push(li.headerIndex);

                                            cache[li.lastIndex + 1] = true;
                                        }

                                        if (cache[i] && li.type !== 'optgroup-label') cacheArr.push(i);
                                    }

                                    for (var i = 0, cacheLen = cacheArr.length; i < cacheLen; i++) {
                                        var index = cacheArr[i],
                                            prevIndex = cacheArr[i - 1],
                                            li = that.selectpicker.main.data[index],
                                            liPrev = that.selectpicker.main.data[prevIndex];

                                        if (li.type !== 'divider' || (li.type === 'divider' && liPrev && liPrev.type !== 'divider' && cacheLen - 1 !== i)) {
                                            that.selectpicker.search.data.push(li);
                                            searchMatch.push(that.selectpicker.main.elements[index]);
                                        }
                                    }

                                    that.activeIndex = undefined;
                                    that.noScroll = true;
                                    that.$menuInner.scrollTop(0);
                                    that.selectpicker.search.elements = searchMatch;
                                    that.createView(true);

                                    if (!searchMatch.length) {
                                        noResults.className = 'no-results';
                                        noResults.innerHTML = that.options.noneResultsText.replace('{0}', '"' + htmlEscape(searchValue) + '"');
                                        that.$menuInner[0].firstChild.appendChild(noResults);
                                    }
                                } else {
                                    that.$menuInner.scrollTop(0);
                                    that.createView(false);
                                }
                            });
                        },

                        _searchStyle: function () {
                            return this.options.liveSearchStyle || 'contains';
                        },

                        val: function (value) {
                            var element = this.$element[0];

                            if (typeof value !== 'undefined') {
                                var prevValue = getSelectValues(element);

                                changedArguments = [null, null, prevValue];

                                this.$element
                                    .val(value)
                                    .trigger('changed' + EVENT_KEY, changedArguments);

                                if (this.$newElement.hasClass(classNames.SHOW)) {
                                    if (this.multiple) {
                                        this.setOptionStatus(true);
                                    } else {
                                        var liSelectedIndex = (element.options[element.selectedIndex] || {}).liIndex;

                                        if (typeof liSelectedIndex === 'number') {
                                            this.setSelected(this.selectedIndex, false);
                                            this.setSelected(liSelectedIndex, true);
                                        }
                                    }
                                }

                                this.render();

                                changedArguments = null;

                                return this.$element;
                            } else {
                                return this.$element.val();
                            }
                        },

                        changeAll: function (status) {
                            if (!this.multiple) return;
                            if (typeof status === 'undefined') status = true;

                            var element = this.$element[0],
                                previousSelected = 0,
                                currentSelected = 0,
                                prevValue = getSelectValues(element);

                            element.classList.add('bs-select-hidden');

                            for (var i = 0, len = this.selectpicker.current.elements.length; i < len; i++) {
                                var liData = this.selectpicker.current.data[i],
                                    option = liData.option;

                                if (option && !liData.disabled && liData.type !== 'divider') {
                                    if (liData.selected) previousSelected++;
                                    option.selected = status;
                                    if (status) currentSelected++;
                                }
                            }

                            element.classList.remove('bs-select-hidden');

                            if (previousSelected === currentSelected) return;

                            this.setOptionStatus();

                            changedArguments = [null, null, prevValue];

                            this.$element
                                .triggerNative('change');
                        },

                        selectAll: function () {
                            return this.changeAll(true);
                        },

                        deselectAll: function () {
                            return this.changeAll(false);
                        },

                        toggle: function (e) {
                            e = e || window.event;

                            if (e) e.stopPropagation();

                            this.$button.trigger('click.bs.dropdown.data-api');
                        },

                        keydown: function (e) {
                            var $this = $(this),
                                isToggle = $this.hasClass('dropdown-toggle'),
                                $parent = isToggle ? $this.closest('.dropdown') : $this.closest(Selector.MENU),
                                that = $parent.data('this'),
                                $items = that.findLis(),
                                index,
                                isActive,
                                liActive,
                                activeLi,
                                offset,
                                updateScroll = false,
                                downOnTab = e.which === keyCodes.TAB && !isToggle && !that.options.selectOnTab,
                                isArrowKey = REGEXP_ARROW.test(e.which) || downOnTab,
                                scrollTop = that.$menuInner[0].scrollTop,
                                isVirtual = that.isVirtual(),
                                position0 = isVirtual === true ? that.selectpicker.view.position0 : 0;

                            isActive = that.$newElement.hasClass(classNames.SHOW);

                            if (
                                !isActive &&
                                (
                                    isArrowKey ||
                                    (e.which >= 48 && e.which <= 57) ||
                                    (e.which >= 96 && e.which <= 105) ||
                                    (e.which >= 65 && e.which <= 90)
                                )
                            ) {
                                that.$button.trigger('click.bs.dropdown.data-api');

                                if (that.options.liveSearch) {
                                    that.$searchbox.trigger('focus');
                                    return;
                                }
                            }

                            if (e.which === keyCodes.ESCAPE && isActive) {
                                e.preventDefault();
                                that.$button.trigger('click.bs.dropdown.data-api').trigger('focus');
                            }

                            if (isArrowKey) { // if up or down
                                if (!$items.length) return;

                                liActive = that.selectpicker.main.elements[that.activeIndex];
                                index = liActive ? Array.prototype.indexOf.call(liActive.parentElement.children, liActive) : -1;

                                if (index !== -1) {
                                    that.defocusItem(liActive);
                                }

                                if (e.which === keyCodes.ARROW_UP) { // up
                                    if (index !== -1) index--;
                                    if (index + position0 < 0) index += $items.length;

                                    if (!that.selectpicker.view.canHighlight[index + position0]) {
                                        index = that.selectpicker.view.canHighlight.slice(0, index + position0).lastIndexOf(true) - position0;
                                        if (index === -1) index = $items.length - 1;
                                    }
                                } else if (e.which === keyCodes.ARROW_DOWN || downOnTab) { // down
                                    index++;
                                    if (index + position0 >= that.selectpicker.view.canHighlight.length) index = 0;

                                    if (!that.selectpicker.view.canHighlight[index + position0]) {
                                        index = index + 1 + that.selectpicker.view.canHighlight.slice(index + position0 + 1).indexOf(true);
                                    }
                                }

                                e.preventDefault();

                                var liActiveIndex = position0 + index;

                                if (e.which === keyCodes.ARROW_UP) { // up
                                    // scroll to bottom and highlight last option
                                    if (position0 === 0 && index === $items.length - 1) {
                                        that.$menuInner[0].scrollTop = that.$menuInner[0].scrollHeight;

                                        liActiveIndex = that.selectpicker.current.elements.length - 1;
                                    } else {
                                        activeLi = that.selectpicker.current.data[liActiveIndex];
                                        offset = activeLi.position - activeLi.height;

                                        updateScroll = offset < scrollTop;
                                    }
                                } else if (e.which === keyCodes.ARROW_DOWN || downOnTab) { // down
                                    // scroll to top and highlight first option
                                    if (index === 0) {
                                        that.$menuInner[0].scrollTop = 0;

                                        liActiveIndex = 0;
                                    } else {
                                        activeLi = that.selectpicker.current.data[liActiveIndex];
                                        offset = activeLi.position - that.sizeInfo.menuInnerHeight;

                                        updateScroll = offset > scrollTop;
                                    }
                                }

                                liActive = that.selectpicker.current.elements[liActiveIndex];

                                that.activeIndex = that.selectpicker.current.data[liActiveIndex].index;

                                that.focusItem(liActive);

                                that.selectpicker.view.currentActive = liActive;

                                if (updateScroll) that.$menuInner[0].scrollTop = offset;

                                if (that.options.liveSearch) {
                                    that.$searchbox.trigger('focus');
                                } else {
                                    $this.trigger('focus');
                                }
                            } else if (
                                (!$this.is('input') && !REGEXP_TAB_OR_ESCAPE.test(e.which)) ||
                                (e.which === keyCodes.SPACE && that.selectpicker.keydown.keyHistory)
                            ) {
                                var searchMatch,
                                    matches = [],
                                    keyHistory;

                                e.preventDefault();

                                that.selectpicker.keydown.keyHistory += keyCodeMap[e.which];

                                if (that.selectpicker.keydown.resetKeyHistory.cancel) clearTimeout(that.selectpicker.keydown.resetKeyHistory.cancel);
                                that.selectpicker.keydown.resetKeyHistory.cancel = that.selectpicker.keydown.resetKeyHistory.start();

                                keyHistory = that.selectpicker.keydown.keyHistory;

                                // if all letters are the same, set keyHistory to just the first character when searching
                                if (/^(.)\1+$/.test(keyHistory)) {
                                    keyHistory = keyHistory.charAt(0);
                                }

                                // find matches
                                for (var i = 0; i < that.selectpicker.current.data.length; i++) {
                                    var li = that.selectpicker.current.data[i],
                                        hasMatch;

                                    hasMatch = stringSearch(li, keyHistory, 'startsWith', true);

                                    if (hasMatch && that.selectpicker.view.canHighlight[i]) {
                                        matches.push(li.index);
                                    }
                                }

                                if (matches.length) {
                                    var matchIndex = 0;

                                    $items.removeClass('active').find('a').removeClass('active');

                                    // either only one key has been pressed or they are all the same key
                                    if (keyHistory.length === 1) {
                                        matchIndex = matches.indexOf(that.activeIndex);

                                        if (matchIndex === -1 || matchIndex === matches.length - 1) {
                                            matchIndex = 0;
                                        } else {
                                            matchIndex++;
                                        }
                                    }

                                    searchMatch = matches[matchIndex];

                                    activeLi = that.selectpicker.main.data[searchMatch];

                                    if (scrollTop - activeLi.position > 0) {
                                        offset = activeLi.position - activeLi.height;
                                        updateScroll = true;
                                    } else {
                                        offset = activeLi.position - that.sizeInfo.menuInnerHeight;
                                        // if the option is already visible at the current scroll position, just keep it the same
                                        updateScroll = activeLi.position > scrollTop + that.sizeInfo.menuInnerHeight;
                                    }

                                    liActive = that.selectpicker.main.elements[searchMatch];

                                    that.activeIndex = matches[matchIndex];

                                    that.focusItem(liActive);

                                    if (liActive) liActive.firstChild.focus();

                                    if (updateScroll) that.$menuInner[0].scrollTop = offset;

                                    $this.trigger('focus');
                                }
                            }

                            // Select focused option if "Enter", "Spacebar" or "Tab" (when selectOnTab is true) are pressed inside the menu.
                            if (
                                isActive &&
                                (
                                    (e.which === keyCodes.SPACE && !that.selectpicker.keydown.keyHistory) ||
                                    e.which === keyCodes.ENTER ||
                                    (e.which === keyCodes.TAB && that.options.selectOnTab)
                                )
                            ) {
                                if (e.which !== keyCodes.SPACE) e.preventDefault();

                                if (!that.options.liveSearch || e.which !== keyCodes.SPACE) {
                                    that.$menuInner.find('.active a').trigger('click', true); // retain active class
                                    $this.trigger('focus');

                                    if (!that.options.liveSearch) {
                                        // Prevent screen from scrolling if the user hits the spacebar
                                        e.preventDefault();
                                        // Fixes spacebar selection of dropdown items in FF & IE
                                        $(document).data('spaceSelect', true);
                                    }
                                }
                            }
                        },

                        mobile: function () {
                            this.$element[0].classList.add('mobile-device');
                        },

                        refresh: function () {
                            // update options if data attributes have been changed
                            var config = $.extend({}, this.options, this.$element.data());
                            this.options = config;

                            this.checkDisabled();
                            this.setStyle();
                            this.render();
                            this.createLi();
                            this.setWidth();

                            this.setSize(true);

                            this.$element.trigger('refreshed' + EVENT_KEY);
                        },

                        hide: function () {
                            this.$newElement.hide();
                        },

                        show: function () {
                            this.$newElement.show();
                        },

                        remove: function () {
                            this.$newElement.remove();
                            this.$element.remove();
                        },

                        destroy: function () {
                            this.$newElement.before(this.$element).remove();

                            if (this.$bsContainer) {
                                this.$bsContainer.remove();
                            } else {
                                this.$menu.remove();
                            }

                            this.$element
                                .off(EVENT_KEY)
                                .removeData('selectpicker')
                                .removeClass('bs-select-hidden selectpicker');

                            $(window).off(EVENT_KEY + '.' + this.selectId);
                        }
                    };

                    // SELECTPICKER PLUGIN DEFINITION
                    // ==============================
                    function Plugin (option) {
                        // get the args of the outer function..
                        var args = arguments;
                        // The arguments of the function are explicitly re-defined from the argument list, because the shift causes them
                        // to get lost/corrupted in android 2.3 and IE9 #715 #775
                        var _option = option;

                        [].shift.apply(args);

                        // if the version was not set successfully
                        if (!version.success) {
                            // try to retreive it again
                            try {
                                version.full = ($.fn.dropdown.Constructor.VERSION || '').split(' ')[0].split('.');
                            } catch (err) {
                                // fall back to use BootstrapVersion if set
                                if (Selectpicker.BootstrapVersion) {
                                    version.full = Selectpicker.BootstrapVersion.split(' ')[0].split('.');
                                } else {
                                    version.full = [version.major, '0', '0'];

                                    console.warn(
                                        'There was an issue retrieving Bootstrap\'s version. ' +
                                        'Ensure Bootstrap is being loaded before bootstrap-select and there is no namespace collision. ' +
                                        'If loading Bootstrap asynchronously, the version may need to be manually specified via $.fn.selectpicker.Constructor.BootstrapVersion.',
                                        err
                                    );
                                }
                            }

                            version.major = version.full[0];
                            version.success = true;
                        }

                        if (version.major === '4') {
                            // some defaults need to be changed if using Bootstrap 4
                            // check to see if they have already been manually changed before forcing them to update
                            var toUpdate = [];

                            if (Selectpicker.DEFAULTS.style === classNames.BUTTONCLASS) toUpdate.push({ name: 'style', className: 'BUTTONCLASS' });
                            if (Selectpicker.DEFAULTS.iconBase === classNames.ICONBASE) toUpdate.push({ name: 'iconBase', className: 'ICONBASE' });
                            if (Selectpicker.DEFAULTS.tickIcon === classNames.TICKICON) toUpdate.push({ name: 'tickIcon', className: 'TICKICON' });

                            classNames.DIVIDER = 'dropdown-divider';
                            classNames.SHOW = 'show';
                            classNames.BUTTONCLASS = 'btn-light';
                            classNames.POPOVERHEADER = 'popover-header';
                            classNames.ICONBASE = '';
                            classNames.TICKICON = 'bs-ok-default';

                            for (var i = 0; i < toUpdate.length; i++) {
                                var option = toUpdate[i];
                                Selectpicker.DEFAULTS[option.name] = classNames[option.className];
                            }
                        }

                        var value;
                        var chain = this.each(function () {
                            var $this = $(this);
                            if ($this.is('select')) {
                                var data = $this.data('selectpicker'),
                                    options = typeof _option == 'object' && _option;

                                if (!data) {
                                    var dataAttributes = $this.data();

                                    for (var dataAttr in dataAttributes) {
                                        if (dataAttributes.hasOwnProperty(dataAttr) && $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1) {
                                            delete dataAttributes[dataAttr];
                                        }
                                    }

                                    var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, dataAttributes, options);
                                    config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), dataAttributes.template, options.template);
                                    $this.data('selectpicker', (data = new Selectpicker(this, config)));
                                } else if (options) {
                                    for (var i in options) {
                                        if (options.hasOwnProperty(i)) {
                                            data.options[i] = options[i];
                                        }
                                    }
                                }

                                if (typeof _option == 'string') {
                                    if (data[_option] instanceof Function) {
                                        value = data[_option].apply(data, args);
                                    } else {
                                        value = data.options[_option];
                                    }
                                }
                            }
                        });

                        if (typeof value !== 'undefined') {
                            // noinspection JSUnusedAssignment
                            return value;
                        } else {
                            return chain;
                        }
                    }

                    var old = $.fn.selectpicker;
                    $.fn.selectpicker = Plugin;
                    $.fn.selectpicker.Constructor = Selectpicker;

                    // SELECTPICKER NO CONFLICT
                    // ========================
                    $.fn.selectpicker.noConflict = function () {
                        $.fn.selectpicker = old;
                        return this;
                    };

                    $(document)
                        .off('keydown.bs.dropdown.data-api')
                        .on('keydown' + EVENT_KEY, '.bootstrap-select [data-toggle="dropdown"], .bootstrap-select [role="listbox"], .bootstrap-select .bs-searchbox input', Selectpicker.prototype.keydown)
                        .on('focusin.modal', '.bootstrap-select [data-toggle="dropdown"], .bootstrap-select [role="listbox"], .bootstrap-select .bs-searchbox input', function (e) {
                            e.stopPropagation();
                        });

                    // SELECTPICKER DATA-API
                    // =====================
                    $(window).on('load' + EVENT_KEY + '.data-api', function () {
                        $('.selectpicker').each(function () {
                            var $selectpicker = $(this);
                            Plugin.call($selectpicker, $selectpicker.data());
                        })
                    });
                })(jQuery);


            }));
//# sourceMappingURL=bootstrap-select.js.map

            /***/ }),

        /***/ "./node_modules/bootstrap-select/dist/js/i18n/defaults-ua_UA.min.js":
        /*!**************************************************************************!*\
  !*** ./node_modules/bootstrap-select/dist/js/i18n/defaults-ua_UA.min.js ***!
  \**************************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * Bootstrap-select v1.13.10 (https://developer.snapappointments.com/bootstrap-select)
 *
 * Copyright 2012-2019 SnapAppointments, LLC
 * Licensed under MIT (https://github.com/snapappointments/bootstrap-select/blob/master/LICENSE)
 */

            !function(e,t){void 0===e&&void 0!==window&&(e=window), true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(e){return t(e)}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined}(this,function(e){e.fn.selectpicker.defaults={noneSelectedText:"\u041d\u0456\u0447\u043e\u0433\u043e \u043d\u0435 \u0432\u0438\u0431\u0440\u0430\u043d\u043e",noneResultsText:"\u0417\u0431\u0456\u0433\u0456\u0432 \u043d\u0435 \u0437\u043d\u0430\u0439\u0434\u0435\u043d\u043e {0}",countSelectedText:"\u0412\u0438\u0431\u0440\u0430\u043d\u043e {0} \u0456\u0437 {1}",maxOptionsText:["\u0414\u043e\u0441\u044f\u0433\u043d\u0443\u0442\u0430 \u043c\u0435\u0436\u0430 ({n} {var} \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c)","\u0414\u043e\u0441\u044f\u0433\u043d\u0443\u0442\u0430 \u043c\u0435\u0436\u0430 \u0432 \u0433\u0440\u0443\u043f\u0456 ({n} {var} \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c)",["items","item"]],multipleSeparator:", ",selectAllText:"\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u0432\u0441\u0435",deselectAllText:"\u0421\u043a\u0430\u0441\u0443\u0432\u0430\u0442\u0438 \u0432\u0438\u0431\u0456\u0440 \u0443\u0441\u0456"}});

            /***/ }),

        /***/ "./node_modules/bootstrap-tagsinput/dist/bootstrap-tagsinput.js":
        /*!**********************************************************************!*\
  !*** ./node_modules/bootstrap-tagsinput/dist/bootstrap-tagsinput.js ***!
  \**********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery) {(function ($) {
                "use strict";

                var defaultOptions = {
                    tagClass: function(item) {
                        return 'label label-info';
                    },
                    itemValue: function(item) {
                        return item ? item.toString() : item;
                    },
                    itemText: function(item) {
                        return this.itemValue(item);
                    },
                    itemTitle: function(item) {
                        return null;
                    },
                    freeInput: true,
                    addOnBlur: true,
                    maxTags: undefined,
                    maxChars: undefined,
                    confirmKeys: [13, 44],
                    delimiter: ',',
                    delimiterRegex: null,
                    cancelConfirmKeysOnEmpty: false,
                    onTagExists: function(item, $tag) {
                        $tag.hide().fadeIn();
                    },
                    trimValue: false,
                    allowDuplicates: false
                };

                /**
                 * Constructor function
                 */
                function TagsInput(element, options) {
                    this.isInit = true;
                    this.itemsArray = [];

                    this.$element = $(element);
                    this.$element.hide();

                    this.isSelect = (element.tagName === 'SELECT');
                    this.multiple = (this.isSelect && element.hasAttribute('multiple'));
                    this.objectItems = options && options.itemValue;
                    this.placeholderText = element.hasAttribute('placeholder') ? this.$element.attr('placeholder') : '';
                    this.inputSize = Math.max(1, this.placeholderText.length);

                    this.$container = $('<div class="bootstrap-tagsinput"></div>');
                    this.$input = $('<input type="text" placeholder="' + this.placeholderText + '"/>').appendTo(this.$container);

                    this.$element.before(this.$container);

                    this.build(options);
                    this.isInit = false;
                }

                TagsInput.prototype = {
                    constructor: TagsInput,

                    /**
                     * Adds the given item as a new tag. Pass true to dontPushVal to prevent
                     * updating the elements val()
                     */
                    add: function(item, dontPushVal, options) {
                        var self = this;

                        if (self.options.maxTags && self.itemsArray.length >= self.options.maxTags)
                            return;

                        // Ignore falsey values, except false
                        if (item !== false && !item)
                            return;

                        // Trim value
                        if (typeof item === "string" && self.options.trimValue) {
                            item = $.trim(item);
                        }

                        // Throw an error when trying to add an object while the itemValue option was not set
                        if (typeof item === "object" && !self.objectItems)
                            throw("Can't add objects when itemValue option is not set");

                        // Ignore strings only containg whitespace
                        if (item.toString().match(/^\s*$/))
                            return;

                        // If SELECT but not multiple, remove current tag
                        if (self.isSelect && !self.multiple && self.itemsArray.length > 0)
                            self.remove(self.itemsArray[0]);

                        if (typeof item === "string" && this.$element[0].tagName === 'INPUT') {
                            var delimiter = (self.options.delimiterRegex) ? self.options.delimiterRegex : self.options.delimiter;
                            var items = item.split(delimiter);
                            if (items.length > 1) {
                                for (var i = 0; i < items.length; i++) {
                                    this.add(items[i], true);
                                }

                                if (!dontPushVal)
                                    self.pushVal();
                                return;
                            }
                        }

                        var itemValue = self.options.itemValue(item),
                            itemText = self.options.itemText(item),
                            tagClass = self.options.tagClass(item),
                            itemTitle = self.options.itemTitle(item);

                        // Ignore items allready added
                        var existing = $.grep(self.itemsArray, function(item) { return self.options.itemValue(item) === itemValue; } )[0];
                        if (existing && !self.options.allowDuplicates) {
                            // Invoke onTagExists
                            if (self.options.onTagExists) {
                                var $existingTag = $(".tag", self.$container).filter(function() { return $(this).data("item") === existing; });
                                self.options.onTagExists(item, $existingTag);
                            }
                            return;
                        }

                        // if length greater than limit
                        if (self.items().toString().length + item.length + 1 > self.options.maxInputLength)
                            return;

                        // raise beforeItemAdd arg
                        var beforeItemAddEvent = $.Event('beforeItemAdd', { item: item, cancel: false, options: options});
                        self.$element.trigger(beforeItemAddEvent);
                        if (beforeItemAddEvent.cancel)
                            return;

                        // register item in internal array and map
                        self.itemsArray.push(item);

                        // add a tag element

                        var $tag = $('<span class="tag ' + htmlEncode(tagClass) + (itemTitle !== null ? ('" title="' + itemTitle) : '') + '">' + htmlEncode(itemText) + '<span data-role="remove"></span></span>');
                        $tag.data('item', item);
                        self.findInputWrapper().before($tag);
                        $tag.after(' ');

                        // Check to see if the tag exists in its raw or uri-encoded form
                        var optionExists = (
                            $('option[value="' + encodeURIComponent(itemValue) + '"]', self.$element).length ||
                            $('option[value="' + htmlEncode(itemValue) + '"]', self.$element).length
                        );

                        // add <option /> if item represents a value not present in one of the <select />'s options
                        if (self.isSelect && !optionExists) {
                            var $option = $('<option selected>' + htmlEncode(itemText) + '</option>');
                            $option.data('item', item);
                            $option.attr('value', itemValue);
                            self.$element.append($option);
                        }

                        if (!dontPushVal)
                            self.pushVal();

                        // Add class when reached maxTags
                        if (self.options.maxTags === self.itemsArray.length || self.items().toString().length === self.options.maxInputLength)
                            self.$container.addClass('bootstrap-tagsinput-max');

                        // If using typeahead, once the tag has been added, clear the typeahead value so it does not stick around in the input.
                        if ($('.typeahead, .twitter-typeahead', self.$container).length) {
                            self.$input.typeahead('val', '');
                        }

                        if (this.isInit) {
                            self.$element.trigger($.Event('itemAddedOnInit', { item: item, options: options }));
                        } else {
                            self.$element.trigger($.Event('itemAdded', { item: item, options: options }));
                        }
                    },

                    /**
                     * Removes the given item. Pass true to dontPushVal to prevent updating the
                     * elements val()
                     */
                    remove: function(item, dontPushVal, options) {
                        var self = this;

                        if (self.objectItems) {
                            if (typeof item === "object")
                                item = $.grep(self.itemsArray, function(other) { return self.options.itemValue(other) ==  self.options.itemValue(item); } );
                            else
                                item = $.grep(self.itemsArray, function(other) { return self.options.itemValue(other) ==  item; } );

                            item = item[item.length-1];
                        }

                        if (item) {
                            var beforeItemRemoveEvent = $.Event('beforeItemRemove', { item: item, cancel: false, options: options });
                            self.$element.trigger(beforeItemRemoveEvent);
                            if (beforeItemRemoveEvent.cancel)
                                return;

                            $('.tag', self.$container).filter(function() { return $(this).data('item') === item; }).remove();
                            $('option', self.$element).filter(function() { return $(this).data('item') === item; }).remove();
                            if($.inArray(item, self.itemsArray) !== -1)
                                self.itemsArray.splice($.inArray(item, self.itemsArray), 1);
                        }

                        if (!dontPushVal)
                            self.pushVal();

                        // Remove class when reached maxTags
                        if (self.options.maxTags > self.itemsArray.length)
                            self.$container.removeClass('bootstrap-tagsinput-max');

                        self.$element.trigger($.Event('itemRemoved',  { item: item, options: options }));
                    },

                    /**
                     * Removes all items
                     */
                    removeAll: function() {
                        var self = this;

                        $('.tag', self.$container).remove();
                        $('option', self.$element).remove();

                        while(self.itemsArray.length > 0)
                            self.itemsArray.pop();

                        self.pushVal();
                    },

                    /**
                     * Refreshes the tags so they match the text/value of their corresponding
                     * item.
                     */
                    refresh: function() {
                        var self = this;
                        $('.tag', self.$container).each(function() {
                            var $tag = $(this),
                                item = $tag.data('item'),
                                itemValue = self.options.itemValue(item),
                                itemText = self.options.itemText(item),
                                tagClass = self.options.tagClass(item);

                            // Update tag's class and inner text
                            $tag.attr('class', null);
                            $tag.addClass('tag ' + htmlEncode(tagClass));
                            $tag.contents().filter(function() {
                                return this.nodeType == 3;
                            })[0].nodeValue = htmlEncode(itemText);

                            if (self.isSelect) {
                                var option = $('option', self.$element).filter(function() { return $(this).data('item') === item; });
                                option.attr('value', itemValue);
                            }
                        });
                    },

                    /**
                     * Returns the items added as tags
                     */
                    items: function() {
                        return this.itemsArray;
                    },

                    /**
                     * Assembly value by retrieving the value of each item, and set it on the
                     * element.
                     */
                    pushVal: function() {
                        var self = this,
                            val = $.map(self.items(), function(item) {
                                return self.options.itemValue(item).toString();
                            });

                        self.$element.val(val, true).trigger('change');
                    },

                    /**
                     * Initializes the tags input behaviour on the element
                     */
                    build: function(options) {
                        var self = this;

                        self.options = $.extend({}, defaultOptions, options);
                        // When itemValue is set, freeInput should always be false
                        if (self.objectItems)
                            self.options.freeInput = false;

                        makeOptionItemFunction(self.options, 'itemValue');
                        makeOptionItemFunction(self.options, 'itemText');
                        makeOptionFunction(self.options, 'tagClass');

                        // Typeahead Bootstrap version 2.3.2
                        if (self.options.typeahead) {
                            var typeahead = self.options.typeahead || {};

                            makeOptionFunction(typeahead, 'source');

                            self.$input.typeahead($.extend({}, typeahead, {
                                source: function (query, process) {
                                    function processItems(items) {
                                        var texts = [];

                                        for (var i = 0; i < items.length; i++) {
                                            var text = self.options.itemText(items[i]);
                                            map[text] = items[i];
                                            texts.push(text);
                                        }
                                        process(texts);
                                    }

                                    this.map = {};
                                    var map = this.map,
                                        data = typeahead.source(query);

                                    if ($.isFunction(data.success)) {
                                        // support for Angular callbacks
                                        data.success(processItems);
                                    } else if ($.isFunction(data.then)) {
                                        // support for Angular promises
                                        data.then(processItems);
                                    } else {
                                        // support for functions and jquery promises
                                        $.when(data)
                                            .then(processItems);
                                    }
                                },
                                updater: function (text) {
                                    self.add(this.map[text]);
                                    return this.map[text];
                                },
                                matcher: function (text) {
                                    return (text.toLowerCase().indexOf(this.query.trim().toLowerCase()) !== -1);
                                },
                                sorter: function (texts) {
                                    return texts.sort();
                                },
                                highlighter: function (text) {
                                    var regex = new RegExp( '(' + this.query + ')', 'gi' );
                                    return text.replace( regex, "<strong>$1</strong>" );
                                }
                            }));
                        }

                        // typeahead.js
                        if (self.options.typeaheadjs) {
                            var typeaheadConfig = null;
                            var typeaheadDatasets = {};

                            // Determine if main configurations were passed or simply a dataset
                            var typeaheadjs = self.options.typeaheadjs;
                            if ($.isArray(typeaheadjs)) {
                                typeaheadConfig = typeaheadjs[0];
                                typeaheadDatasets = typeaheadjs[1];
                            } else {
                                typeaheadDatasets = typeaheadjs;
                            }

                            self.$input.typeahead(typeaheadConfig, typeaheadDatasets).on('typeahead:selected', $.proxy(function (obj, datum) {
                                if (typeaheadDatasets.valueKey)
                                    self.add(datum[typeaheadDatasets.valueKey]);
                                else
                                    self.add(datum);
                                self.$input.typeahead('val', '');
                            }, self));
                        }

                        self.$container.on('click', $.proxy(function(event) {
                            if (! self.$element.attr('disabled')) {
                                self.$input.removeAttr('disabled');
                            }
                            self.$input.focus();
                        }, self));

                        if (self.options.addOnBlur && self.options.freeInput) {
                            self.$input.on('focusout', $.proxy(function(event) {
                                // HACK: only process on focusout when no typeahead opened, to
                                //       avoid adding the typeahead text as tag
                                if ($('.typeahead, .twitter-typeahead', self.$container).length === 0) {
                                    self.add(self.$input.val());
                                    self.$input.val('');
                                }
                            }, self));
                        }


                        self.$container.on('keydown', 'input', $.proxy(function(event) {
                            var $input = $(event.target),
                                $inputWrapper = self.findInputWrapper();

                            if (self.$element.attr('disabled')) {
                                self.$input.attr('disabled', 'disabled');
                                return;
                            }

                            switch (event.which) {
                                // BACKSPACE
                                case 8:
                                    if (doGetCaretPosition($input[0]) === 0) {
                                        var prev = $inputWrapper.prev();
                                        if (prev.length) {
                                            self.remove(prev.data('item'));
                                        }
                                    }
                                    break;

                                // DELETE
                                case 46:
                                    if (doGetCaretPosition($input[0]) === 0) {
                                        var next = $inputWrapper.next();
                                        if (next.length) {
                                            self.remove(next.data('item'));
                                        }
                                    }
                                    break;

                                // LEFT ARROW
                                case 37:
                                    // Try to move the input before the previous tag
                                    var $prevTag = $inputWrapper.prev();
                                    if ($input.val().length === 0 && $prevTag[0]) {
                                        $prevTag.before($inputWrapper);
                                        $input.focus();
                                    }
                                    break;
                                // RIGHT ARROW
                                case 39:
                                    // Try to move the input after the next tag
                                    var $nextTag = $inputWrapper.next();
                                    if ($input.val().length === 0 && $nextTag[0]) {
                                        $nextTag.after($inputWrapper);
                                        $input.focus();
                                    }
                                    break;
                                default:
                                // ignore
                            }

                            // Reset internal input's size
                            var textLength = $input.val().length,
                                wordSpace = Math.ceil(textLength / 5),
                                size = textLength + wordSpace + 1;
                            $input.attr('size', Math.max(this.inputSize, $input.val().length));
                        }, self));

                        self.$container.on('keypress', 'input', $.proxy(function(event) {
                            var $input = $(event.target);

                            if (self.$element.attr('disabled')) {
                                self.$input.attr('disabled', 'disabled');
                                return;
                            }

                            var text = $input.val(),
                                maxLengthReached = self.options.maxChars && text.length >= self.options.maxChars;
                            if (self.options.freeInput && (keyCombinationInList(event, self.options.confirmKeys) || maxLengthReached)) {
                                // Only attempt to add a tag if there is data in the field
                                if (text.length !== 0) {
                                    self.add(maxLengthReached ? text.substr(0, self.options.maxChars) : text);
                                    $input.val('');
                                }

                                // If the field is empty, let the event triggered fire as usual
                                if (self.options.cancelConfirmKeysOnEmpty === false) {
                                    event.preventDefault();
                                }
                            }

                            // Reset internal input's size
                            var textLength = $input.val().length,
                                wordSpace = Math.ceil(textLength / 5),
                                size = textLength + wordSpace + 1;
                            $input.attr('size', Math.max(this.inputSize, $input.val().length));
                        }, self));

                        // Remove icon clicked
                        self.$container.on('click', '[data-role=remove]', $.proxy(function(event) {
                            if (self.$element.attr('disabled')) {
                                return;
                            }
                            self.remove($(event.target).closest('.tag').data('item'));
                        }, self));

                        // Only add existing value as tags when using strings as tags
                        if (self.options.itemValue === defaultOptions.itemValue) {
                            if (self.$element[0].tagName === 'INPUT') {
                                self.add(self.$element.val());
                            } else {
                                $('option', self.$element).each(function() {
                                    self.add($(this).attr('value'), true);
                                });
                            }
                        }
                    },

                    /**
                     * Removes all tagsinput behaviour and unregsiter all event handlers
                     */
                    destroy: function() {
                        var self = this;

                        // Unbind events
                        self.$container.off('keypress', 'input');
                        self.$container.off('click', '[role=remove]');

                        self.$container.remove();
                        self.$element.removeData('tagsinput');
                        self.$element.show();
                    },

                    /**
                     * Sets focus on the tagsinput
                     */
                    focus: function() {
                        this.$input.focus();
                    },

                    /**
                     * Returns the internal input element
                     */
                    input: function() {
                        return this.$input;
                    },

                    /**
                     * Returns the element which is wrapped around the internal input. This
                     * is normally the $container, but typeahead.js moves the $input element.
                     */
                    findInputWrapper: function() {
                        var elt = this.$input[0],
                            container = this.$container[0];
                        while(elt && elt.parentNode !== container)
                            elt = elt.parentNode;

                        return $(elt);
                    }
                };

                /**
                 * Register JQuery plugin
                 */
                $.fn.tagsinput = function(arg1, arg2, arg3) {
                    var results = [];

                    this.each(function() {
                        var tagsinput = $(this).data('tagsinput');
                        // Initialize a new tags input
                        if (!tagsinput) {
                            tagsinput = new TagsInput(this, arg1);
                            $(this).data('tagsinput', tagsinput);
                            results.push(tagsinput);

                            if (this.tagName === 'SELECT') {
                                $('option', $(this)).attr('selected', 'selected');
                            }

                            // Init tags from $(this).val()
                            $(this).val($(this).val());
                        } else if (!arg1 && !arg2) {
                            // tagsinput already exists
                            // no function, trying to init
                            results.push(tagsinput);
                        } else if(tagsinput[arg1] !== undefined) {
                            // Invoke function on existing tags input
                            if(tagsinput[arg1].length === 3 && arg3 !== undefined){
                                var retVal = tagsinput[arg1](arg2, null, arg3);
                            }else{
                                var retVal = tagsinput[arg1](arg2);
                            }
                            if (retVal !== undefined)
                                results.push(retVal);
                        }
                    });

                    if ( typeof arg1 == 'string') {
                        // Return the results from the invoked function calls
                        return results.length > 1 ? results : results[0];
                    } else {
                        return results;
                    }
                };

                $.fn.tagsinput.Constructor = TagsInput;

                /**
                 * Most options support both a string or number as well as a function as
                 * option value. This function makes sure that the option with the given
                 * key in the given options is wrapped in a function
                 */
                function makeOptionItemFunction(options, key) {
                    if (typeof options[key] !== 'function') {
                        var propertyName = options[key];
                        options[key] = function(item) { return item[propertyName]; };
                    }
                }
                function makeOptionFunction(options, key) {
                    if (typeof options[key] !== 'function') {
                        var value = options[key];
                        options[key] = function() { return value; };
                    }
                }
                /**
                 * HtmlEncodes the given value
                 */
                var htmlEncodeContainer = $('<div />');
                function htmlEncode(value) {
                    if (value) {
                        return htmlEncodeContainer.text(value).html();
                    } else {
                        return '';
                    }
                }

                /**
                 * Returns the position of the caret in the given input field
                 * http://flightschool.acylt.com/devnotes/caret-position-woes/
                 */
                function doGetCaretPosition(oField) {
                    var iCaretPos = 0;
                    if (document.selection) {
                        oField.focus ();
                        var oSel = document.selection.createRange();
                        oSel.moveStart ('character', -oField.value.length);
                        iCaretPos = oSel.text.length;
                    } else if (oField.selectionStart || oField.selectionStart == '0') {
                        iCaretPos = oField.selectionStart;
                    }
                    return (iCaretPos);
                }

                /**
                 * Returns boolean indicates whether user has pressed an expected key combination.
                 * @param object keyPressEvent: JavaScript event object, refer
                 *     http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
                 * @param object lookupList: expected key combinations, as in:
                 *     [13, {which: 188, shiftKey: true}]
                 */
                function keyCombinationInList(keyPressEvent, lookupList) {
                    var found = false;
                    $.each(lookupList, function (index, keyCombination) {
                        if (typeof (keyCombination) === 'number' && keyPressEvent.which === keyCombination) {
                            found = true;
                            return false;
                        }

                        if (keyPressEvent.which === keyCombination.which) {
                            var alt = !keyCombination.hasOwnProperty('altKey') || keyPressEvent.altKey === keyCombination.altKey,
                                shift = !keyCombination.hasOwnProperty('shiftKey') || keyPressEvent.shiftKey === keyCombination.shiftKey,
                                ctrl = !keyCombination.hasOwnProperty('ctrlKey') || keyPressEvent.ctrlKey === keyCombination.ctrlKey;
                            if (alt && shift && ctrl) {
                                found = true;
                                return false;
                            }
                        }
                    });

                    return found;
                }

                /**
                 * Initialize tagsinput behaviour on inputs and selects which have
                 * data-role=tagsinput
                 */
                $(function() {
                    $("input[data-role=tagsinput], select[multiple][data-role=tagsinput]").tagsinput();
                });
            })(__webpack_provided_window_dot_jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/bootstrap/dist/js/npm.js":
        /*!***********************************************!*\
  !*** ./node_modules/bootstrap/dist/js/npm.js ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.
            __webpack_require__(/*! ../../js/transition.js */ "./node_modules/bootstrap/js/transition.js")
            __webpack_require__(/*! ../../js/alert.js */ "./node_modules/bootstrap/js/alert.js")
            __webpack_require__(/*! ../../js/button.js */ "./node_modules/bootstrap/js/button.js")
            __webpack_require__(/*! ../../js/carousel.js */ "./node_modules/bootstrap/js/carousel.js")
            __webpack_require__(/*! ../../js/collapse.js */ "./node_modules/bootstrap/js/collapse.js")
            __webpack_require__(/*! ../../js/dropdown.js */ "./node_modules/bootstrap/js/dropdown.js")
            __webpack_require__(/*! ../../js/modal.js */ "./node_modules/bootstrap/js/modal.js")
            __webpack_require__(/*! ../../js/tooltip.js */ "./node_modules/bootstrap/js/tooltip.js")
            __webpack_require__(/*! ../../js/popover.js */ "./node_modules/bootstrap/js/popover.js")
            __webpack_require__(/*! ../../js/scrollspy.js */ "./node_modules/bootstrap/js/scrollspy.js")
            __webpack_require__(/*! ../../js/tab.js */ "./node_modules/bootstrap/js/tab.js")
            __webpack_require__(/*! ../../js/affix.js */ "./node_modules/bootstrap/js/affix.js")

            /***/ }),

        /***/ "./node_modules/bootstrap/js/affix.js":
        /*!********************************************!*\
  !*** ./node_modules/bootstrap/js/affix.js ***!
  \********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
 * Bootstrap: affix.js v3.3.6
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


                +function ($) {
                    'use strict';

                    // AFFIX CLASS DEFINITION
                    // ======================

                    var Affix = function (element, options) {
                        this.options = $.extend({}, Affix.DEFAULTS, options)

                        this.$target = $(this.options.target)
                            .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
                            .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

                        this.$element     = $(element)
                        this.affixed      = null
                        this.unpin        = null
                        this.pinnedOffset = null

                        this.checkPosition()
                    }

                    Affix.VERSION  = '3.3.6'

                    Affix.RESET    = 'affix affix-top affix-bottom'

                    Affix.DEFAULTS = {
                        offset: 0,
                        target: window
                    }

                    Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
                        var scrollTop    = this.$target.scrollTop()
                        var position     = this.$element.offset()
                        var targetHeight = this.$target.height()

                        if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

                        if (this.affixed == 'bottom') {
                            if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
                            return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
                        }

                        var initializing   = this.affixed == null
                        var colliderTop    = initializing ? scrollTop : position.top
                        var colliderHeight = initializing ? targetHeight : height

                        if (offsetTop != null && scrollTop <= offsetTop) return 'top'
                        if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

                        return false
                    }

                    Affix.prototype.getPinnedOffset = function () {
                        if (this.pinnedOffset) return this.pinnedOffset
                        this.$element.removeClass(Affix.RESET).addClass('affix')
                        var scrollTop = this.$target.scrollTop()
                        var position  = this.$element.offset()
                        return (this.pinnedOffset = position.top - scrollTop)
                    }

                    Affix.prototype.checkPositionWithEventLoop = function () {
                        setTimeout($.proxy(this.checkPosition, this), 1)
                    }

                    Affix.prototype.checkPosition = function () {
                        if (!this.$element.is(':visible')) return

                        var height       = this.$element.height()
                        var offset       = this.options.offset
                        var offsetTop    = offset.top
                        var offsetBottom = offset.bottom
                        var scrollHeight = Math.max($(document).height(), $(document.body).height())

                        if (typeof offset != 'object')         offsetBottom = offsetTop = offset
                        if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
                        if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

                        var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

                        if (this.affixed != affix) {
                            if (this.unpin != null) this.$element.css('top', '')

                            var affixType = 'affix' + (affix ? '-' + affix : '')
                            var e         = $.Event(affixType + '.bs.affix')

                            this.$element.trigger(e)

                            if (e.isDefaultPrevented()) return

                            this.affixed = affix
                            this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

                            this.$element
                                .removeClass(Affix.RESET)
                                .addClass(affixType)
                                .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
                        }

                        if (affix == 'bottom') {
                            this.$element.offset({
                                top: scrollHeight - height - offsetBottom
                            })
                        }
                    }


                    // AFFIX PLUGIN DEFINITION
                    // =======================

                    function Plugin(option) {
                        return this.each(function () {
                            var $this   = $(this)
                            var data    = $this.data('bs.affix')
                            var options = typeof option == 'object' && option

                            if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
                            if (typeof option == 'string') data[option]()
                        })
                    }

                    var old = $.fn.affix

                    $.fn.affix             = Plugin
                    $.fn.affix.Constructor = Affix


                    // AFFIX NO CONFLICT
                    // =================

                    $.fn.affix.noConflict = function () {
                        $.fn.affix = old
                        return this
                    }


                    // AFFIX DATA-API
                    // ==============

                    $(window).on('load', function () {
                        $('[data-spy="affix"]').each(function () {
                            var $spy = $(this)
                            var data = $spy.data()

                            data.offset = data.offset || {}

                            if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
                            if (data.offsetTop    != null) data.offset.top    = data.offsetTop

                            Plugin.call($spy, data)
                        })
                    })

                }(jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/bootstrap/js/alert.js":
        /*!********************************************!*\
  !*** ./node_modules/bootstrap/js/alert.js ***!
  \********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
 * Bootstrap: alert.js v3.3.6
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


                +function ($) {
                    'use strict';

                    // ALERT CLASS DEFINITION
                    // ======================

                    var dismiss = '[data-dismiss="alert"]'
                    var Alert   = function (el) {
                        $(el).on('click', dismiss, this.close)
                    }

                    Alert.VERSION = '3.3.6'

                    Alert.TRANSITION_DURATION = 150

                    Alert.prototype.close = function (e) {
                        var $this    = $(this)
                        var selector = $this.attr('data-target')

                        if (!selector) {
                            selector = $this.attr('href')
                            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
                        }

                        var $parent = $(selector)

                        if (e) e.preventDefault()

                        if (!$parent.length) {
                            $parent = $this.closest('.alert')
                        }

                        $parent.trigger(e = $.Event('close.bs.alert'))

                        if (e.isDefaultPrevented()) return

                        $parent.removeClass('in')

                        function removeElement() {
                            // detach from parent, fire event then clean up data
                            $parent.detach().trigger('closed.bs.alert').remove()
                        }

                        $.support.transition && $parent.hasClass('fade') ?
                            $parent
                                .one('bsTransitionEnd', removeElement)
                                .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
                            removeElement()
                    }


                    // ALERT PLUGIN DEFINITION
                    // =======================

                    function Plugin(option) {
                        return this.each(function () {
                            var $this = $(this)
                            var data  = $this.data('bs.alert')

                            if (!data) $this.data('bs.alert', (data = new Alert(this)))
                            if (typeof option == 'string') data[option].call($this)
                        })
                    }

                    var old = $.fn.alert

                    $.fn.alert             = Plugin
                    $.fn.alert.Constructor = Alert


                    // ALERT NO CONFLICT
                    // =================

                    $.fn.alert.noConflict = function () {
                        $.fn.alert = old
                        return this
                    }


                    // ALERT DATA-API
                    // ==============

                    $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

                }(jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/bootstrap/js/button.js":
        /*!*********************************************!*\
  !*** ./node_modules/bootstrap/js/button.js ***!
  \*********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
 * Bootstrap: button.js v3.3.6
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


                +function ($) {
                    'use strict';

                    // BUTTON PUBLIC CLASS DEFINITION
                    // ==============================

                    var Button = function (element, options) {
                        this.$element  = $(element)
                        this.options   = $.extend({}, Button.DEFAULTS, options)
                        this.isLoading = false
                    }

                    Button.VERSION  = '3.3.6'

                    Button.DEFAULTS = {
                        loadingText: 'loading...'
                    }

                    Button.prototype.setState = function (state) {
                        var d    = 'disabled'
                        var $el  = this.$element
                        var val  = $el.is('input') ? 'val' : 'html'
                        var data = $el.data()

                        state += 'Text'

                        if (data.resetText == null) $el.data('resetText', $el[val]())

                        // push to event loop to allow forms to submit
                        setTimeout($.proxy(function () {
                            $el[val](data[state] == null ? this.options[state] : data[state])

                            if (state == 'loadingText') {
                                this.isLoading = true
                                $el.addClass(d).attr(d, d)
                            } else if (this.isLoading) {
                                this.isLoading = false
                                $el.removeClass(d).removeAttr(d)
                            }
                        }, this), 0)
                    }

                    Button.prototype.toggle = function () {
                        var changed = true
                        var $parent = this.$element.closest('[data-toggle="buttons"]')

                        if ($parent.length) {
                            var $input = this.$element.find('input')
                            if ($input.prop('type') == 'radio') {
                                if ($input.prop('checked')) changed = false
                                $parent.find('.active').removeClass('active')
                                this.$element.addClass('active')
                            } else if ($input.prop('type') == 'checkbox') {
                                if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
                                this.$element.toggleClass('active')
                            }
                            $input.prop('checked', this.$element.hasClass('active'))
                            if (changed) $input.trigger('change')
                        } else {
                            this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
                            this.$element.toggleClass('active')
                        }
                    }


                    // BUTTON PLUGIN DEFINITION
                    // ========================

                    function Plugin(option) {
                        return this.each(function () {
                            var $this   = $(this)
                            var data    = $this.data('bs.button')
                            var options = typeof option == 'object' && option

                            if (!data) $this.data('bs.button', (data = new Button(this, options)))

                            if (option == 'toggle') data.toggle()
                            else if (option) data.setState(option)
                        })
                    }

                    var old = $.fn.button

                    $.fn.button             = Plugin
                    $.fn.button.Constructor = Button


                    // BUTTON NO CONFLICT
                    // ==================

                    $.fn.button.noConflict = function () {
                        $.fn.button = old
                        return this
                    }


                    // BUTTON DATA-API
                    // ===============

                    $(document)
                        .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
                            var $btn = $(e.target)
                            if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
                            Plugin.call($btn, 'toggle')
                            if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault()
                        })
                        .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
                            $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
                        })

                }(jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/bootstrap/js/carousel.js":
        /*!***********************************************!*\
  !*** ./node_modules/bootstrap/js/carousel.js ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
 * Bootstrap: carousel.js v3.3.6
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


                +function ($) {
                    'use strict';

                    // CAROUSEL CLASS DEFINITION
                    // =========================

                    var Carousel = function (element, options) {
                        this.$element    = $(element)
                        this.$indicators = this.$element.find('.carousel-indicators')
                        this.options     = options
                        this.paused      = null
                        this.sliding     = null
                        this.interval    = null
                        this.$active     = null
                        this.$items      = null

                        this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

                        this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
                            .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
                            .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
                    }

                    Carousel.VERSION  = '3.3.6'

                    Carousel.TRANSITION_DURATION = 600

                    Carousel.DEFAULTS = {
                        interval: 5000,
                        pause: 'hover',
                        wrap: true,
                        keyboard: true
                    }

                    Carousel.prototype.keydown = function (e) {
                        if (/input|textarea/i.test(e.target.tagName)) return
                        switch (e.which) {
                            case 37: this.prev(); break
                            case 39: this.next(); break
                            default: return
                        }

                        e.preventDefault()
                    }

                    Carousel.prototype.cycle = function (e) {
                        e || (this.paused = false)

                        this.interval && clearInterval(this.interval)

                        this.options.interval
                        && !this.paused
                        && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

                        return this
                    }

                    Carousel.prototype.getItemIndex = function (item) {
                        this.$items = item.parent().children('.item')
                        return this.$items.index(item || this.$active)
                    }

                    Carousel.prototype.getItemForDirection = function (direction, active) {
                        var activeIndex = this.getItemIndex(active)
                        var willWrap = (direction == 'prev' && activeIndex === 0)
                            || (direction == 'next' && activeIndex == (this.$items.length - 1))
                        if (willWrap && !this.options.wrap) return active
                        var delta = direction == 'prev' ? -1 : 1
                        var itemIndex = (activeIndex + delta) % this.$items.length
                        return this.$items.eq(itemIndex)
                    }

                    Carousel.prototype.to = function (pos) {
                        var that        = this
                        var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

                        if (pos > (this.$items.length - 1) || pos < 0) return

                        if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
                        if (activeIndex == pos) return this.pause().cycle()

                        return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
                    }

                    Carousel.prototype.pause = function (e) {
                        e || (this.paused = true)

                        if (this.$element.find('.next, .prev').length && $.support.transition) {
                            this.$element.trigger($.support.transition.end)
                            this.cycle(true)
                        }

                        this.interval = clearInterval(this.interval)

                        return this
                    }

                    Carousel.prototype.next = function () {
                        if (this.sliding) return
                        return this.slide('next')
                    }

                    Carousel.prototype.prev = function () {
                        if (this.sliding) return
                        return this.slide('prev')
                    }

                    Carousel.prototype.slide = function (type, next) {
                        var $active   = this.$element.find('.item.active')
                        var $next     = next || this.getItemForDirection(type, $active)
                        var isCycling = this.interval
                        var direction = type == 'next' ? 'left' : 'right'
                        var that      = this

                        if ($next.hasClass('active')) return (this.sliding = false)

                        var relatedTarget = $next[0]
                        var slideEvent = $.Event('slide.bs.carousel', {
                            relatedTarget: relatedTarget,
                            direction: direction
                        })
                        this.$element.trigger(slideEvent)
                        if (slideEvent.isDefaultPrevented()) return

                        this.sliding = true

                        isCycling && this.pause()

                        if (this.$indicators.length) {
                            this.$indicators.find('.active').removeClass('active')
                            var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
                            $nextIndicator && $nextIndicator.addClass('active')
                        }

                        var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
                        if ($.support.transition && this.$element.hasClass('slide')) {
                            $next.addClass(type)
                            $next[0].offsetWidth // force reflow
                            $active.addClass(direction)
                            $next.addClass(direction)
                            $active
                                .one('bsTransitionEnd', function () {
                                    $next.removeClass([type, direction].join(' ')).addClass('active')
                                    $active.removeClass(['active', direction].join(' '))
                                    that.sliding = false
                                    setTimeout(function () {
                                        that.$element.trigger(slidEvent)
                                    }, 0)
                                })
                                .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
                        } else {
                            $active.removeClass('active')
                            $next.addClass('active')
                            this.sliding = false
                            this.$element.trigger(slidEvent)
                        }

                        isCycling && this.cycle()

                        return this
                    }


                    // CAROUSEL PLUGIN DEFINITION
                    // ==========================

                    function Plugin(option) {
                        return this.each(function () {
                            var $this   = $(this)
                            var data    = $this.data('bs.carousel')
                            var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
                            var action  = typeof option == 'string' ? option : options.slide

                            if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
                            if (typeof option == 'number') data.to(option)
                            else if (action) data[action]()
                            else if (options.interval) data.pause().cycle()
                        })
                    }

                    var old = $.fn.carousel

                    $.fn.carousel             = Plugin
                    $.fn.carousel.Constructor = Carousel


                    // CAROUSEL NO CONFLICT
                    // ====================

                    $.fn.carousel.noConflict = function () {
                        $.fn.carousel = old
                        return this
                    }


                    // CAROUSEL DATA-API
                    // =================

                    var clickHandler = function (e) {
                        var href
                        var $this   = $(this)
                        var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
                        if (!$target.hasClass('carousel')) return
                        var options = $.extend({}, $target.data(), $this.data())
                        var slideIndex = $this.attr('data-slide-to')
                        if (slideIndex) options.interval = false

                        Plugin.call($target, options)

                        if (slideIndex) {
                            $target.data('bs.carousel').to(slideIndex)
                        }

                        e.preventDefault()
                    }

                    $(document)
                        .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
                        .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

                    $(window).on('load', function () {
                        $('[data-ride="carousel"]').each(function () {
                            var $carousel = $(this)
                            Plugin.call($carousel, $carousel.data())
                        })
                    })

                }(jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/bootstrap/js/collapse.js":
        /*!***********************************************!*\
  !*** ./node_modules/bootstrap/js/collapse.js ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
 * Bootstrap: collapse.js v3.3.6
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


                +function ($) {
                    'use strict';

                    // COLLAPSE PUBLIC CLASS DEFINITION
                    // ================================

                    var Collapse = function (element, options) {
                        this.$element      = $(element)
                        this.options       = $.extend({}, Collapse.DEFAULTS, options)
                        this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                            '[data-toggle="collapse"][data-target="#' + element.id + '"]')
                        this.transitioning = null

                        if (this.options.parent) {
                            this.$parent = this.getParent()
                        } else {
                            this.addAriaAndCollapsedClass(this.$element, this.$trigger)
                        }

                        if (this.options.toggle) this.toggle()
                    }

                    Collapse.VERSION  = '3.3.6'

                    Collapse.TRANSITION_DURATION = 350

                    Collapse.DEFAULTS = {
                        toggle: true
                    }

                    Collapse.prototype.dimension = function () {
                        var hasWidth = this.$element.hasClass('width')
                        return hasWidth ? 'width' : 'height'
                    }

                    Collapse.prototype.show = function () {
                        if (this.transitioning || this.$element.hasClass('in')) return

                        var activesData
                        var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

                        if (actives && actives.length) {
                            activesData = actives.data('bs.collapse')
                            if (activesData && activesData.transitioning) return
                        }

                        var startEvent = $.Event('show.bs.collapse')
                        this.$element.trigger(startEvent)
                        if (startEvent.isDefaultPrevented()) return

                        if (actives && actives.length) {
                            Plugin.call(actives, 'hide')
                            activesData || actives.data('bs.collapse', null)
                        }

                        var dimension = this.dimension()

                        this.$element
                            .removeClass('collapse')
                            .addClass('collapsing')[dimension](0)
                            .attr('aria-expanded', true)

                        this.$trigger
                            .removeClass('collapsed')
                            .attr('aria-expanded', true)

                        this.transitioning = 1

                        var complete = function () {
                            this.$element
                                .removeClass('collapsing')
                                .addClass('collapse in')[dimension]('')
                            this.transitioning = 0
                            this.$element
                                .trigger('shown.bs.collapse')
                        }

                        if (!$.support.transition) return complete.call(this)

                        var scrollSize = $.camelCase(['scroll', dimension].join('-'))

                        this.$element
                            .one('bsTransitionEnd', $.proxy(complete, this))
                            .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
                    }

                    Collapse.prototype.hide = function () {
                        if (this.transitioning || !this.$element.hasClass('in')) return

                        var startEvent = $.Event('hide.bs.collapse')
                        this.$element.trigger(startEvent)
                        if (startEvent.isDefaultPrevented()) return

                        var dimension = this.dimension()

                        this.$element[dimension](this.$element[dimension]())[0].offsetHeight

                        this.$element
                            .addClass('collapsing')
                            .removeClass('collapse in')
                            .attr('aria-expanded', false)

                        this.$trigger
                            .addClass('collapsed')
                            .attr('aria-expanded', false)

                        this.transitioning = 1

                        var complete = function () {
                            this.transitioning = 0
                            this.$element
                                .removeClass('collapsing')
                                .addClass('collapse')
                                .trigger('hidden.bs.collapse')
                        }

                        if (!$.support.transition) return complete.call(this)

                        this.$element
                            [dimension](0)
                            .one('bsTransitionEnd', $.proxy(complete, this))
                            .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
                    }

                    Collapse.prototype.toggle = function () {
                        this[this.$element.hasClass('in') ? 'hide' : 'show']()
                    }

                    Collapse.prototype.getParent = function () {
                        return $(this.options.parent)
                            .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
                            .each($.proxy(function (i, element) {
                                var $element = $(element)
                                this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
                            }, this))
                            .end()
                    }

                    Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
                        var isOpen = $element.hasClass('in')

                        $element.attr('aria-expanded', isOpen)
                        $trigger
                            .toggleClass('collapsed', !isOpen)
                            .attr('aria-expanded', isOpen)
                    }

                    function getTargetFromTrigger($trigger) {
                        var href
                        var target = $trigger.attr('data-target')
                            || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

                        return $(target)
                    }


                    // COLLAPSE PLUGIN DEFINITION
                    // ==========================

                    function Plugin(option) {
                        return this.each(function () {
                            var $this   = $(this)
                            var data    = $this.data('bs.collapse')
                            var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

                            if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
                            if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
                            if (typeof option == 'string') data[option]()
                        })
                    }

                    var old = $.fn.collapse

                    $.fn.collapse             = Plugin
                    $.fn.collapse.Constructor = Collapse


                    // COLLAPSE NO CONFLICT
                    // ====================

                    $.fn.collapse.noConflict = function () {
                        $.fn.collapse = old
                        return this
                    }


                    // COLLAPSE DATA-API
                    // =================

                    $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
                        var $this   = $(this)

                        if (!$this.attr('data-target')) e.preventDefault()

                        var $target = getTargetFromTrigger($this)
                        var data    = $target.data('bs.collapse')
                        var option  = data ? 'toggle' : $this.data()

                        Plugin.call($target, option)
                    })

                }(jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/bootstrap/js/dropdown.js":
        /*!***********************************************!*\
  !*** ./node_modules/bootstrap/js/dropdown.js ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
 * Bootstrap: dropdown.js v3.3.6
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


                +function ($) {
                    'use strict';

                    // DROPDOWN CLASS DEFINITION
                    // =========================

                    var backdrop = '.dropdown-backdrop'
                    var toggle   = '[data-toggle="dropdown"]'
                    var Dropdown = function (element) {
                        $(element).on('click.bs.dropdown', this.toggle)
                    }

                    Dropdown.VERSION = '3.3.6'

                    function getParent($this) {
                        var selector = $this.attr('data-target')

                        if (!selector) {
                            selector = $this.attr('href')
                            selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
                        }

                        var $parent = selector && $(selector)

                        return $parent && $parent.length ? $parent : $this.parent()
                    }

                    function clearMenus(e) {
                        if (e && e.which === 3) return
                        $(backdrop).remove()
                        $(toggle).each(function () {
                            var $this         = $(this)
                            var $parent       = getParent($this)
                            var relatedTarget = { relatedTarget: this }

                            if (!$parent.hasClass('open')) return

                            if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

                            $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

                            if (e.isDefaultPrevented()) return

                            $this.attr('aria-expanded', 'false')
                            $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
                        })
                    }

                    Dropdown.prototype.toggle = function (e) {
                        var $this = $(this)

                        if ($this.is('.disabled, :disabled')) return

                        var $parent  = getParent($this)
                        var isActive = $parent.hasClass('open')

                        clearMenus()

                        if (!isActive) {
                            if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
                                // if mobile we use a backdrop because click events don't delegate
                                $(document.createElement('div'))
                                    .addClass('dropdown-backdrop')
                                    .insertAfter($(this))
                                    .on('click', clearMenus)
                            }

                            var relatedTarget = { relatedTarget: this }
                            $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

                            if (e.isDefaultPrevented()) return

                            $this
                                .trigger('focus')
                                .attr('aria-expanded', 'true')

                            $parent
                                .toggleClass('open')
                                .trigger($.Event('shown.bs.dropdown', relatedTarget))
                        }

                        return false
                    }

                    Dropdown.prototype.keydown = function (e) {
                        if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

                        var $this = $(this)

                        e.preventDefault()
                        e.stopPropagation()

                        if ($this.is('.disabled, :disabled')) return

                        var $parent  = getParent($this)
                        var isActive = $parent.hasClass('open')

                        if (!isActive && e.which != 27 || isActive && e.which == 27) {
                            if (e.which == 27) $parent.find(toggle).trigger('focus')
                            return $this.trigger('click')
                        }

                        var desc = ' li:not(.disabled):visible a'
                        var $items = $parent.find('.dropdown-menu' + desc)

                        if (!$items.length) return

                        var index = $items.index(e.target)

                        if (e.which == 38 && index > 0)                 index--         // up
                        if (e.which == 40 && index < $items.length - 1) index++         // down
                        if (!~index)                                    index = 0

                        $items.eq(index).trigger('focus')
                    }


                    // DROPDOWN PLUGIN DEFINITION
                    // ==========================

                    function Plugin(option) {
                        return this.each(function () {
                            var $this = $(this)
                            var data  = $this.data('bs.dropdown')

                            if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
                            if (typeof option == 'string') data[option].call($this)
                        })
                    }

                    var old = $.fn.dropdown

                    $.fn.dropdown             = Plugin
                    $.fn.dropdown.Constructor = Dropdown


                    // DROPDOWN NO CONFLICT
                    // ====================

                    $.fn.dropdown.noConflict = function () {
                        $.fn.dropdown = old
                        return this
                    }


                    // APPLY TO STANDARD DROPDOWN ELEMENTS
                    // ===================================

                    $(document)
                        .on('click.bs.dropdown.data-api', clearMenus)
                        .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
                        .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
                        .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
                        .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

                }(jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/bootstrap/js/modal.js":
        /*!********************************************!*\
  !*** ./node_modules/bootstrap/js/modal.js ***!
  \********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
 * Bootstrap: modal.js v3.3.6
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


                +function ($) {
                    'use strict';

                    // MODAL CLASS DEFINITION
                    // ======================

                    var Modal = function (element, options) {
                        this.options             = options
                        this.$body               = $(document.body)
                        this.$element            = $(element)
                        this.$dialog             = this.$element.find('.modal-dialog')
                        this.$backdrop           = null
                        this.isShown             = null
                        this.originalBodyPad     = null
                        this.scrollbarWidth      = 0
                        this.ignoreBackdropClick = false

                        if (this.options.remote) {
                            this.$element
                                .find('.modal-content')
                                .load(this.options.remote, $.proxy(function () {
                                    this.$element.trigger('loaded.bs.modal')
                                }, this))
                        }
                    }

                    Modal.VERSION  = '3.3.6'

                    Modal.TRANSITION_DURATION = 300
                    Modal.BACKDROP_TRANSITION_DURATION = 150

                    Modal.DEFAULTS = {
                        backdrop: true,
                        keyboard: true,
                        show: true
                    }

                    Modal.prototype.toggle = function (_relatedTarget) {
                        return this.isShown ? this.hide() : this.show(_relatedTarget)
                    }

                    Modal.prototype.show = function (_relatedTarget) {
                        var that = this
                        var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

                        this.$element.trigger(e)

                        if (this.isShown || e.isDefaultPrevented()) return

                        this.isShown = true

                        this.checkScrollbar()
                        this.setScrollbar()
                        this.$body.addClass('modal-open')

                        this.escape()
                        this.resize()

                        this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

                        this.$dialog.on('mousedown.dismiss.bs.modal', function () {
                            that.$element.one('mouseup.dismiss.bs.modal', function (e) {
                                if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
                            })
                        })

                        this.backdrop(function () {
                            var transition = $.support.transition && that.$element.hasClass('fade')

                            if (!that.$element.parent().length) {
                                that.$element.appendTo(that.$body) // don't move modals dom position
                            }

                            that.$element
                                .show()
                                .scrollTop(0)

                            that.adjustDialog()

                            if (transition) {
                                that.$element[0].offsetWidth // force reflow
                            }

                            that.$element.addClass('in')

                            that.enforceFocus()

                            var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

                            transition ?
                                that.$dialog // wait for modal to slide in
                                    .one('bsTransitionEnd', function () {
                                        that.$element.trigger('focus').trigger(e)
                                    })
                                    .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
                                that.$element.trigger('focus').trigger(e)
                        })
                    }

                    Modal.prototype.hide = function (e) {
                        if (e) e.preventDefault()

                        e = $.Event('hide.bs.modal')

                        this.$element.trigger(e)

                        if (!this.isShown || e.isDefaultPrevented()) return

                        this.isShown = false

                        this.escape()
                        this.resize()

                        $(document).off('focusin.bs.modal')

                        this.$element
                            .removeClass('in')
                            .off('click.dismiss.bs.modal')
                            .off('mouseup.dismiss.bs.modal')

                        this.$dialog.off('mousedown.dismiss.bs.modal')

                        $.support.transition && this.$element.hasClass('fade') ?
                            this.$element
                                .one('bsTransitionEnd', $.proxy(this.hideModal, this))
                                .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
                            this.hideModal()
                    }

                    Modal.prototype.enforceFocus = function () {
                        $(document)
                            .off('focusin.bs.modal') // guard against infinite focus loop
                            .on('focusin.bs.modal', $.proxy(function (e) {
                                if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
                                    this.$element.trigger('focus')
                                }
                            }, this))
                    }

                    Modal.prototype.escape = function () {
                        if (this.isShown && this.options.keyboard) {
                            this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
                                e.which == 27 && this.hide()
                            }, this))
                        } else if (!this.isShown) {
                            this.$element.off('keydown.dismiss.bs.modal')
                        }
                    }

                    Modal.prototype.resize = function () {
                        if (this.isShown) {
                            $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
                        } else {
                            $(window).off('resize.bs.modal')
                        }
                    }

                    Modal.prototype.hideModal = function () {
                        var that = this
                        this.$element.hide()
                        this.backdrop(function () {
                            that.$body.removeClass('modal-open')
                            that.resetAdjustments()
                            that.resetScrollbar()
                            that.$element.trigger('hidden.bs.modal')
                        })
                    }

                    Modal.prototype.removeBackdrop = function () {
                        this.$backdrop && this.$backdrop.remove()
                        this.$backdrop = null
                    }

                    Modal.prototype.backdrop = function (callback) {
                        var that = this
                        var animate = this.$element.hasClass('fade') ? 'fade' : ''

                        if (this.isShown && this.options.backdrop) {
                            var doAnimate = $.support.transition && animate

                            this.$backdrop = $(document.createElement('div'))
                                .addClass('modal-backdrop ' + animate)
                                .appendTo(this.$body)

                            this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
                                if (this.ignoreBackdropClick) {
                                    this.ignoreBackdropClick = false
                                    return
                                }
                                if (e.target !== e.currentTarget) return
                                this.options.backdrop == 'static'
                                    ? this.$element[0].focus()
                                    : this.hide()
                            }, this))

                            if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

                            this.$backdrop.addClass('in')

                            if (!callback) return

                            doAnimate ?
                                this.$backdrop
                                    .one('bsTransitionEnd', callback)
                                    .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
                                callback()

                        } else if (!this.isShown && this.$backdrop) {
                            this.$backdrop.removeClass('in')

                            var callbackRemove = function () {
                                that.removeBackdrop()
                                callback && callback()
                            }
                            $.support.transition && this.$element.hasClass('fade') ?
                                this.$backdrop
                                    .one('bsTransitionEnd', callbackRemove)
                                    .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
                                callbackRemove()

                        } else if (callback) {
                            callback()
                        }
                    }

                    // these following methods are used to handle overflowing modals

                    Modal.prototype.handleUpdate = function () {
                        this.adjustDialog()
                    }

                    Modal.prototype.adjustDialog = function () {
                        var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

                        this.$element.css({
                            paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
                            paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
                        })
                    }

                    Modal.prototype.resetAdjustments = function () {
                        this.$element.css({
                            paddingLeft: '',
                            paddingRight: ''
                        })
                    }

                    Modal.prototype.checkScrollbar = function () {
                        var fullWindowWidth = window.innerWidth
                        if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
                            var documentElementRect = document.documentElement.getBoundingClientRect()
                            fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
                        }
                        this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
                        this.scrollbarWidth = this.measureScrollbar()
                    }

                    Modal.prototype.setScrollbar = function () {
                        var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
                        this.originalBodyPad = document.body.style.paddingRight || ''
                        if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
                    }

                    Modal.prototype.resetScrollbar = function () {
                        this.$body.css('padding-right', this.originalBodyPad)
                    }

                    Modal.prototype.measureScrollbar = function () { // thx walsh
                        var scrollDiv = document.createElement('div')
                        scrollDiv.className = 'modal-scrollbar-measure'
                        this.$body.append(scrollDiv)
                        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
                        this.$body[0].removeChild(scrollDiv)
                        return scrollbarWidth
                    }


                    // MODAL PLUGIN DEFINITION
                    // =======================

                    function Plugin(option, _relatedTarget) {
                        return this.each(function () {
                            var $this   = $(this)
                            var data    = $this.data('bs.modal')
                            var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

                            if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
                            if (typeof option == 'string') data[option](_relatedTarget)
                            else if (options.show) data.show(_relatedTarget)
                        })
                    }

                    var old = $.fn.modal

                    $.fn.modal             = Plugin
                    $.fn.modal.Constructor = Modal


                    // MODAL NO CONFLICT
                    // =================

                    $.fn.modal.noConflict = function () {
                        $.fn.modal = old
                        return this
                    }


                    // MODAL DATA-API
                    // ==============

                    $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
                        var $this   = $(this)
                        var href    = $this.attr('href')
                        var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
                        var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

                        if ($this.is('a')) e.preventDefault()

                        $target.one('show.bs.modal', function (showEvent) {
                            if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
                            $target.one('hidden.bs.modal', function () {
                                $this.is(':visible') && $this.trigger('focus')
                            })
                        })
                        Plugin.call($target, option, this)
                    })

                }(jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/bootstrap/js/popover.js":
        /*!**********************************************!*\
  !*** ./node_modules/bootstrap/js/popover.js ***!
  \**********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
 * Bootstrap: popover.js v3.3.6
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


                +function ($) {
                    'use strict';

                    // POPOVER PUBLIC CLASS DEFINITION
                    // ===============================

                    var Popover = function (element, options) {
                        this.init('popover', element, options)
                    }

                    if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

                    Popover.VERSION  = '3.3.6'

                    Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
                        placement: 'right',
                        trigger: 'click',
                        content: '',
                        template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
                    })


                    // NOTE: POPOVER EXTENDS tooltip.js
                    // ================================

                    Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

                    Popover.prototype.constructor = Popover

                    Popover.prototype.getDefaults = function () {
                        return Popover.DEFAULTS
                    }

                    Popover.prototype.setContent = function () {
                        var $tip    = this.tip()
                        var title   = this.getTitle()
                        var content = this.getContent()

                        $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
                        $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
                            this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
                            ](content)

                        $tip.removeClass('fade top bottom left right in')

                        // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
                        // this manually by checking the contents.
                        if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
                    }

                    Popover.prototype.hasContent = function () {
                        return this.getTitle() || this.getContent()
                    }

                    Popover.prototype.getContent = function () {
                        var $e = this.$element
                        var o  = this.options

                        return $e.attr('data-content')
                            || (typeof o.content == 'function' ?
                                o.content.call($e[0]) :
                                o.content)
                    }

                    Popover.prototype.arrow = function () {
                        return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
                    }


                    // POPOVER PLUGIN DEFINITION
                    // =========================

                    function Plugin(option) {
                        return this.each(function () {
                            var $this   = $(this)
                            var data    = $this.data('bs.popover')
                            var options = typeof option == 'object' && option

                            if (!data && /destroy|hide/.test(option)) return
                            if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
                            if (typeof option == 'string') data[option]()
                        })
                    }

                    var old = $.fn.popover

                    $.fn.popover             = Plugin
                    $.fn.popover.Constructor = Popover


                    // POPOVER NO CONFLICT
                    // ===================

                    $.fn.popover.noConflict = function () {
                        $.fn.popover = old
                        return this
                    }

                }(jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/bootstrap/js/scrollspy.js":
        /*!************************************************!*\
  !*** ./node_modules/bootstrap/js/scrollspy.js ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.6
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


                +function ($) {
                    'use strict';

                    // SCROLLSPY CLASS DEFINITION
                    // ==========================

                    function ScrollSpy(element, options) {
                        this.$body          = $(document.body)
                        this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
                        this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
                        this.selector       = (this.options.target || '') + ' .nav li > a'
                        this.offsets        = []
                        this.targets        = []
                        this.activeTarget   = null
                        this.scrollHeight   = 0

                        this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
                        this.refresh()
                        this.process()
                    }

                    ScrollSpy.VERSION  = '3.3.6'

                    ScrollSpy.DEFAULTS = {
                        offset: 10
                    }

                    ScrollSpy.prototype.getScrollHeight = function () {
                        return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
                    }

                    ScrollSpy.prototype.refresh = function () {
                        var that          = this
                        var offsetMethod  = 'offset'
                        var offsetBase    = 0

                        this.offsets      = []
                        this.targets      = []
                        this.scrollHeight = this.getScrollHeight()

                        if (!$.isWindow(this.$scrollElement[0])) {
                            offsetMethod = 'position'
                            offsetBase   = this.$scrollElement.scrollTop()
                        }

                        this.$body
                            .find(this.selector)
                            .map(function () {
                                var $el   = $(this)
                                var href  = $el.data('target') || $el.attr('href')
                                var $href = /^#./.test(href) && $(href)

                                return ($href
                                    && $href.length
                                    && $href.is(':visible')
                                    && [[$href[offsetMethod]().top + offsetBase, href]]) || null
                            })
                            .sort(function (a, b) { return a[0] - b[0] })
                            .each(function () {
                                that.offsets.push(this[0])
                                that.targets.push(this[1])
                            })
                    }

                    ScrollSpy.prototype.process = function () {
                        var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
                        var scrollHeight = this.getScrollHeight()
                        var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
                        var offsets      = this.offsets
                        var targets      = this.targets
                        var activeTarget = this.activeTarget
                        var i

                        if (this.scrollHeight != scrollHeight) {
                            this.refresh()
                        }

                        if (scrollTop >= maxScroll) {
                            return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
                        }

                        if (activeTarget && scrollTop < offsets[0]) {
                            this.activeTarget = null
                            return this.clear()
                        }

                        for (i = offsets.length; i--;) {
                            activeTarget != targets[i]
                            && scrollTop >= offsets[i]
                            && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
                            && this.activate(targets[i])
                        }
                    }

                    ScrollSpy.prototype.activate = function (target) {
                        this.activeTarget = target

                        this.clear()

                        var selector = this.selector +
                            '[data-target="' + target + '"],' +
                            this.selector + '[href="' + target + '"]'

                        var active = $(selector)
                            .parents('li')
                            .addClass('active')

                        if (active.parent('.dropdown-menu').length) {
                            active = active
                                .closest('li.dropdown')
                                .addClass('active')
                        }

                        active.trigger('activate.bs.scrollspy')
                    }

                    ScrollSpy.prototype.clear = function () {
                        $(this.selector)
                            .parentsUntil(this.options.target, '.active')
                            .removeClass('active')
                    }


                    // SCROLLSPY PLUGIN DEFINITION
                    // ===========================

                    function Plugin(option) {
                        return this.each(function () {
                            var $this   = $(this)
                            var data    = $this.data('bs.scrollspy')
                            var options = typeof option == 'object' && option

                            if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
                            if (typeof option == 'string') data[option]()
                        })
                    }

                    var old = $.fn.scrollspy

                    $.fn.scrollspy             = Plugin
                    $.fn.scrollspy.Constructor = ScrollSpy


                    // SCROLLSPY NO CONFLICT
                    // =====================

                    $.fn.scrollspy.noConflict = function () {
                        $.fn.scrollspy = old
                        return this
                    }


                    // SCROLLSPY DATA-API
                    // ==================

                    $(window).on('load.bs.scrollspy.data-api', function () {
                        $('[data-spy="scroll"]').each(function () {
                            var $spy = $(this)
                            Plugin.call($spy, $spy.data())
                        })
                    })

                }(jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/bootstrap/js/tab.js":
        /*!******************************************!*\
  !*** ./node_modules/bootstrap/js/tab.js ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
 * Bootstrap: tab.js v3.3.6
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


                +function ($) {
                    'use strict';

                    // TAB CLASS DEFINITION
                    // ====================

                    var Tab = function (element) {
                        // jscs:disable requireDollarBeforejQueryAssignment
                        this.element = $(element)
                        // jscs:enable requireDollarBeforejQueryAssignment
                    }

                    Tab.VERSION = '3.3.6'

                    Tab.TRANSITION_DURATION = 150

                    Tab.prototype.show = function () {
                        var $this    = this.element
                        var $ul      = $this.closest('ul:not(.dropdown-menu)')
                        var selector = $this.data('target')

                        if (!selector) {
                            selector = $this.attr('href')
                            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
                        }

                        if ($this.parent('li').hasClass('active')) return

                        var $previous = $ul.find('.active:last a')
                        var hideEvent = $.Event('hide.bs.tab', {
                            relatedTarget: $this[0]
                        })
                        var showEvent = $.Event('show.bs.tab', {
                            relatedTarget: $previous[0]
                        })

                        $previous.trigger(hideEvent)
                        $this.trigger(showEvent)

                        if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

                        var $target = $(selector)

                        this.activate($this.closest('li'), $ul)
                        this.activate($target, $target.parent(), function () {
                            $previous.trigger({
                                type: 'hidden.bs.tab',
                                relatedTarget: $this[0]
                            })
                            $this.trigger({
                                type: 'shown.bs.tab',
                                relatedTarget: $previous[0]
                            })
                        })
                    }

                    Tab.prototype.activate = function (element, container, callback) {
                        var $active    = container.find('> .active')
                        var transition = callback
                            && $.support.transition
                            && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

                        function next() {
                            $active
                                .removeClass('active')
                                .find('> .dropdown-menu > .active')
                                .removeClass('active')
                                .end()
                                .find('[data-toggle="tab"]')
                                .attr('aria-expanded', false)

                            element
                                .addClass('active')
                                .find('[data-toggle="tab"]')
                                .attr('aria-expanded', true)

                            if (transition) {
                                element[0].offsetWidth // reflow for transition
                                element.addClass('in')
                            } else {
                                element.removeClass('fade')
                            }

                            if (element.parent('.dropdown-menu').length) {
                                element
                                    .closest('li.dropdown')
                                    .addClass('active')
                                    .end()
                                    .find('[data-toggle="tab"]')
                                    .attr('aria-expanded', true)
                            }

                            callback && callback()
                        }

                        $active.length && transition ?
                            $active
                                .one('bsTransitionEnd', next)
                                .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
                            next()

                        $active.removeClass('in')
                    }


                    // TAB PLUGIN DEFINITION
                    // =====================

                    function Plugin(option) {
                        return this.each(function () {
                            var $this = $(this)
                            var data  = $this.data('bs.tab')

                            if (!data) $this.data('bs.tab', (data = new Tab(this)))
                            if (typeof option == 'string') data[option]()
                        })
                    }

                    var old = $.fn.tab

                    $.fn.tab             = Plugin
                    $.fn.tab.Constructor = Tab


                    // TAB NO CONFLICT
                    // ===============

                    $.fn.tab.noConflict = function () {
                        $.fn.tab = old
                        return this
                    }


                    // TAB DATA-API
                    // ============

                    var clickHandler = function (e) {
                        e.preventDefault()
                        Plugin.call($(this), 'show')
                    }

                    $(document)
                        .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
                        .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

                }(jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/bootstrap/js/tooltip.js":
        /*!**********************************************!*\
  !*** ./node_modules/bootstrap/js/tooltip.js ***!
  \**********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
 * Bootstrap: tooltip.js v3.3.6
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


                +function ($) {
                    'use strict';

                    // TOOLTIP PUBLIC CLASS DEFINITION
                    // ===============================

                    var Tooltip = function (element, options) {
                        this.type       = null
                        this.options    = null
                        this.enabled    = null
                        this.timeout    = null
                        this.hoverState = null
                        this.$element   = null
                        this.inState    = null

                        this.init('tooltip', element, options)
                    }

                    Tooltip.VERSION  = '3.3.6'

                    Tooltip.TRANSITION_DURATION = 150

                    Tooltip.DEFAULTS = {
                        animation: true,
                        placement: 'top',
                        selector: false,
                        template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
                        trigger: 'hover focus',
                        title: '',
                        delay: 0,
                        html: false,
                        container: false,
                        viewport: {
                            selector: 'body',
                            padding: 0
                        }
                    }

                    Tooltip.prototype.init = function (type, element, options) {
                        this.enabled   = true
                        this.type      = type
                        this.$element  = $(element)
                        this.options   = this.getOptions(options)
                        this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
                        this.inState   = { click: false, hover: false, focus: false }

                        if (this.$element[0] instanceof document.constructor && !this.options.selector) {
                            throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
                        }

                        var triggers = this.options.trigger.split(' ')

                        for (var i = triggers.length; i--;) {
                            var trigger = triggers[i]

                            if (trigger == 'click') {
                                this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
                            } else if (trigger != 'manual') {
                                var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
                                var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

                                this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
                                this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
                            }
                        }

                        this.options.selector ?
                            (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
                            this.fixTitle()
                    }

                    Tooltip.prototype.getDefaults = function () {
                        return Tooltip.DEFAULTS
                    }

                    Tooltip.prototype.getOptions = function (options) {
                        options = $.extend({}, this.getDefaults(), this.$element.data(), options)

                        if (options.delay && typeof options.delay == 'number') {
                            options.delay = {
                                show: options.delay,
                                hide: options.delay
                            }
                        }

                        return options
                    }

                    Tooltip.prototype.getDelegateOptions = function () {
                        var options  = {}
                        var defaults = this.getDefaults()

                        this._options && $.each(this._options, function (key, value) {
                            if (defaults[key] != value) options[key] = value
                        })

                        return options
                    }

                    Tooltip.prototype.enter = function (obj) {
                        var self = obj instanceof this.constructor ?
                            obj : $(obj.currentTarget).data('bs.' + this.type)

                        if (!self) {
                            self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
                            $(obj.currentTarget).data('bs.' + this.type, self)
                        }

                        if (obj instanceof $.Event) {
                            self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
                        }

                        if (self.tip().hasClass('in') || self.hoverState == 'in') {
                            self.hoverState = 'in'
                            return
                        }

                        clearTimeout(self.timeout)

                        self.hoverState = 'in'

                        if (!self.options.delay || !self.options.delay.show) return self.show()

                        self.timeout = setTimeout(function () {
                            if (self.hoverState == 'in') self.show()
                        }, self.options.delay.show)
                    }

                    Tooltip.prototype.isInStateTrue = function () {
                        for (var key in this.inState) {
                            if (this.inState[key]) return true
                        }

                        return false
                    }

                    Tooltip.prototype.leave = function (obj) {
                        var self = obj instanceof this.constructor ?
                            obj : $(obj.currentTarget).data('bs.' + this.type)

                        if (!self) {
                            self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
                            $(obj.currentTarget).data('bs.' + this.type, self)
                        }

                        if (obj instanceof $.Event) {
                            self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
                        }

                        if (self.isInStateTrue()) return

                        clearTimeout(self.timeout)

                        self.hoverState = 'out'

                        if (!self.options.delay || !self.options.delay.hide) return self.hide()

                        self.timeout = setTimeout(function () {
                            if (self.hoverState == 'out') self.hide()
                        }, self.options.delay.hide)
                    }

                    Tooltip.prototype.show = function () {
                        var e = $.Event('show.bs.' + this.type)

                        if (this.hasContent() && this.enabled) {
                            this.$element.trigger(e)

                            var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
                            if (e.isDefaultPrevented() || !inDom) return
                            var that = this

                            var $tip = this.tip()

                            var tipId = this.getUID(this.type)

                            this.setContent()
                            $tip.attr('id', tipId)
                            this.$element.attr('aria-describedby', tipId)

                            if (this.options.animation) $tip.addClass('fade')

                            var placement = typeof this.options.placement == 'function' ?
                                this.options.placement.call(this, $tip[0], this.$element[0]) :
                                this.options.placement

                            var autoToken = /\s?auto?\s?/i
                            var autoPlace = autoToken.test(placement)
                            if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

                            $tip
                                .detach()
                                .css({ top: 0, left: 0, display: 'block' })
                                .addClass(placement)
                                .data('bs.' + this.type, this)

                            this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
                            this.$element.trigger('inserted.bs.' + this.type)

                            var pos          = this.getPosition()
                            var actualWidth  = $tip[0].offsetWidth
                            var actualHeight = $tip[0].offsetHeight

                            if (autoPlace) {
                                var orgPlacement = placement
                                var viewportDim = this.getPosition(this.$viewport)

                                placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                                        placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                                            placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                                                placement

                                $tip
                                    .removeClass(orgPlacement)
                                    .addClass(placement)
                            }

                            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

                            this.applyPlacement(calculatedOffset, placement)

                            var complete = function () {
                                var prevHoverState = that.hoverState
                                that.$element.trigger('shown.bs.' + that.type)
                                that.hoverState = null

                                if (prevHoverState == 'out') that.leave(that)
                            }

                            $.support.transition && this.$tip.hasClass('fade') ?
                                $tip
                                    .one('bsTransitionEnd', complete)
                                    .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
                                complete()
                        }
                    }

                    Tooltip.prototype.applyPlacement = function (offset, placement) {
                        var $tip   = this.tip()
                        var width  = $tip[0].offsetWidth
                        var height = $tip[0].offsetHeight

                        // manually read margins because getBoundingClientRect includes difference
                        var marginTop = parseInt($tip.css('margin-top'), 10)
                        var marginLeft = parseInt($tip.css('margin-left'), 10)

                        // we must check for NaN for ie 8/9
                        if (isNaN(marginTop))  marginTop  = 0
                        if (isNaN(marginLeft)) marginLeft = 0

                        offset.top  += marginTop
                        offset.left += marginLeft

                        // $.fn.offset doesn't round pixel values
                        // so we use setOffset directly with our own function B-0
                        $.offset.setOffset($tip[0], $.extend({
                            using: function (props) {
                                $tip.css({
                                    top: Math.round(props.top),
                                    left: Math.round(props.left)
                                })
                            }
                        }, offset), 0)

                        $tip.addClass('in')

                        // check to see if placing tip in new offset caused the tip to resize itself
                        var actualWidth  = $tip[0].offsetWidth
                        var actualHeight = $tip[0].offsetHeight

                        if (placement == 'top' && actualHeight != height) {
                            offset.top = offset.top + height - actualHeight
                        }

                        var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

                        if (delta.left) offset.left += delta.left
                        else offset.top += delta.top

                        var isVertical          = /top|bottom/.test(placement)
                        var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
                        var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

                        $tip.offset(offset)
                        this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
                    }

                    Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
                        this.arrow()
                            .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
                            .css(isVertical ? 'top' : 'left', '')
                    }

                    Tooltip.prototype.setContent = function () {
                        var $tip  = this.tip()
                        var title = this.getTitle()

                        $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
                        $tip.removeClass('fade in top bottom left right')
                    }

                    Tooltip.prototype.hide = function (callback) {
                        var that = this
                        var $tip = $(this.$tip)
                        var e    = $.Event('hide.bs.' + this.type)

                        function complete() {
                            if (that.hoverState != 'in') $tip.detach()
                            that.$element
                                .removeAttr('aria-describedby')
                                .trigger('hidden.bs.' + that.type)
                            callback && callback()
                        }

                        this.$element.trigger(e)

                        if (e.isDefaultPrevented()) return

                        $tip.removeClass('in')

                        $.support.transition && $tip.hasClass('fade') ?
                            $tip
                                .one('bsTransitionEnd', complete)
                                .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
                            complete()

                        this.hoverState = null

                        return this
                    }

                    Tooltip.prototype.fixTitle = function () {
                        var $e = this.$element
                        if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
                            $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
                        }
                    }

                    Tooltip.prototype.hasContent = function () {
                        return this.getTitle()
                    }

                    Tooltip.prototype.getPosition = function ($element) {
                        $element   = $element || this.$element

                        var el     = $element[0]
                        var isBody = el.tagName == 'BODY'

                        var elRect    = el.getBoundingClientRect()
                        if (elRect.width == null) {
                            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
                            elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
                        }
                        var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
                        var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
                        var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

                        return $.extend({}, elRect, scroll, outerDims, elOffset)
                    }

                    Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
                        return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
                            placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
                                placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
                                    /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

                    }

                    Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
                        var delta = { top: 0, left: 0 }
                        if (!this.$viewport) return delta

                        var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
                        var viewportDimensions = this.getPosition(this.$viewport)

                        if (/right|left/.test(placement)) {
                            var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
                            var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
                            if (topEdgeOffset < viewportDimensions.top) { // top overflow
                                delta.top = viewportDimensions.top - topEdgeOffset
                            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
                                delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
                            }
                        } else {
                            var leftEdgeOffset  = pos.left - viewportPadding
                            var rightEdgeOffset = pos.left + viewportPadding + actualWidth
                            if (leftEdgeOffset < viewportDimensions.left) { // left overflow
                                delta.left = viewportDimensions.left - leftEdgeOffset
                            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
                                delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
                            }
                        }

                        return delta
                    }

                    Tooltip.prototype.getTitle = function () {
                        var title
                        var $e = this.$element
                        var o  = this.options

                        title = $e.attr('data-original-title')
                            || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

                        return title
                    }

                    Tooltip.prototype.getUID = function (prefix) {
                        do prefix += ~~(Math.random() * 1000000)
                        while (document.getElementById(prefix))
                        return prefix
                    }

                    Tooltip.prototype.tip = function () {
                        if (!this.$tip) {
                            this.$tip = $(this.options.template)
                            if (this.$tip.length != 1) {
                                throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
                            }
                        }
                        return this.$tip
                    }

                    Tooltip.prototype.arrow = function () {
                        return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
                    }

                    Tooltip.prototype.enable = function () {
                        this.enabled = true
                    }

                    Tooltip.prototype.disable = function () {
                        this.enabled = false
                    }

                    Tooltip.prototype.toggleEnabled = function () {
                        this.enabled = !this.enabled
                    }

                    Tooltip.prototype.toggle = function (e) {
                        var self = this
                        if (e) {
                            self = $(e.currentTarget).data('bs.' + this.type)
                            if (!self) {
                                self = new this.constructor(e.currentTarget, this.getDelegateOptions())
                                $(e.currentTarget).data('bs.' + this.type, self)
                            }
                        }

                        if (e) {
                            self.inState.click = !self.inState.click
                            if (self.isInStateTrue()) self.enter(self)
                            else self.leave(self)
                        } else {
                            self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
                        }
                    }

                    Tooltip.prototype.destroy = function () {
                        var that = this
                        clearTimeout(this.timeout)
                        this.hide(function () {
                            that.$element.off('.' + that.type).removeData('bs.' + that.type)
                            if (that.$tip) {
                                that.$tip.detach()
                            }
                            that.$tip = null
                            that.$arrow = null
                            that.$viewport = null
                        })
                    }


                    // TOOLTIP PLUGIN DEFINITION
                    // =========================

                    function Plugin(option) {
                        return this.each(function () {
                            var $this   = $(this)
                            var data    = $this.data('bs.tooltip')
                            var options = typeof option == 'object' && option

                            if (!data && /destroy|hide/.test(option)) return
                            if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
                            if (typeof option == 'string') data[option]()
                        })
                    }

                    var old = $.fn.tooltip

                    $.fn.tooltip             = Plugin
                    $.fn.tooltip.Constructor = Tooltip


                    // TOOLTIP NO CONFLICT
                    // ===================

                    $.fn.tooltip.noConflict = function () {
                        $.fn.tooltip = old
                        return this
                    }

                }(jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/bootstrap/js/transition.js":
        /*!*************************************************!*\
  !*** ./node_modules/bootstrap/js/transition.js ***!
  \*************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
 * Bootstrap: transition.js v3.3.6
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


                +function ($) {
                    'use strict';

                    // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
                    // ============================================================

                    function transitionEnd() {
                        var el = document.createElement('bootstrap')

                        var transEndEventNames = {
                            WebkitTransition : 'webkitTransitionEnd',
                            MozTransition    : 'transitionend',
                            OTransition      : 'oTransitionEnd otransitionend',
                            transition       : 'transitionend'
                        }

                        for (var name in transEndEventNames) {
                            if (el.style[name] !== undefined) {
                                return { end: transEndEventNames[name] }
                            }
                        }

                        return false // explicit for ie8 (  ._.)
                    }

                    // http://blog.alexmaccaw.com/css-transitions
                    $.fn.emulateTransitionEnd = function (duration) {
                        var called = false
                        var $el = this
                        $(this).one('bsTransitionEnd', function () { called = true })
                        var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
                        setTimeout(callback, duration)
                        return this
                    }

                    $(function () {
                        $.support.transition = transitionEnd()

                        if (!$.support.transition) return

                        $.event.special.bsTransitionEnd = {
                            bindType: $.support.transition.end,
                            delegateType: $.support.transition.end,
                            handle: function (e) {
                                if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
                            }
                        }
                    })

                }(jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/core-js/internals/a-function.js":
        /*!******************************************************!*\
  !*** ./node_modules/core-js/internals/a-function.js ***!
  \******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            module.exports = function (it) {
                if (typeof it != 'function') {
                    throw TypeError(String(it) + ' is not a function');
                } return it;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/add-to-unscopables.js":
        /*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/add-to-unscopables.js ***!
  \**************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
            var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
            var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");

            var UNSCOPABLES = wellKnownSymbol('unscopables');
            var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
            if (ArrayPrototype[UNSCOPABLES] == undefined) {
                hide(ArrayPrototype, UNSCOPABLES, create(null));
            }

// add a key to Array.prototype[@@unscopables]
            module.exports = function (key) {
                ArrayPrototype[UNSCOPABLES][key] = true;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/advance-string-index.js":
        /*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/advance-string-index.js ***!
  \****************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var codePointAt = __webpack_require__(/*! ../internals/string-at */ "./node_modules/core-js/internals/string-at.js");

// `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
            module.exports = function (S, index, unicode) {
                return index + (unicode ? codePointAt(S, index, true).length : 1);
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/an-instance.js":
        /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/an-instance.js ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            module.exports = function (it, Constructor, name) {
                if (!(it instanceof Constructor)) {
                    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
                } return it;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/an-object.js":
        /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/an-object.js ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

            module.exports = function (it) {
                if (!isObject(it)) {
                    throw TypeError(String(it) + ' is not an object');
                } return it;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/array-for-each.js":
        /*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-for-each.js ***!
  \**********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var arrayMethods = __webpack_require__(/*! ../internals/array-methods */ "./node_modules/core-js/internals/array-methods.js");
            var sloppyArrayMethod = __webpack_require__(/*! ../internals/sloppy-array-method */ "./node_modules/core-js/internals/sloppy-array-method.js");

            var internalForEach = arrayMethods(0);
            var SLOPPY_METHOD = sloppyArrayMethod('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
            module.exports = SLOPPY_METHOD ? function forEach(callbackfn /* , thisArg */) {
                return internalForEach(this, callbackfn, arguments[1]);
            } : [].forEach;


            /***/ }),

        /***/ "./node_modules/core-js/internals/array-includes.js":
        /*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-includes.js ***!
  \**********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
            var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
            var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");

// `Array.prototype.{ indexOf, includes }` methods implementation
// false -> Array#indexOf
// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
// true  -> Array#includes
// https://tc39.github.io/ecma262/#sec-array.prototype.includes
            module.exports = function (IS_INCLUDES) {
                return function ($this, el, fromIndex) {
                    var O = toIndexedObject($this);
                    var length = toLength(O.length);
                    var index = toAbsoluteIndex(fromIndex, length);
                    var value;
                    // Array#includes uses SameValueZero equality algorithm
                    // eslint-disable-next-line no-self-compare
                    if (IS_INCLUDES && el != el) while (length > index) {
                        value = O[index++];
                        // eslint-disable-next-line no-self-compare
                        if (value != value) return true;
                        // Array#indexOf ignores holes, Array#includes - not
                    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
                        if (O[index] === el) return IS_INCLUDES || index || 0;
                    } return !IS_INCLUDES && -1;
                };
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/array-method-has-species-support.js":
        /*!****************************************************************************!*\
  !*** ./node_modules/core-js/internals/array-method-has-species-support.js ***!
  \****************************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

            var SPECIES = wellKnownSymbol('species');

            module.exports = function (METHOD_NAME) {
                return !fails(function () {
                    var array = [];
                    var constructor = array.constructor = {};
                    constructor[SPECIES] = function () {
                        return { foo: 1 };
                    };
                    return array[METHOD_NAME](Boolean).foo !== 1;
                });
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/array-methods.js":
        /*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/array-methods.js ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var bind = __webpack_require__(/*! ../internals/bind-context */ "./node_modules/core-js/internals/bind-context.js");
            var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
            var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
            var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
            var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
// 0 -> Array#forEach
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
// 1 -> Array#map
// https://tc39.github.io/ecma262/#sec-array.prototype.map
// 2 -> Array#filter
// https://tc39.github.io/ecma262/#sec-array.prototype.filter
// 3 -> Array#some
// https://tc39.github.io/ecma262/#sec-array.prototype.some
// 4 -> Array#every
// https://tc39.github.io/ecma262/#sec-array.prototype.every
// 5 -> Array#find
// https://tc39.github.io/ecma262/#sec-array.prototype.find
// 6 -> Array#findIndex
// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
            module.exports = function (TYPE, specificCreate) {
                var IS_MAP = TYPE == 1;
                var IS_FILTER = TYPE == 2;
                var IS_SOME = TYPE == 3;
                var IS_EVERY = TYPE == 4;
                var IS_FIND_INDEX = TYPE == 6;
                var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
                var create = specificCreate || arraySpeciesCreate;
                return function ($this, callbackfn, that) {
                    var O = toObject($this);
                    var self = IndexedObject(O);
                    var boundFunction = bind(callbackfn, that, 3);
                    var length = toLength(self.length);
                    var index = 0;
                    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
                    var value, result;
                    for (;length > index; index++) if (NO_HOLES || index in self) {
                        value = self[index];
                        result = boundFunction(value, index, O);
                        if (TYPE) {
                            if (IS_MAP) target[index] = result; // map
                            else if (result) switch (TYPE) {
                                case 3: return true;              // some
                                case 5: return value;             // find
                                case 6: return index;             // findIndex
                                case 2: target.push(value);       // filter
                            } else if (IS_EVERY) return false;  // every
                        }
                    }
                    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
                };
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/array-species-create.js":
        /*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/array-species-create.js ***!
  \****************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
            var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

            var SPECIES = wellKnownSymbol('species');

// `ArraySpeciesCreate` abstract operation
// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
            module.exports = function (originalArray, length) {
                var C;
                if (isArray(originalArray)) {
                    C = originalArray.constructor;
                    // cross-realm fallback
                    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
                    else if (isObject(C)) {
                        C = C[SPECIES];
                        if (C === null) C = undefined;
                    }
                } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/bind-context.js":
        /*!********************************************************!*\
  !*** ./node_modules/core-js/internals/bind-context.js ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");

// optional / simple context binding
            module.exports = function (fn, that, length) {
                aFunction(fn);
                if (that === undefined) return fn;
                switch (length) {
                    case 0: return function () {
                        return fn.call(that);
                    };
                    case 1: return function (a) {
                        return fn.call(that, a);
                    };
                    case 2: return function (a, b) {
                        return fn.call(that, a, b);
                    };
                    case 3: return function (a, b, c) {
                        return fn.call(that, a, b, c);
                    };
                }
                return function (/* ...args */) {
                    return fn.apply(that, arguments);
                };
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js":
        /*!****************************************************************************!*\
  !*** ./node_modules/core-js/internals/call-with-safe-iteration-closing.js ***!
  \****************************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

// call something on iterator step with safe closing on error
            module.exports = function (iterator, fn, value, ENTRIES) {
                try {
                    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
                    // 7.4.6 IteratorClose(iterator, completion)
                } catch (error) {
                    var returnMethod = iterator['return'];
                    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
                    throw error;
                }
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/check-correctness-of-iteration.js":
        /*!**************************************************************************!*\
  !*** ./node_modules/core-js/internals/check-correctness-of-iteration.js ***!
  \**************************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

            var ITERATOR = wellKnownSymbol('iterator');
            var SAFE_CLOSING = false;

            try {
                var called = 0;
                var iteratorWithReturn = {
                    next: function () {
                        return { done: !!called++ };
                    },
                    'return': function () {
                        SAFE_CLOSING = true;
                    }
                };
                iteratorWithReturn[ITERATOR] = function () {
                    return this;
                };
                // eslint-disable-next-line no-throw-literal
                Array.from(iteratorWithReturn, function () { throw 2; });
            } catch (error) { /* empty */ }

            module.exports = function (exec, SKIP_CLOSING) {
                if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
                var ITERATION_SUPPORT = false;
                try {
                    var object = {};
                    object[ITERATOR] = function () {
                        return {
                            next: function () {
                                return { done: ITERATION_SUPPORT = true };
                            }
                        };
                    };
                    exec(object);
                } catch (error) { /* empty */ }
                return ITERATION_SUPPORT;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/classof-raw.js":
        /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/classof-raw.js ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            var toString = {}.toString;

            module.exports = function (it) {
                return toString.call(it).slice(8, -1);
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/classof.js":
        /*!***************************************************!*\
  !*** ./node_modules/core-js/internals/classof.js ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var classofRaw = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

            var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
            var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
            var tryGet = function (it, key) {
                try {
                    return it[key];
                } catch (error) { /* empty */ }
            };

// getting tag from ES6+ `Object.prototype.toString`
            module.exports = function (it) {
                var O, tag, result;
                return it === undefined ? 'Undefined' : it === null ? 'Null'
                    // @@toStringTag case
                    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
                        // builtinTag case
                        : CORRECT_ARGUMENTS ? classofRaw(O)
                            // ES3 arguments fallback
                            : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/copy-constructor-properties.js":
        /*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!
  \***********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
            var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "./node_modules/core-js/internals/own-keys.js");
            var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
            var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");

            module.exports = function (target, source) {
                var keys = ownKeys(source);
                var defineProperty = definePropertyModule.f;
                var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
                }
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/correct-prototype-getter.js":
        /*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/correct-prototype-getter.js ***!
  \********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

            module.exports = !fails(function () {
                function F() { /* empty */ }
                F.prototype.constructor = null;
                return Object.getPrototypeOf(new F()) !== F.prototype;
            });


            /***/ }),

        /***/ "./node_modules/core-js/internals/create-iterator-constructor.js":
        /*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-iterator-constructor.js ***!
  \***********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var IteratorPrototype = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js").IteratorPrototype;
            var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
            var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
            var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
            var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

            var returnThis = function () { return this; };

            module.exports = function (IteratorConstructor, NAME, next) {
                var TO_STRING_TAG = NAME + ' Iterator';
                IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
                setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
                Iterators[TO_STRING_TAG] = returnThis;
                return IteratorConstructor;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/create-property-descriptor.js":
        /*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-property-descriptor.js ***!
  \**********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            module.exports = function (bitmap, value) {
                return {
                    enumerable: !(bitmap & 1),
                    configurable: !(bitmap & 2),
                    writable: !(bitmap & 4),
                    value: value
                };
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/create-property.js":
        /*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/create-property.js ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
            var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
            var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

            module.exports = function (object, key, value) {
                var propertyKey = toPrimitive(key);
                if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
                else object[propertyKey] = value;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/define-iterator.js":
        /*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/define-iterator.js ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var createIteratorConstructor = __webpack_require__(/*! ../internals/create-iterator-constructor */ "./node_modules/core-js/internals/create-iterator-constructor.js");
            var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
            var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");
            var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
            var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
            var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
            var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
            var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
            var IteratorsCore = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js");

            var IteratorPrototype = IteratorsCore.IteratorPrototype;
            var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
            var ITERATOR = wellKnownSymbol('iterator');
            var KEYS = 'keys';
            var VALUES = 'values';
            var ENTRIES = 'entries';

            var returnThis = function () { return this; };

            module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
                createIteratorConstructor(IteratorConstructor, NAME, next);

                var getIterationMethod = function (KIND) {
                    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
                    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
                    switch (KIND) {
                        case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
                        case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
                        case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
                    } return function () { return new IteratorConstructor(this); };
                };

                var TO_STRING_TAG = NAME + ' Iterator';
                var INCORRECT_VALUES_NAME = false;
                var IterablePrototype = Iterable.prototype;
                var nativeIterator = IterablePrototype[ITERATOR]
                    || IterablePrototype['@@iterator']
                    || DEFAULT && IterablePrototype[DEFAULT];
                var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
                var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
                var CurrentIteratorPrototype, methods, KEY;

                // fix native
                if (anyNativeIterator) {
                    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
                    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                        if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
                            if (setPrototypeOf) {
                                setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                            } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
                                hide(CurrentIteratorPrototype, ITERATOR, returnThis);
                            }
                        }
                        // Set @@toStringTag to native iterators
                        setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                        if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
                    }
                }

                // fix Array#{values, @@iterator}.name in V8 / FF
                if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
                    INCORRECT_VALUES_NAME = true;
                    defaultIterator = function values() { return nativeIterator.call(this); };
                }

                // define iterator
                if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
                    hide(IterablePrototype, ITERATOR, defaultIterator);
                }
                Iterators[NAME] = defaultIterator;

                // export additional methods
                if (DEFAULT) {
                    methods = {
                        values: getIterationMethod(VALUES),
                        keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                        entries: getIterationMethod(ENTRIES)
                    };
                    if (FORCED) for (KEY in methods) {
                        if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                            redefine(IterablePrototype, KEY, methods[KEY]);
                        }
                    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
                }

                return methods;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/define-well-known-symbol.js":
        /*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/define-well-known-symbol.js ***!
  \********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var path = __webpack_require__(/*! ../internals/path */ "./node_modules/core-js/internals/path.js");
            var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
            var wrappedWellKnownSymbolModule = __webpack_require__(/*! ../internals/wrapped-well-known-symbol */ "./node_modules/core-js/internals/wrapped-well-known-symbol.js");
            var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;

            module.exports = function (NAME) {
                var Symbol = path.Symbol || (path.Symbol = {});
                if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
                    value: wrappedWellKnownSymbolModule.f(NAME)
                });
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/descriptors.js":
        /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/descriptors.js ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// Thank's IE8 for his funny defineProperty
            module.exports = !fails(function () {
                return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
            });


            /***/ }),

        /***/ "./node_modules/core-js/internals/document-create-element.js":
        /*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/document-create-element.js ***!
  \*******************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

            var document = global.document;
// typeof document.createElement is 'object' in old IE
            var exist = isObject(document) && isObject(document.createElement);

            module.exports = function (it) {
                return exist ? document.createElement(it) : {};
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/dom-iterables.js":
        /*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/dom-iterables.js ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
            module.exports = {
                CSSRuleList: 0,
                CSSStyleDeclaration: 0,
                CSSValueList: 0,
                ClientRectList: 0,
                DOMRectList: 0,
                DOMStringList: 0,
                DOMTokenList: 1,
                DataTransferItemList: 0,
                FileList: 0,
                HTMLAllCollection: 0,
                HTMLCollection: 0,
                HTMLFormElement: 0,
                HTMLSelectElement: 0,
                MediaList: 0,
                MimeTypeArray: 0,
                NamedNodeMap: 0,
                NodeList: 1,
                PaintRequestList: 0,
                Plugin: 0,
                PluginArray: 0,
                SVGLengthList: 0,
                SVGNumberList: 0,
                SVGPathSegList: 0,
                SVGPointList: 0,
                SVGStringList: 0,
                SVGTransformList: 0,
                SourceBufferList: 0,
                StyleSheetList: 0,
                TextTrackCueList: 0,
                TextTrackList: 0,
                TouchList: 0
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/enum-bug-keys.js":
        /*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/enum-bug-keys.js ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

// IE8- don't enum bug keys
            module.exports = [
                'constructor',
                'hasOwnProperty',
                'isPrototypeOf',
                'propertyIsEnumerable',
                'toLocaleString',
                'toString',
                'valueOf'
            ];


            /***/ }),

        /***/ "./node_modules/core-js/internals/enum-keys.js":
        /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/enum-keys.js ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
            var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
            var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");

// all enumerable object keys, includes symbols
            module.exports = function (it) {
                var result = objectKeys(it);
                var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                if (getOwnPropertySymbols) {
                    var symbols = getOwnPropertySymbols(it);
                    var propertyIsEnumerable = propertyIsEnumerableModule.f;
                    var i = 0;
                    var key;
                    while (symbols.length > i) if (propertyIsEnumerable.call(it, key = symbols[i++])) result.push(key);
                } return result;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/export.js":
        /*!**************************************************!*\
  !*** ./node_modules/core-js/internals/export.js ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
            var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
            var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
            var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
            var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");
            var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");

            /*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
            module.exports = function (options, source) {
                var TARGET = options.target;
                var GLOBAL = options.global;
                var STATIC = options.stat;
                var FORCED, target, key, targetProperty, sourceProperty, descriptor;
                if (GLOBAL) {
                    target = global;
                } else if (STATIC) {
                    target = global[TARGET] || setGlobal(TARGET, {});
                } else {
                    target = (global[TARGET] || {}).prototype;
                }
                if (target) for (key in source) {
                    sourceProperty = source[key];
                    if (options.noTargetGet) {
                        descriptor = getOwnPropertyDescriptor(target, key);
                        targetProperty = descriptor && descriptor.value;
                    } else targetProperty = target[key];
                    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
                    // contained in target
                    if (!FORCED && targetProperty !== undefined) {
                        if (typeof sourceProperty === typeof targetProperty) continue;
                        copyConstructorProperties(sourceProperty, targetProperty);
                    }
                    // add a flag to not completely full polyfills
                    if (options.sham || (targetProperty && targetProperty.sham)) {
                        hide(sourceProperty, 'sham', true);
                    }
                    // extend global
                    redefine(target, key, sourceProperty, options);
                }
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/fails.js":
        /*!*************************************************!*\
  !*** ./node_modules/core-js/internals/fails.js ***!
  \*************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            module.exports = function (exec) {
                try {
                    return !!exec();
                } catch (error) {
                    return true;
                }
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js":
        /*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js ***!
  \******************************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
            var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
            var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");

            var SPECIES = wellKnownSymbol('species');

            var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
                // #replace needs built-in support for named groups.
                // #match works fine because it just return the exec results, even if it has
                // a "grops" property.
                var re = /./;
                re.exec = function () {
                    var result = [];
                    result.groups = { a: '7' };
                    return result;
                };
                return ''.replace(re, '$<a>') !== '7';
            });

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
            var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
                var re = /(?:)/;
                var originalExec = re.exec;
                re.exec = function () { return originalExec.apply(this, arguments); };
                var result = 'ab'.split(re);
                return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
            });

            module.exports = function (KEY, length, exec, sham) {
                var SYMBOL = wellKnownSymbol(KEY);

                var DELEGATES_TO_SYMBOL = !fails(function () {
                    // String methods call symbol-named RegEp methods
                    var O = {};
                    O[SYMBOL] = function () { return 7; };
                    return ''[KEY](O) != 7;
                });

                var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
                    // Symbol-named RegExp methods call .exec
                    var execCalled = false;
                    var re = /a/;
                    re.exec = function () { execCalled = true; return null; };

                    if (KEY === 'split') {
                        // RegExp[@@split] doesn't call the regex's exec method, but first creates
                        // a new one. We need to return the patched regex when creating the new one.
                        re.constructor = {};
                        re.constructor[SPECIES] = function () { return re; };
                    }

                    re[SYMBOL]('');
                    return !execCalled;
                });

                if (
                    !DELEGATES_TO_SYMBOL ||
                    !DELEGATES_TO_EXEC ||
                    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
                    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
                ) {
                    var nativeRegExpMethod = /./[SYMBOL];
                    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
                        if (regexp.exec === regexpExec) {
                            if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                                // The native String method already delegates to @@method (this
                                // polyfilled function), leasing to infinite recursion.
                                // We avoid it by directly calling the native @@method method.
                                return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
                            }
                            return { done: true, value: nativeMethod.call(str, regexp, arg2) };
                        }
                        return { done: false };
                    });
                    var stringMethod = methods[0];
                    var regexMethod = methods[1];

                    redefine(String.prototype, KEY, stringMethod);
                    redefine(RegExp.prototype, SYMBOL, length == 2
                        // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
                        // 21.2.5.11 RegExp.prototype[@@split](string, limit)
                        ? function (string, arg) { return regexMethod.call(string, this, arg); }
                        // 21.2.5.6 RegExp.prototype[@@match](string)
                        // 21.2.5.9 RegExp.prototype[@@search](string)
                        : function (string) { return regexMethod.call(string, this); }
                    );
                    if (sham) hide(RegExp.prototype[SYMBOL], 'sham', true);
                }
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/forced-string-trim-method.js":
        /*!*********************************************************************!*\
  !*** ./node_modules/core-js/internals/forced-string-trim-method.js ***!
  \*********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
            var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js");

            var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
            module.exports = function (METHOD_NAME) {
                return fails(function () {
                    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
                });
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/function-to-string.js":
        /*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/function-to-string.js ***!
  \**************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");

            module.exports = shared('native-function-to-string', Function.toString);


            /***/ }),

        /***/ "./node_modules/core-js/internals/get-built-in.js":
        /*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-built-in.js ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var path = __webpack_require__(/*! ../internals/path */ "./node_modules/core-js/internals/path.js");
            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

            var aFunction = function (variable) {
                return typeof variable == 'function' ? variable : undefined;
            };

            module.exports = function (namespace, method) {
                return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
                    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/get-iterator-method.js":
        /*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/get-iterator-method.js ***!
  \***************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
            var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

            var ITERATOR = wellKnownSymbol('iterator');

            module.exports = function (it) {
                if (it != undefined) return it[ITERATOR]
                    || it['@@iterator']
                    || Iterators[classof(it)];
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/global.js":
        /*!**************************************************!*\
  !*** ./node_modules/core-js/internals/global.js ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(global) {var O = 'object';
                var check = function (it) {
                    return it && it.Math == Math && it;
                };

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
                module.exports =
                    // eslint-disable-next-line no-undef
                    check(typeof globalThis == O && globalThis) ||
                    check(typeof window == O && window) ||
                    check(typeof self == O && self) ||
                    check(typeof global == O && global) ||
                    // eslint-disable-next-line no-new-func
                    Function('return this')();

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

            /***/ }),

        /***/ "./node_modules/core-js/internals/has.js":
        /*!***********************************************!*\
  !*** ./node_modules/core-js/internals/has.js ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            var hasOwnProperty = {}.hasOwnProperty;

            module.exports = function (it, key) {
                return hasOwnProperty.call(it, key);
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/hidden-keys.js":
        /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/hidden-keys.js ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            module.exports = {};


            /***/ }),

        /***/ "./node_modules/core-js/internals/hide.js":
        /*!************************************************!*\
  !*** ./node_modules/core-js/internals/hide.js ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
            var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
            var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

            module.exports = DESCRIPTORS ? function (object, key, value) {
                return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
            } : function (object, key, value) {
                object[key] = value;
                return object;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/host-report-errors.js":
        /*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/host-report-errors.js ***!
  \**************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

            module.exports = function (a, b) {
                var console = global.console;
                if (console && console.error) {
                    arguments.length === 1 ? console.error(a) : console.error(a, b);
                }
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/html.js":
        /*!************************************************!*\
  !*** ./node_modules/core-js/internals/html.js ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

            var document = global.document;

            module.exports = document && document.documentElement;


            /***/ }),

        /***/ "./node_modules/core-js/internals/ie8-dom-define.js":
        /*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/ie8-dom-define.js ***!
  \**********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
            var createElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");

// Thank's IE8 for his funny defineProperty
            module.exports = !DESCRIPTORS && !fails(function () {
                return Object.defineProperty(createElement('div'), 'a', {
                    get: function () { return 7; }
                }).a != 7;
            });


            /***/ }),

        /***/ "./node_modules/core-js/internals/indexed-object.js":
        /*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/indexed-object.js ***!
  \**********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
            var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

            var split = ''.split;

            module.exports = fails(function () {
                // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
                // eslint-disable-next-line no-prototype-builtins
                return !Object('z').propertyIsEnumerable(0);
            }) ? function (it) {
                return classof(it) == 'String' ? split.call(it, '') : Object(it);
            } : Object;


            /***/ }),

        /***/ "./node_modules/core-js/internals/inherit-if-required.js":
        /*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/inherit-if-required.js ***!
  \***************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
            var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");

            module.exports = function (that, target, C) {
                var S = target.constructor;
                var P;
                if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
                    setPrototypeOf(that, P);
                } return that;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/internal-state.js":
        /*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/internal-state.js ***!
  \**********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/native-weak-map */ "./node_modules/core-js/internals/native-weak-map.js");
            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
            var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
            var objectHas = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
            var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
            var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

            var WeakMap = global.WeakMap;
            var set, get, has;

            var enforce = function (it) {
                return has(it) ? get(it) : set(it, {});
            };

            var getterFor = function (TYPE) {
                return function (it) {
                    var state;
                    if (!isObject(it) || (state = get(it)).type !== TYPE) {
                        throw TypeError('Incompatible receiver, ' + TYPE + ' required');
                    } return state;
                };
            };

            if (NATIVE_WEAK_MAP) {
                var store = new WeakMap();
                var wmget = store.get;
                var wmhas = store.has;
                var wmset = store.set;
                set = function (it, metadata) {
                    wmset.call(store, it, metadata);
                    return metadata;
                };
                get = function (it) {
                    return wmget.call(store, it) || {};
                };
                has = function (it) {
                    return wmhas.call(store, it);
                };
            } else {
                var STATE = sharedKey('state');
                hiddenKeys[STATE] = true;
                set = function (it, metadata) {
                    hide(it, STATE, metadata);
                    return metadata;
                };
                get = function (it) {
                    return objectHas(it, STATE) ? it[STATE] : {};
                };
                has = function (it) {
                    return objectHas(it, STATE);
                };
            }

            module.exports = {
                set: set,
                get: get,
                has: has,
                enforce: enforce,
                getterFor: getterFor
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/is-array-iterator-method.js":
        /*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/is-array-iterator-method.js ***!
  \********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
            var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

            var ITERATOR = wellKnownSymbol('iterator');
            var ArrayPrototype = Array.prototype;

// check on default Array iterator
            module.exports = function (it) {
                return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/is-array.js":
        /*!****************************************************!*\
  !*** ./node_modules/core-js/internals/is-array.js ***!
  \****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

// `IsArray` abstract operation
// https://tc39.github.io/ecma262/#sec-isarray
            module.exports = Array.isArray || function isArray(arg) {
                return classof(arg) == 'Array';
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/is-forced.js":
        /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-forced.js ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

            var replacement = /#|\.prototype\./;

            var isForced = function (feature, detection) {
                var value = data[normalize(feature)];
                return value == POLYFILL ? true
                    : value == NATIVE ? false
                        : typeof detection == 'function' ? fails(detection)
                            : !!detection;
            };

            var normalize = isForced.normalize = function (string) {
                return String(string).replace(replacement, '.').toLowerCase();
            };

            var data = isForced.data = {};
            var NATIVE = isForced.NATIVE = 'N';
            var POLYFILL = isForced.POLYFILL = 'P';

            module.exports = isForced;


            /***/ }),

        /***/ "./node_modules/core-js/internals/is-object.js":
        /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-object.js ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            module.exports = function (it) {
                return typeof it === 'object' ? it !== null : typeof it === 'function';
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/is-pure.js":
        /*!***************************************************!*\
  !*** ./node_modules/core-js/internals/is-pure.js ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            module.exports = false;


            /***/ }),

        /***/ "./node_modules/core-js/internals/is-regexp.js":
        /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-regexp.js ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
            var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

            var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.github.io/ecma262/#sec-isregexp
            module.exports = function (it) {
                var isRegExp;
                return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/iterate.js":
        /*!***************************************************!*\
  !*** ./node_modules/core-js/internals/iterate.js ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
            var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "./node_modules/core-js/internals/is-array-iterator-method.js");
            var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
            var bind = __webpack_require__(/*! ../internals/bind-context */ "./node_modules/core-js/internals/bind-context.js");
            var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");
            var callWithSafeIterationClosing = __webpack_require__(/*! ../internals/call-with-safe-iteration-closing */ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js");

            var BREAK = {};

            var exports = module.exports = function (iterable, fn, that, ENTRIES, ITERATOR) {
                var boundFunction = bind(fn, that, ENTRIES ? 2 : 1);
                var iterator, iterFn, index, length, result, step;

                if (ITERATOR) {
                    iterator = iterable;
                } else {
                    iterFn = getIteratorMethod(iterable);
                    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
                    // optimisation for array iterators
                    if (isArrayIteratorMethod(iterFn)) {
                        for (index = 0, length = toLength(iterable.length); length > index; index++) {
                            result = ENTRIES ? boundFunction(anObject(step = iterable[index])[0], step[1]) : boundFunction(iterable[index]);
                            if (result === BREAK) return BREAK;
                        } return;
                    }
                    iterator = iterFn.call(iterable);
                }

                while (!(step = iterator.next()).done) {
                    if (callWithSafeIterationClosing(iterator, boundFunction, step.value, ENTRIES) === BREAK) return BREAK;
                }
            };

            exports.BREAK = BREAK;


            /***/ }),

        /***/ "./node_modules/core-js/internals/iterators-core.js":
        /*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/iterators-core.js ***!
  \**********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
            var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
            var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
            var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

            var ITERATOR = wellKnownSymbol('iterator');
            var BUGGY_SAFARI_ITERATORS = false;

            var returnThis = function () { return this; };

// `%IteratorPrototype%` object
// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
            var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

            if ([].keys) {
                arrayIterator = [].keys();
                // Safari 8 has buggy iterators w/o `next`
                if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
                else {
                    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
                    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
                }
            }

            if (IteratorPrototype == undefined) IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
            if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);

            module.exports = {
                IteratorPrototype: IteratorPrototype,
                BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/iterators.js":
        /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/iterators.js ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            module.exports = {};


            /***/ }),

        /***/ "./node_modules/core-js/internals/microtask.js":
        /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/microtask.js ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
            var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
            var macrotask = __webpack_require__(/*! ../internals/task */ "./node_modules/core-js/internals/task.js").set;
            var userAgent = __webpack_require__(/*! ../internals/user-agent */ "./node_modules/core-js/internals/user-agent.js");

            var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
            var process = global.process;
            var Promise = global.Promise;
            var IS_NODE = classof(process) == 'process';
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
            var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
            var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

            var flush, head, last, notify, toggle, node, promise;

// modern engines have queueMicrotask method
            if (!queueMicrotask) {
                flush = function () {
                    var parent, fn;
                    if (IS_NODE && (parent = process.domain)) parent.exit();
                    while (head) {
                        fn = head.fn;
                        head = head.next;
                        try {
                            fn();
                        } catch (error) {
                            if (head) notify();
                            else last = undefined;
                            throw error;
                        }
                    } last = undefined;
                    if (parent) parent.enter();
                };

                // Node.js
                if (IS_NODE) {
                    notify = function () {
                        process.nextTick(flush);
                    };
                    // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
                } else if (MutationObserver && !/(iphone|ipod|ipad).*applewebkit/i.test(userAgent)) {
                    toggle = true;
                    node = document.createTextNode('');
                    new MutationObserver(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
                    notify = function () {
                        node.data = toggle = !toggle;
                    };
                    // environments with maybe non-completely correct, but existent Promise
                } else if (Promise && Promise.resolve) {
                    // Promise.resolve without an argument throws an error in LG WebOS 2
                    promise = Promise.resolve(undefined);
                    notify = function () {
                        promise.then(flush);
                    };
                    // for other environments - macrotask based on:
                    // - setImmediate
                    // - MessageChannel
                    // - window.postMessag
                    // - onreadystatechange
                    // - setTimeout
                } else {
                    notify = function () {
                        // strange IE + webpack dev server bug - use .call(global)
                        macrotask.call(global, flush);
                    };
                }
            }

            module.exports = queueMicrotask || function (fn) {
                var task = { fn: fn, next: undefined };
                if (last) last.next = task;
                if (!head) {
                    head = task;
                    notify();
                } last = task;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/native-symbol.js":
        /*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/native-symbol.js ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

            module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
                // Chrome 38 Symbol has incorrect toString conversion
                // eslint-disable-next-line no-undef
                return !String(Symbol());
            });


            /***/ }),

        /***/ "./node_modules/core-js/internals/native-weak-map.js":
        /*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/native-weak-map.js ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var nativeFunctionToString = __webpack_require__(/*! ../internals/function-to-string */ "./node_modules/core-js/internals/function-to-string.js");

            var WeakMap = global.WeakMap;

            module.exports = typeof WeakMap === 'function' && /native code/.test(nativeFunctionToString.call(WeakMap));


            /***/ }),

        /***/ "./node_modules/core-js/internals/new-promise-capability.js":
        /*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/new-promise-capability.js ***!
  \******************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");

            var PromiseCapability = function (C) {
                var resolve, reject;
                this.promise = new C(function ($$resolve, $$reject) {
                    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
                    resolve = $$resolve;
                    reject = $$reject;
                });
                this.resolve = aFunction(resolve);
                this.reject = aFunction(reject);
            };

// 25.4.1.5 NewPromiseCapability(C)
            module.exports.f = function (C) {
                return new PromiseCapability(C);
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-assign.js":
        /*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-assign.js ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
            var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
            var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
            var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
            var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
            var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");

            var nativeAssign = Object.assign;

// 19.1.2.1 Object.assign(target, source, ...)
// should work with symbols and should have deterministic property order (V8 bug)
            module.exports = !nativeAssign || fails(function () {
                var A = {};
                var B = {};
                // eslint-disable-next-line no-undef
                var symbol = Symbol();
                var alphabet = 'abcdefghijklmnopqrst';
                A[symbol] = 7;
                alphabet.split('').forEach(function (chr) { B[chr] = chr; });
                return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
            }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
                var T = toObject(target);
                var argumentsLength = arguments.length;
                var index = 1;
                var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                var propertyIsEnumerable = propertyIsEnumerableModule.f;
                while (argumentsLength > index) {
                    var S = IndexedObject(arguments[index++]);
                    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
                    var length = keys.length;
                    var j = 0;
                    var key;
                    while (length > j) {
                        key = keys[j++];
                        if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
                    }
                } return T;
            } : nativeAssign;


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-create.js":
        /*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-create.js ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
            var defineProperties = __webpack_require__(/*! ../internals/object-define-properties */ "./node_modules/core-js/internals/object-define-properties.js");
            var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");
            var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
            var html = __webpack_require__(/*! ../internals/html */ "./node_modules/core-js/internals/html.js");
            var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");
            var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
            var IE_PROTO = sharedKey('IE_PROTO');

            var PROTOTYPE = 'prototype';
            var Empty = function () { /* empty */ };

// Create object with fake `null` prototype: use iframe Object with cleared prototype
            var createDict = function () {
                // Thrash, waste and sodomy: IE GC bug
                var iframe = documentCreateElement('iframe');
                var length = enumBugKeys.length;
                var lt = '<';
                var script = 'script';
                var gt = '>';
                var js = 'java' + script + ':';
                var iframeDocument;
                iframe.style.display = 'none';
                html.appendChild(iframe);
                iframe.src = String(js);
                iframeDocument = iframe.contentWindow.document;
                iframeDocument.open();
                iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);
                iframeDocument.close();
                createDict = iframeDocument.F;
                while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];
                return createDict();
            };

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
            module.exports = Object.create || function create(O, Properties) {
                var result;
                if (O !== null) {
                    Empty[PROTOTYPE] = anObject(O);
                    result = new Empty();
                    Empty[PROTOTYPE] = null;
                    // add "__proto__" for Object.getPrototypeOf polyfill
                    result[IE_PROTO] = O;
                } else result = createDict();
                return Properties === undefined ? result : defineProperties(result, Properties);
            };

            hiddenKeys[IE_PROTO] = true;


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-define-properties.js":
        /*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-properties.js ***!
  \********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
            var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
            var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");

            module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
                anObject(O);
                var keys = objectKeys(Properties);
                var length = keys.length;
                var i = 0;
                var key;
                while (length > i) definePropertyModule.f(O, key = keys[i++], Properties[key]);
                return O;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-define-property.js":
        /*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-property.js ***!
  \******************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
            var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");
            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
            var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");

            var nativeDefineProperty = Object.defineProperty;

            exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
                anObject(O);
                P = toPrimitive(P, true);
                anObject(Attributes);
                if (IE8_DOM_DEFINE) try {
                    return nativeDefineProperty(O, P, Attributes);
                } catch (error) { /* empty */ }
                if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
                if ('value' in Attributes) O[P] = Attributes.value;
                return O;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-get-own-property-descriptor.js":
        /*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \******************************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
            var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
            var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
            var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
            var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
            var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
            var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");

            var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

            exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
                O = toIndexedObject(O);
                P = toPrimitive(P, true);
                if (IE8_DOM_DEFINE) try {
                    return nativeGetOwnPropertyDescriptor(O, P);
                } catch (error) { /* empty */ }
                if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-get-own-property-names-external.js":
        /*!**********************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names-external.js ***!
  \**********************************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
            var nativeGetOwnPropertyNames = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f;

            var toString = {}.toString;

            var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
                ? Object.getOwnPropertyNames(window) : [];

            var getWindowNames = function (it) {
                try {
                    return nativeGetOwnPropertyNames(it);
                } catch (error) {
                    return windowNames.slice();
                }
            };

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
            module.exports.f = function getOwnPropertyNames(it) {
                return windowNames && toString.call(it) == '[object Window]'
                    ? getWindowNames(it)
                    : nativeGetOwnPropertyNames(toIndexedObject(it));
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-get-own-property-names.js":
        /*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!
  \*************************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
            var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
            var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

            var hiddenKeys = enumBugKeys.concat('length', 'prototype');

            exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                return internalObjectKeys(O, hiddenKeys);
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-get-own-property-symbols.js":
        /*!***************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \***************************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            exports.f = Object.getOwnPropertySymbols;


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-get-prototype-of.js":
        /*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-prototype-of.js ***!
  \*******************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
            var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
            var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
            var CORRECT_PROTOTYPE_GETTER = __webpack_require__(/*! ../internals/correct-prototype-getter */ "./node_modules/core-js/internals/correct-prototype-getter.js");

            var IE_PROTO = sharedKey('IE_PROTO');
            var ObjectPrototype = Object.prototype;

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
            module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
                O = toObject(O);
                if (has(O, IE_PROTO)) return O[IE_PROTO];
                if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                    return O.constructor.prototype;
                } return O instanceof Object ? ObjectPrototype : null;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-keys-internal.js":
        /*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys-internal.js ***!
  \****************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
            var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
            var arrayIncludes = __webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js");
            var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

            var arrayIndexOf = arrayIncludes(false);

            module.exports = function (object, names) {
                var O = toIndexedObject(object);
                var i = 0;
                var result = [];
                var key;
                for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
                // Don't enum bug & hidden keys
                while (names.length > i) if (has(O, key = names[i++])) {
                    ~arrayIndexOf(result, key) || result.push(key);
                }
                return result;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-keys.js":
        /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys.js ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
            var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
            module.exports = Object.keys || function keys(O) {
                return internalObjectKeys(O, enumBugKeys);
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-property-is-enumerable.js":
        /*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \*************************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
            var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
            var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

            exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
                var descriptor = getOwnPropertyDescriptor(this, V);
                return !!descriptor && descriptor.enumerable;
            } : nativePropertyIsEnumerable;


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-set-prototype-of.js":
        /*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-set-prototype-of.js ***!
  \*******************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var validateSetPrototypeOfArguments = __webpack_require__(/*! ../internals/validate-set-prototype-of-arguments */ "./node_modules/core-js/internals/validate-set-prototype-of-arguments.js");

// Works with __proto__ only. Old v8 can't work with null proto objects.
            /* eslint-disable no-proto */
            module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
                var correctSetter = false;
                var test = {};
                var setter;
                try {
                    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
                    setter.call(test, []);
                    correctSetter = test instanceof Array;
                } catch (error) { /* empty */ }
                return function setPrototypeOf(O, proto) {
                    validateSetPrototypeOfArguments(O, proto);
                    if (correctSetter) setter.call(O, proto);
                    else O.__proto__ = proto;
                    return O;
                };
            }() : undefined);


            /***/ }),

        /***/ "./node_modules/core-js/internals/object-to-string.js":
        /*!************************************************************!*\
  !*** ./node_modules/core-js/internals/object-to-string.js ***!
  \************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

            var TO_STRING_TAG = wellKnownSymbol('toStringTag');
            var test = {};

            test[TO_STRING_TAG] = 'z';

// `Object.prototype.toString` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
            module.exports = String(test) !== '[object z]' ? function toString() {
                return '[object ' + classof(this) + ']';
            } : test.toString;


            /***/ }),

        /***/ "./node_modules/core-js/internals/own-keys.js":
        /*!****************************************************!*\
  !*** ./node_modules/core-js/internals/own-keys.js ***!
  \****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
            var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

            var Reflect = global.Reflect;

// all object keys, includes non-enumerable and symbols
            module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
                var keys = getOwnPropertyNamesModule.f(anObject(it));
                var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/parse-float.js":
        /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/parse-float.js ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var internalStringTrim = __webpack_require__(/*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js");
            var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js");

            var nativeParseFloat = global.parseFloat;
            var FORCED = 1 / nativeParseFloat(whitespaces + '-0') !== -Infinity;

            module.exports = FORCED ? function parseFloat(str) {
                var string = internalStringTrim(String(str), 3);
                var result = nativeParseFloat(string);
                return result === 0 && string.charAt(0) == '-' ? -0 : result;
            } : nativeParseFloat;


            /***/ }),

        /***/ "./node_modules/core-js/internals/path.js":
        /*!************************************************!*\
  !*** ./node_modules/core-js/internals/path.js ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");


            /***/ }),

        /***/ "./node_modules/core-js/internals/perform.js":
        /*!***************************************************!*\
  !*** ./node_modules/core-js/internals/perform.js ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            module.exports = function (exec) {
                try {
                    return { error: false, value: exec() };
                } catch (error) {
                    return { error: true, value: error };
                }
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/promise-resolve.js":
        /*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/promise-resolve.js ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
            var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
            var newPromiseCapability = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");

            module.exports = function (C, x) {
                anObject(C);
                if (isObject(x) && x.constructor === C) return x;
                var promiseCapability = newPromiseCapability.f(C);
                var resolve = promiseCapability.resolve;
                resolve(x);
                return promiseCapability.promise;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/redefine-all.js":
        /*!********************************************************!*\
  !*** ./node_modules/core-js/internals/redefine-all.js ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");

            module.exports = function (target, src, options) {
                for (var key in src) redefine(target, key, src[key], options);
                return target;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/redefine.js":
        /*!****************************************************!*\
  !*** ./node_modules/core-js/internals/redefine.js ***!
  \****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
            var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
            var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
            var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
            var nativeFunctionToString = __webpack_require__(/*! ../internals/function-to-string */ "./node_modules/core-js/internals/function-to-string.js");
            var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

            var getInternalState = InternalStateModule.get;
            var enforceInternalState = InternalStateModule.enforce;
            var TEMPLATE = String(nativeFunctionToString).split('toString');

            shared('inspectSource', function (it) {
                return nativeFunctionToString.call(it);
            });

            (module.exports = function (O, key, value, options) {
                var unsafe = options ? !!options.unsafe : false;
                var simple = options ? !!options.enumerable : false;
                var noTargetGet = options ? !!options.noTargetGet : false;
                if (typeof value == 'function') {
                    if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);
                    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
                }
                if (O === global) {
                    if (simple) O[key] = value;
                    else setGlobal(key, value);
                    return;
                } else if (!unsafe) {
                    delete O[key];
                } else if (!noTargetGet && O[key]) {
                    simple = true;
                }
                if (simple) O[key] = value;
                else hide(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
            })(Function.prototype, 'toString', function toString() {
                return typeof this == 'function' && getInternalState(this).source || nativeFunctionToString.call(this);
            });


            /***/ }),

        /***/ "./node_modules/core-js/internals/regexp-exec-abstract.js":
        /*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-exec-abstract.js ***!
  \****************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var classof = __webpack_require__(/*! ./classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
            var regexpExec = __webpack_require__(/*! ./regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");

// `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
            module.exports = function (R, S) {
                var exec = R.exec;
                if (typeof exec === 'function') {
                    var result = exec.call(R, S);
                    if (typeof result !== 'object') {
                        throw TypeError('RegExp exec method returned something other than an Object or null');
                    }
                    return result;
                }

                if (classof(R) !== 'RegExp') {
                    throw TypeError('RegExp#exec called on incompatible receiver');
                }

                return regexpExec.call(R, S);
            };



            /***/ }),

        /***/ "./node_modules/core-js/internals/regexp-exec.js":
        /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-exec.js ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var regexpFlags = __webpack_require__(/*! ./regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");

            var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
            var nativeReplace = String.prototype.replace;

            var patchedExec = nativeExec;

            var UPDATES_LAST_INDEX_WRONG = (function () {
                var re1 = /a/;
                var re2 = /b*/g;
                nativeExec.call(re1, 'a');
                nativeExec.call(re2, 'a');
                return re1.lastIndex !== 0 || re2.lastIndex !== 0;
            })();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
            var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

            var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

            if (PATCH) {
                patchedExec = function exec(str) {
                    var re = this;
                    var lastIndex, reCopy, match, i;

                    if (NPCG_INCLUDED) {
                        reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
                    }
                    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

                    match = nativeExec.call(re, str);

                    if (UPDATES_LAST_INDEX_WRONG && match) {
                        re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
                    }
                    if (NPCG_INCLUDED && match && match.length > 1) {
                        // Fix browsers whose `exec` methods don't consistently return `undefined`
                        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
                        nativeReplace.call(match[0], reCopy, function () {
                            for (i = 1; i < arguments.length - 2; i++) {
                                if (arguments[i] === undefined) match[i] = undefined;
                            }
                        });
                    }

                    return match;
                };
            }

            module.exports = patchedExec;


            /***/ }),

        /***/ "./node_modules/core-js/internals/regexp-flags.js":
        /*!********************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-flags.js ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

// `RegExp.prototype.flags` getter implementation
// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
            module.exports = function () {
                var that = anObject(this);
                var result = '';
                if (that.global) result += 'g';
                if (that.ignoreCase) result += 'i';
                if (that.multiline) result += 'm';
                if (that.unicode) result += 'u';
                if (that.sticky) result += 'y';
                return result;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/require-object-coercible.js":
        /*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/require-object-coercible.js ***!
  \********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

// `RequireObjectCoercible` abstract operation
// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
            module.exports = function (it) {
                if (it == undefined) throw TypeError("Can't call method on " + it);
                return it;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/set-global.js":
        /*!******************************************************!*\
  !*** ./node_modules/core-js/internals/set-global.js ***!
  \******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");

            module.exports = function (key, value) {
                try {
                    hide(global, key, value);
                } catch (error) {
                    global[key] = value;
                } return value;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/set-species.js":
        /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/set-species.js ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
            var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
            var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");

            var SPECIES = wellKnownSymbol('species');

            module.exports = function (CONSTRUCTOR_NAME) {
                var C = getBuiltIn(CONSTRUCTOR_NAME);
                var defineProperty = definePropertyModule.f;
                if (DESCRIPTORS && C && !C[SPECIES]) defineProperty(C, SPECIES, {
                    configurable: true,
                    get: function () { return this; }
                });
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/set-to-string-tag.js":
        /*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/set-to-string-tag.js ***!
  \*************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
            var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

            var TO_STRING_TAG = wellKnownSymbol('toStringTag');

            module.exports = function (it, TAG, STATIC) {
                if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
                    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
                }
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/shared-key.js":
        /*!******************************************************!*\
  !*** ./node_modules/core-js/internals/shared-key.js ***!
  \******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
            var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");

            var keys = shared('keys');

            module.exports = function (key) {
                return keys[key] || (keys[key] = uid(key));
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/shared.js":
        /*!**************************************************!*\
  !*** ./node_modules/core-js/internals/shared.js ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
            var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

            var SHARED = '__core-js_shared__';
            var store = global[SHARED] || setGlobal(SHARED, {});

            (module.exports = function (key, value) {
                return store[key] || (store[key] = value !== undefined ? value : {});
            })('versions', []).push({
                version: '3.1.3',
                mode: IS_PURE ? 'pure' : 'global',
                copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
            });


            /***/ }),

        /***/ "./node_modules/core-js/internals/sloppy-array-method.js":
        /*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/sloppy-array-method.js ***!
  \***************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

            module.exports = function (METHOD_NAME, argument) {
                var method = [][METHOD_NAME];
                return !method || !fails(function () {
                    // eslint-disable-next-line no-useless-call,no-throw-literal
                    method.call(null, argument || function () { throw 1; }, 1);
                });
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/species-constructor.js":
        /*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/species-constructor.js ***!
  \***************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
            var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

            var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.github.io/ecma262/#sec-speciesconstructor
            module.exports = function (O, defaultConstructor) {
                var C = anObject(O).constructor;
                var S;
                return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/string-at.js":
        /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/string-at.js ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
            var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

// CONVERT_TO_STRING: true  -> String#at
// CONVERT_TO_STRING: false -> String#codePointAt
            module.exports = function (that, pos, CONVERT_TO_STRING) {
                var S = String(requireObjectCoercible(that));
                var position = toInteger(pos);
                var size = S.length;
                var first, second;
                if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
                first = S.charCodeAt(position);
                return first < 0xD800 || first > 0xDBFF || position + 1 === size
                || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
                    ? CONVERT_TO_STRING ? S.charAt(position) : first
                    : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/string-trim.js":
        /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/string-trim.js ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
            var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js");

            var whitespace = '[' + whitespaces + ']';
            var ltrim = RegExp('^' + whitespace + whitespace + '*');
            var rtrim = RegExp(whitespace + whitespace + '*$');

// 1 -> String#trimStart
// 2 -> String#trimEnd
// 3 -> String#trim
            module.exports = function (string, TYPE) {
                string = String(requireObjectCoercible(string));
                if (TYPE & 1) string = string.replace(ltrim, '');
                if (TYPE & 2) string = string.replace(rtrim, '');
                return string;
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/task.js":
        /*!************************************************!*\
  !*** ./node_modules/core-js/internals/task.js ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
            var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
            var bind = __webpack_require__(/*! ../internals/bind-context */ "./node_modules/core-js/internals/bind-context.js");
            var html = __webpack_require__(/*! ../internals/html */ "./node_modules/core-js/internals/html.js");
            var createElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");

            var location = global.location;
            var set = global.setImmediate;
            var clear = global.clearImmediate;
            var process = global.process;
            var MessageChannel = global.MessageChannel;
            var Dispatch = global.Dispatch;
            var counter = 0;
            var queue = {};
            var ONREADYSTATECHANGE = 'onreadystatechange';
            var defer, channel, port;

            var run = function (id) {
                // eslint-disable-next-line no-prototype-builtins
                if (queue.hasOwnProperty(id)) {
                    var fn = queue[id];
                    delete queue[id];
                    fn();
                }
            };

            var runner = function (id) {
                return function () {
                    run(id);
                };
            };

            var listener = function (event) {
                run(event.data);
            };

            var post = function (id) {
                // old engines have not location.origin
                global.postMessage(id + '', location.protocol + '//' + location.host);
            };

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
            if (!set || !clear) {
                set = function setImmediate(fn) {
                    var args = [];
                    var i = 1;
                    while (arguments.length > i) args.push(arguments[i++]);
                    queue[++counter] = function () {
                        // eslint-disable-next-line no-new-func
                        (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
                    };
                    defer(counter);
                    return counter;
                };
                clear = function clearImmediate(id) {
                    delete queue[id];
                };
                // Node.js 0.8-
                if (classof(process) == 'process') {
                    defer = function (id) {
                        process.nextTick(runner(id));
                    };
                    // Sphere (JS game engine) Dispatch API
                } else if (Dispatch && Dispatch.now) {
                    defer = function (id) {
                        Dispatch.now(runner(id));
                    };
                    // Browsers with MessageChannel, includes WebWorkers
                } else if (MessageChannel) {
                    channel = new MessageChannel();
                    port = channel.port2;
                    channel.port1.onmessage = listener;
                    defer = bind(port.postMessage, port, 1);
                    // Browsers with postMessage, skip WebWorkers
                    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
                } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts && !fails(post)) {
                    defer = post;
                    global.addEventListener('message', listener, false);
                    // IE8-
                } else if (ONREADYSTATECHANGE in createElement('script')) {
                    defer = function (id) {
                        html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
                            html.removeChild(this);
                            run(id);
                        };
                    };
                    // Rest old browsers
                } else {
                    defer = function (id) {
                        setTimeout(runner(id), 0);
                    };
                }
            }

            module.exports = {
                set: set,
                clear: clear
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/to-absolute-index.js":
        /*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-absolute-index.js ***!
  \*************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");

            var max = Math.max;
            var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).
            module.exports = function (index, length) {
                var integer = toInteger(index);
                return integer < 0 ? max(integer + length, 0) : min(integer, length);
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/to-indexed-object.js":
        /*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-indexed-object.js ***!
  \*************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
            var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
            var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

            module.exports = function (it) {
                return IndexedObject(requireObjectCoercible(it));
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/to-integer.js":
        /*!******************************************************!*\
  !*** ./node_modules/core-js/internals/to-integer.js ***!
  \******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            var ceil = Math.ceil;
            var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.github.io/ecma262/#sec-tointeger
            module.exports = function (argument) {
                return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/to-length.js":
        /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-length.js ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");

            var min = Math.min;

// `ToLength` abstract operation
// https://tc39.github.io/ecma262/#sec-tolength
            module.exports = function (argument) {
                return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/to-object.js":
        /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-object.js ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

// `ToObject` abstract operation
// https://tc39.github.io/ecma262/#sec-toobject
            module.exports = function (argument) {
                return Object(requireObjectCoercible(argument));
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/to-primitive.js":
        /*!********************************************************!*\
  !*** ./node_modules/core-js/internals/to-primitive.js ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

// 7.1.1 ToPrimitive(input [, PreferredType])
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
            module.exports = function (it, S) {
                if (!isObject(it)) return it;
                var fn, val;
                if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
                if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
                if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
                throw TypeError("Can't convert object to primitive value");
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/uid.js":
        /*!***********************************************!*\
  !*** ./node_modules/core-js/internals/uid.js ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            var id = 0;
            var postfix = Math.random();

            module.exports = function (key) {
                return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + postfix).toString(36));
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/user-agent.js":
        /*!******************************************************!*\
  !*** ./node_modules/core-js/internals/user-agent.js ***!
  \******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

            var navigator = global.navigator;

            module.exports = navigator && navigator.userAgent || '';


            /***/ }),

        /***/ "./node_modules/core-js/internals/validate-set-prototype-of-arguments.js":
        /*!*******************************************************************************!*\
  !*** ./node_modules/core-js/internals/validate-set-prototype-of-arguments.js ***!
  \*******************************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

            module.exports = function (O, proto) {
                anObject(O);
                if (!isObject(proto) && proto !== null) {
                    throw TypeError("Can't set " + String(proto) + ' as a prototype');
                }
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/well-known-symbol.js":
        /*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/well-known-symbol.js ***!
  \*************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
            var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
            var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");

            var Symbol = global.Symbol;
            var store = shared('wks');

            module.exports = function (name) {
                return store[name] || (store[name] = NATIVE_SYMBOL && Symbol[name]
                    || (NATIVE_SYMBOL ? Symbol : uid)('Symbol.' + name));
            };


            /***/ }),

        /***/ "./node_modules/core-js/internals/whitespaces.js":
        /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/whitespaces.js ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

// a string of all valid unicode whitespaces
// eslint-disable-next-line max-len
            module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


            /***/ }),

        /***/ "./node_modules/core-js/internals/wrapped-well-known-symbol.js":
        /*!*********************************************************************!*\
  !*** ./node_modules/core-js/internals/wrapped-well-known-symbol.js ***!
  \*********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            exports.f = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.array.filter.js":
        /*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.filter.js ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var arrayMethods = __webpack_require__(/*! ../internals/array-methods */ "./node_modules/core-js/internals/array-methods.js");
            var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");

            var internalFilter = arrayMethods(2);
            var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');

// `Array.prototype.filter` method
// https://tc39.github.io/ecma262/#sec-array.prototype.filter
// with adding support of @@species
            $({ target: 'Array', proto: true, forced: !SPECIES_SUPPORT }, {
                filter: function filter(callbackfn /* , thisArg */) {
                    return internalFilter(this, callbackfn, arguments[1]);
                }
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.array.find.js":
        /*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.find.js ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var arrayMethods = __webpack_require__(/*! ../internals/array-methods */ "./node_modules/core-js/internals/array-methods.js");
            var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");

            var internalFind = arrayMethods(5);
            var FIND = 'find';
            var SKIPS_HOLES = true;

// Shouldn't skip holes
            if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

// `Array.prototype.find` method
// https://tc39.github.io/ecma262/#sec-array.prototype.find
            $({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
                find: function find(callbackfn /* , that = undefined */) {
                    return internalFind(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                }
            });

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
            addToUnscopables(FIND);


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.array.for-each.js":
        /*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.for-each.js ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var forEach = __webpack_require__(/*! ../internals/array-for-each */ "./node_modules/core-js/internals/array-for-each.js");

// `Array.prototype.forEach` method
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
            $({ target: 'Array', proto: true, forced: [].forEach != forEach }, {
                forEach: forEach
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.array.index-of.js":
        /*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.index-of.js ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var sloppyArrayMethod = __webpack_require__(/*! ../internals/sloppy-array-method */ "./node_modules/core-js/internals/sloppy-array-method.js");
            var arrayIncludes = __webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js");

            var internalIndexOf = arrayIncludes(false);
            var nativeIndexOf = [].indexOf;

            var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
            var SLOPPY_METHOD = sloppyArrayMethod('indexOf');

// `Array.prototype.indexOf` method
// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
            $({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || SLOPPY_METHOD }, {
                indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
                    return NEGATIVE_ZERO
                        // convert -0 to +0
                        ? nativeIndexOf.apply(this, arguments) || 0
                        : internalIndexOf(this, searchElement, arguments[1]);
                }
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.array.iterator.js":
        /*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.iterator.js ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
            var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");
            var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
            var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
            var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");

            var ARRAY_ITERATOR = 'Array Iterator';
            var setInternalState = InternalStateModule.set;
            var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.github.io/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.github.io/ecma262/#sec-createarrayiterator
            module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
                setInternalState(this, {
                    type: ARRAY_ITERATOR,
                    target: toIndexedObject(iterated), // target
                    index: 0,                          // next index
                    kind: kind                         // kind
                });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
            }, function () {
                var state = getInternalState(this);
                var target = state.target;
                var kind = state.kind;
                var index = state.index++;
                if (!target || index >= target.length) {
                    state.target = undefined;
                    return { value: undefined, done: true };
                }
                if (kind == 'keys') return { value: index, done: false };
                if (kind == 'values') return { value: target[index], done: false };
                return { value: [index, target[index]], done: false };
            }, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
            Iterators.Arguments = Iterators.Array;

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
            addToUnscopables('keys');
            addToUnscopables('values');
            addToUnscopables('entries');


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.array.join.js":
        /*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.join.js ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
            var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
            var sloppyArrayMethod = __webpack_require__(/*! ../internals/sloppy-array-method */ "./node_modules/core-js/internals/sloppy-array-method.js");

            var nativeJoin = [].join;

            var ES3_STRINGS = IndexedObject != Object;
            var SLOPPY_METHOD = sloppyArrayMethod('join', ',');

// `Array.prototype.join` method
// https://tc39.github.io/ecma262/#sec-array.prototype.join
            $({ target: 'Array', proto: true, forced: ES3_STRINGS || SLOPPY_METHOD }, {
                join: function join(separator) {
                    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
                }
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.array.map.js":
        /*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.map.js ***!
  \******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var arrayMethods = __webpack_require__(/*! ../internals/array-methods */ "./node_modules/core-js/internals/array-methods.js");
            var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");

            var internalMap = arrayMethods(1);
            var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');

// `Array.prototype.map` method
// https://tc39.github.io/ecma262/#sec-array.prototype.map
// with adding support of @@species
            $({ target: 'Array', proto: true, forced: !SPECIES_SUPPORT }, {
                map: function map(callbackfn /* , thisArg */) {
                    return internalMap(this, callbackfn, arguments[1]);
                }
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.array.slice.js":
        /*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.slice.js ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
            var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
            var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
            var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
            var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
            var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
            var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

            var SPECIES = wellKnownSymbol('species');
            var nativeSlice = [].slice;
            var max = Math.max;

            var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');

// `Array.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
            $({ target: 'Array', proto: true, forced: !SPECIES_SUPPORT }, {
                slice: function slice(start, end) {
                    var O = toIndexedObject(this);
                    var length = toLength(O.length);
                    var k = toAbsoluteIndex(start, length);
                    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
                    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
                    var Constructor, result, n;
                    if (isArray(O)) {
                        Constructor = O.constructor;
                        // cross-realm fallback
                        if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
                            Constructor = undefined;
                        } else if (isObject(Constructor)) {
                            Constructor = Constructor[SPECIES];
                            if (Constructor === null) Constructor = undefined;
                        }
                        if (Constructor === Array || Constructor === undefined) {
                            return nativeSlice.call(O, k, fin);
                        }
                    }
                    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
                    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
                    result.length = n;
                    return result;
                }
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.date.to-string.js":
        /*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.date.to-string.js ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");

            var DatePrototype = Date.prototype;
            var INVALID_DATE = 'Invalid Date';
            var TO_STRING = 'toString';
            var nativeDateToString = DatePrototype[TO_STRING];
            var getTime = DatePrototype.getTime;

// `Date.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-date.prototype.tostring
            if (new Date(NaN) + '' != INVALID_DATE) {
                redefine(DatePrototype, TO_STRING, function toString() {
                    var value = getTime.call(this);
                    // eslint-disable-next-line no-self-compare
                    return value === value ? nativeDateToString.call(this) : INVALID_DATE;
                });
            }


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.function.name.js":
        /*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.function.name.js ***!
  \**********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
            var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;

            var FunctionPrototype = Function.prototype;
            var FunctionPrototypeToString = FunctionPrototype.toString;
            var nameRE = /^\s*function ([^ (]*)/;
            var NAME = 'name';

// Function instances `.name` property
// https://tc39.github.io/ecma262/#sec-function-instances-name
            if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
                defineProperty(FunctionPrototype, NAME, {
                    configurable: true,
                    get: function () {
                        try {
                            return FunctionPrototypeToString.call(this).match(nameRE)[1];
                        } catch (error) {
                            return '';
                        }
                    }
                });
            }


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.number.constructor.js":
        /*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.constructor.js ***!
  \***************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
            var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
            var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
            var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
            var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js");
            var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
            var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
            var getOwnPropertyNames = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f;
            var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
            var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
            var internalStringTrim = __webpack_require__(/*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js");

            var NUMBER = 'Number';
            var NativeNumber = global[NUMBER];
            var NumberPrototype = NativeNumber.prototype;

// Opera ~12 has broken Object#toString
            var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;
            var NATIVE_TRIM = 'trim' in String.prototype;

// `ToNumber` abstract operation
// https://tc39.github.io/ecma262/#sec-tonumber
            var toNumber = function (argument) {
                var it = toPrimitive(argument, false);
                var first, third, radix, maxCode, digits, length, i, code;
                if (typeof it == 'string' && it.length > 2) {
                    it = NATIVE_TRIM ? it.trim() : internalStringTrim(it, 3);
                    first = it.charCodeAt(0);
                    if (first === 43 || first === 45) {
                        third = it.charCodeAt(2);
                        if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
                    } else if (first === 48) {
                        switch (it.charCodeAt(1)) {
                            case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
                            case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
                            default: return +it;
                        }
                        digits = it.slice(2);
                        length = digits.length;
                        for (i = 0; i < length; i++) {
                            code = digits.charCodeAt(i);
                            // parseInt parses a string to a first unavailable symbol
                            // but ToNumber should return NaN if a string contains unavailable symbols
                            if (code < 48 || code > maxCode) return NaN;
                        } return parseInt(digits, radix);
                    }
                } return +it;
            };

// `Number` constructor
// https://tc39.github.io/ecma262/#sec-number-constructor
            if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
                var NumberWrapper = function Number(value) {
                    var it = arguments.length < 1 ? 0 : value;
                    var that = this;
                    return that instanceof NumberWrapper
                    // check on 1..constructor(foo) case
                    && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(that); }) : classof(that) != NUMBER)
                        ? inheritIfRequired(new NativeNumber(toNumber(it)), that, NumberWrapper) : toNumber(it);
                };
                for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (
                    // ES3:
                    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
                    // ES2015 (in case, if modules with ES2015 Number statics required before):
                    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
                    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
                ).split(','), j = 0, key; keys.length > j; j++) {
                    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
                        defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
                    }
                }
                NumberWrapper.prototype = NumberPrototype;
                NumberPrototype.constructor = NumberWrapper;
                redefine(global, NUMBER, NumberWrapper);
            }


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.object.assign.js":
        /*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.assign.js ***!
  \**********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var assign = __webpack_require__(/*! ../internals/object-assign */ "./node_modules/core-js/internals/object-assign.js");

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
            $({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
                assign: assign
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.object.to-string.js":
        /*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.to-string.js ***!
  \*************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
            var toString = __webpack_require__(/*! ../internals/object-to-string */ "./node_modules/core-js/internals/object-to-string.js");

            var ObjectPrototype = Object.prototype;

// `Object.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
            if (toString !== ObjectPrototype.toString) {
                redefine(ObjectPrototype, 'toString', toString, { unsafe: true });
            }


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.parse-float.js":
        /*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.parse-float.js ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var parseFloatImplementation = __webpack_require__(/*! ../internals/parse-float */ "./node_modules/core-js/internals/parse-float.js");

// `parseFloat` method
// https://tc39.github.io/ecma262/#sec-parsefloat-string
            $({ global: true, forced: parseFloat != parseFloatImplementation }, {
                parseFloat: parseFloatImplementation
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.promise.finally.js":
        /*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.finally.js ***!
  \************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
            var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "./node_modules/core-js/internals/species-constructor.js");
            var promiseResolve = __webpack_require__(/*! ../internals/promise-resolve */ "./node_modules/core-js/internals/promise-resolve.js");

// `Promise.prototype.finally` method
// https://tc39.github.io/ecma262/#sec-promise.prototype.finally
            $({ target: 'Promise', proto: true, real: true }, {
                'finally': function (onFinally) {
                    var C = speciesConstructor(this, getBuiltIn('Promise'));
                    var isFunction = typeof onFinally == 'function';
                    return this.then(
                        isFunction ? function (x) {
                            return promiseResolve(C, onFinally()).then(function () { return x; });
                        } : onFinally,
                        isFunction ? function (e) {
                            return promiseResolve(C, onFinally()).then(function () { throw e; });
                        } : onFinally
                    );
                }
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.promise.js":
        /*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.js ***!
  \****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var path = __webpack_require__(/*! ../internals/path */ "./node_modules/core-js/internals/path.js");
            var redefineAll = __webpack_require__(/*! ../internals/redefine-all */ "./node_modules/core-js/internals/redefine-all.js");
            var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
            var setSpecies = __webpack_require__(/*! ../internals/set-species */ "./node_modules/core-js/internals/set-species.js");
            var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
            var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");
            var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
            var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
            var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
            var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "./node_modules/core-js/internals/check-correctness-of-iteration.js");
            var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "./node_modules/core-js/internals/species-constructor.js");
            var task = __webpack_require__(/*! ../internals/task */ "./node_modules/core-js/internals/task.js").set;
            var microtask = __webpack_require__(/*! ../internals/microtask */ "./node_modules/core-js/internals/microtask.js");
            var promiseResolve = __webpack_require__(/*! ../internals/promise-resolve */ "./node_modules/core-js/internals/promise-resolve.js");
            var hostReportErrors = __webpack_require__(/*! ../internals/host-report-errors */ "./node_modules/core-js/internals/host-report-errors.js");
            var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");
            var perform = __webpack_require__(/*! ../internals/perform */ "./node_modules/core-js/internals/perform.js");
            var userAgent = __webpack_require__(/*! ../internals/user-agent */ "./node_modules/core-js/internals/user-agent.js");
            var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
            var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

            var SPECIES = wellKnownSymbol('species');
            var PROMISE = 'Promise';
            var getInternalState = InternalStateModule.get;
            var setInternalState = InternalStateModule.set;
            var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
            var PromiseConstructor = global[PROMISE];
            var TypeError = global.TypeError;
            var document = global.document;
            var process = global.process;
            var $fetch = global.fetch;
            var versions = process && process.versions;
            var v8 = versions && versions.v8 || '';
            var newPromiseCapability = newPromiseCapabilityModule.f;
            var newGenericPromiseCapability = newPromiseCapability;
            var IS_NODE = classof(process) == 'process';
            var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
            var UNHANDLED_REJECTION = 'unhandledrejection';
            var REJECTION_HANDLED = 'rejectionhandled';
            var PENDING = 0;
            var FULFILLED = 1;
            var REJECTED = 2;
            var HANDLED = 1;
            var UNHANDLED = 2;
            var Internal, OwnPromiseCapability, PromiseWrapper;

            var FORCED = isForced(PROMISE, function () {
                // correct subclassing with @@species support
                var promise = PromiseConstructor.resolve(1);
                var empty = function () { /* empty */ };
                var FakePromise = (promise.constructor = {})[SPECIES] = function (exec) {
                    exec(empty, empty);
                };
                // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
                return !((IS_NODE || typeof PromiseRejectionEvent == 'function')
                    && (!IS_PURE || promise['finally'])
                    && promise.then(empty) instanceof FakePromise
                    // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
                    // we can't detect it synchronously, so just check versions
                    && v8.indexOf('6.6') !== 0
                    && userAgent.indexOf('Chrome/66') === -1);
            });

            var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
                PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
            });

// helpers
            var isThenable = function (it) {
                var then;
                return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
            };

            var notify = function (promise, state, isReject) {
                if (state.notified) return;
                state.notified = true;
                var chain = state.reactions;
                microtask(function () {
                    var value = state.value;
                    var ok = state.state == FULFILLED;
                    var i = 0;
                    var run = function (reaction) {
                        var handler = ok ? reaction.ok : reaction.fail;
                        var resolve = reaction.resolve;
                        var reject = reaction.reject;
                        var domain = reaction.domain;
                        var result, then, exited;
                        try {
                            if (handler) {
                                if (!ok) {
                                    if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
                                    state.rejection = HANDLED;
                                }
                                if (handler === true) result = value;
                                else {
                                    if (domain) domain.enter();
                                    result = handler(value); // may throw
                                    if (domain) {
                                        domain.exit();
                                        exited = true;
                                    }
                                }
                                if (result === reaction.promise) {
                                    reject(TypeError('Promise-chain cycle'));
                                } else if (then = isThenable(result)) {
                                    then.call(result, resolve, reject);
                                } else resolve(result);
                            } else reject(value);
                        } catch (error) {
                            if (domain && !exited) domain.exit();
                            reject(error);
                        }
                    };
                    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
                    state.reactions = [];
                    state.notified = false;
                    if (isReject && !state.rejection) onUnhandled(promise, state);
                });
            };

            var dispatchEvent = function (name, promise, reason) {
                var event, handler;
                if (DISPATCH_EVENT) {
                    event = document.createEvent('Event');
                    event.promise = promise;
                    event.reason = reason;
                    event.initEvent(name, false, true);
                    global.dispatchEvent(event);
                } else event = { promise: promise, reason: reason };
                if (handler = global['on' + name]) handler(event);
                else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
            };

            var onUnhandled = function (promise, state) {
                task.call(global, function () {
                    var value = state.value;
                    var IS_UNHANDLED = isUnhandled(state);
                    var result;
                    if (IS_UNHANDLED) {
                        result = perform(function () {
                            if (IS_NODE) {
                                process.emit('unhandledRejection', value, promise);
                            } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
                        });
                        // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
                        state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
                        if (result.error) throw result.value;
                    }
                });
            };

            var isUnhandled = function (state) {
                return state.rejection !== HANDLED && !state.parent;
            };

            var onHandleUnhandled = function (promise, state) {
                task.call(global, function () {
                    if (IS_NODE) {
                        process.emit('rejectionHandled', promise);
                    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
                });
            };

            var bind = function (fn, promise, state, unwrap) {
                return function (value) {
                    fn(promise, state, value, unwrap);
                };
            };

            var internalReject = function (promise, state, value, unwrap) {
                if (state.done) return;
                state.done = true;
                if (unwrap) state = unwrap;
                state.value = value;
                state.state = REJECTED;
                notify(promise, state, true);
            };

            var internalResolve = function (promise, state, value, unwrap) {
                if (state.done) return;
                state.done = true;
                if (unwrap) state = unwrap;
                try {
                    if (promise === value) throw TypeError("Promise can't be resolved itself");
                    var then = isThenable(value);
                    if (then) {
                        microtask(function () {
                            var wrapper = { done: false };
                            try {
                                then.call(value,
                                    bind(internalResolve, promise, wrapper, state),
                                    bind(internalReject, promise, wrapper, state)
                                );
                            } catch (error) {
                                internalReject(promise, wrapper, error, state);
                            }
                        });
                    } else {
                        state.value = value;
                        state.state = FULFILLED;
                        notify(promise, state, false);
                    }
                } catch (error) {
                    internalReject(promise, { done: false }, error, state);
                }
            };

// constructor polyfill
            if (FORCED) {
                // 25.4.3.1 Promise(executor)
                PromiseConstructor = function Promise(executor) {
                    anInstance(this, PromiseConstructor, PROMISE);
                    aFunction(executor);
                    Internal.call(this);
                    var state = getInternalState(this);
                    try {
                        executor(bind(internalResolve, this, state), bind(internalReject, this, state));
                    } catch (error) {
                        internalReject(this, state, error);
                    }
                };
                // eslint-disable-next-line no-unused-vars
                Internal = function Promise(executor) {
                    setInternalState(this, {
                        type: PROMISE,
                        done: false,
                        notified: false,
                        parent: false,
                        reactions: [],
                        rejection: false,
                        state: PENDING,
                        value: undefined
                    });
                };
                Internal.prototype = redefineAll(PromiseConstructor.prototype, {
                    // `Promise.prototype.then` method
                    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
                    then: function then(onFulfilled, onRejected) {
                        var state = getInternalPromiseState(this);
                        var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
                        reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
                        reaction.fail = typeof onRejected == 'function' && onRejected;
                        reaction.domain = IS_NODE ? process.domain : undefined;
                        state.parent = true;
                        state.reactions.push(reaction);
                        if (state.state != PENDING) notify(this, state, false);
                        return reaction.promise;
                    },
                    // `Promise.prototype.catch` method
                    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
                    'catch': function (onRejected) {
                        return this.then(undefined, onRejected);
                    }
                });
                OwnPromiseCapability = function () {
                    var promise = new Internal();
                    var state = getInternalState(promise);
                    this.promise = promise;
                    this.resolve = bind(internalResolve, promise, state);
                    this.reject = bind(internalReject, promise, state);
                };
                newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
                    return C === PromiseConstructor || C === PromiseWrapper
                        ? new OwnPromiseCapability(C)
                        : newGenericPromiseCapability(C);
                };

                // wrap fetch result
                if (!IS_PURE && typeof $fetch == 'function') $({ global: true, enumerable: true, forced: true }, {
                    // eslint-disable-next-line no-unused-vars
                    fetch: function fetch(input) {
                        return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));
                    }
                });
            }

            $({ global: true, wrap: true, forced: FORCED }, {
                Promise: PromiseConstructor
            });

            setToStringTag(PromiseConstructor, PROMISE, false, true);
            setSpecies(PROMISE);

            PromiseWrapper = path[PROMISE];

// statics
            $({ target: PROMISE, stat: true, forced: FORCED }, {
                // `Promise.reject` method
                // https://tc39.github.io/ecma262/#sec-promise.reject
                reject: function reject(r) {
                    var capability = newPromiseCapability(this);
                    capability.reject.call(undefined, r);
                    return capability.promise;
                }
            });

            $({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
                // `Promise.resolve` method
                // https://tc39.github.io/ecma262/#sec-promise.resolve
                resolve: function resolve(x) {
                    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
                }
            });

            $({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
                // `Promise.all` method
                // https://tc39.github.io/ecma262/#sec-promise.all
                all: function all(iterable) {
                    var C = this;
                    var capability = newPromiseCapability(C);
                    var resolve = capability.resolve;
                    var reject = capability.reject;
                    var result = perform(function () {
                        var $promiseResolve = aFunction(C.resolve);
                        var values = [];
                        var counter = 0;
                        var remaining = 1;
                        iterate(iterable, function (promise) {
                            var index = counter++;
                            var alreadyCalled = false;
                            values.push(undefined);
                            remaining++;
                            $promiseResolve.call(C, promise).then(function (value) {
                                if (alreadyCalled) return;
                                alreadyCalled = true;
                                values[index] = value;
                                --remaining || resolve(values);
                            }, reject);
                        });
                        --remaining || resolve(values);
                    });
                    if (result.error) reject(result.value);
                    return capability.promise;
                },
                // `Promise.race` method
                // https://tc39.github.io/ecma262/#sec-promise.race
                race: function race(iterable) {
                    var C = this;
                    var capability = newPromiseCapability(C);
                    var reject = capability.reject;
                    var result = perform(function () {
                        var $promiseResolve = aFunction(C.resolve);
                        iterate(iterable, function (promise) {
                            $promiseResolve.call(C, promise).then(capability.resolve, reject);
                        });
                    });
                    if (result.error) reject(result.value);
                    return capability.promise;
                }
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.regexp.constructor.js":
        /*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.constructor.js ***!
  \***************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
            var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js");
            var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
            var getOwnPropertyNames = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f;
            var isRegExp = __webpack_require__(/*! ../internals/is-regexp */ "./node_modules/core-js/internals/is-regexp.js");
            var getFlags = __webpack_require__(/*! ../internals/regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");
            var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
            var setSpecies = __webpack_require__(/*! ../internals/set-species */ "./node_modules/core-js/internals/set-species.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

            var MATCH = wellKnownSymbol('match');
            var NativeRegExp = global.RegExp;
            var RegExpPrototype = NativeRegExp.prototype;
            var re1 = /a/g;
            var re2 = /a/g;

// "new" should create a new object, old webkit bug
            var CORRECT_NEW = new NativeRegExp(re1) !== re1;

            var FORCED = isForced('RegExp', DESCRIPTORS && (!CORRECT_NEW || fails(function () {
                re2[MATCH] = false;
                // RegExp constructor can alter flags and IsRegExp works correct with @@match
                return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
            })));

// `RegExp` constructor
// https://tc39.github.io/ecma262/#sec-regexp-constructor
            if (FORCED) {
                var RegExpWrapper = function RegExp(pattern, flags) {
                    var thisIsRegExp = this instanceof RegExpWrapper;
                    var patternIsRegExp = isRegExp(pattern);
                    var flagsAreUndefined = flags === undefined;
                    return !thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined ? pattern
                        : inheritIfRequired(CORRECT_NEW
                            ? new NativeRegExp(patternIsRegExp && !flagsAreUndefined ? pattern.source : pattern, flags)
                            : NativeRegExp((patternIsRegExp = pattern instanceof RegExpWrapper)
                                ? pattern.source
                                : pattern, patternIsRegExp && flagsAreUndefined ? getFlags.call(pattern) : flags)
                            , thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);
                };
                var proxy = function (key) {
                    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
                        configurable: true,
                        get: function () { return NativeRegExp[key]; },
                        set: function (it) { NativeRegExp[key] = it; }
                    });
                };
                var keys = getOwnPropertyNames(NativeRegExp);
                var i = 0;
                while (i < keys.length) proxy(keys[i++]);
                RegExpPrototype.constructor = RegExpWrapper;
                RegExpWrapper.prototype = RegExpPrototype;
                redefine(global, 'RegExp', RegExpWrapper);
            }

// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
            setSpecies('RegExp');


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.regexp.exec.js":
        /*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.exec.js ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var exec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");

            $({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
                exec: exec
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.regexp.to-string.js":
        /*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.to-string.js ***!
  \*************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
            var flags = __webpack_require__(/*! ../internals/regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");

            var TO_STRING = 'toString';
            var nativeToString = /./[TO_STRING];
            var RegExpPrototype = RegExp.prototype;

            var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
            var INCORRECT_NAME = nativeToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
            if (NOT_GENERIC || INCORRECT_NAME) {
                redefine(RegExp.prototype, TO_STRING, function toString() {
                    var R = anObject(this);
                    var p = String(R.source);
                    var rf = R.flags;
                    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
                    return '/' + p + '/' + f;
                }, { unsafe: true });
            }


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.string.iterator.js":
        /*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.iterator.js ***!
  \************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var codePointAt = __webpack_require__(/*! ../internals/string-at */ "./node_modules/core-js/internals/string-at.js");
            var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
            var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");

            var STRING_ITERATOR = 'String Iterator';
            var setInternalState = InternalStateModule.set;
            var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
            defineIterator(String, 'String', function (iterated) {
                setInternalState(this, {
                    type: STRING_ITERATOR,
                    string: String(iterated),
                    index: 0
                });
// `%StringIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
            }, function next() {
                var state = getInternalState(this);
                var string = state.string;
                var index = state.index;
                var point;
                if (index >= string.length) return { value: undefined, done: true };
                point = codePointAt(string, index, true);
                state.index += point.length;
                return { value: point, done: false };
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.string.replace.js":
        /*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.replace.js ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");
            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
            var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
            var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
            var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
            var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
            var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
            var regExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");

            var max = Math.max;
            var min = Math.min;
            var floor = Math.floor;
            var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
            var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

            var maybeToString = function (it) {
                return it === undefined ? it : String(it);
            };

// @@replace logic
            fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative) {
                return [
                    // `String.prototype.replace` method
                    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
                    function replace(searchValue, replaceValue) {
                        var O = requireObjectCoercible(this);
                        var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
                        return replacer !== undefined
                            ? replacer.call(searchValue, O, replaceValue)
                            : nativeReplace.call(String(O), searchValue, replaceValue);
                    },
                    // `RegExp.prototype[@@replace]` method
                    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
                    function (regexp, replaceValue) {
                        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
                        if (res.done) return res.value;

                        var rx = anObject(regexp);
                        var S = String(this);

                        var functionalReplace = typeof replaceValue === 'function';
                        if (!functionalReplace) replaceValue = String(replaceValue);

                        var global = rx.global;
                        if (global) {
                            var fullUnicode = rx.unicode;
                            rx.lastIndex = 0;
                        }
                        var results = [];
                        while (true) {
                            var result = regExpExec(rx, S);
                            if (result === null) break;

                            results.push(result);
                            if (!global) break;

                            var matchStr = String(result[0]);
                            if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
                        }

                        var accumulatedResult = '';
                        var nextSourcePosition = 0;
                        for (var i = 0; i < results.length; i++) {
                            result = results[i];

                            var matched = String(result[0]);
                            var position = max(min(toInteger(result.index), S.length), 0);
                            var captures = [];
                            // NOTE: This is equivalent to
                            //   captures = result.slice(1).map(maybeToString)
                            // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
                            // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
                            // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
                            for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
                            var namedCaptures = result.groups;
                            if (functionalReplace) {
                                var replacerArgs = [matched].concat(captures, position, S);
                                if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
                                var replacement = String(replaceValue.apply(undefined, replacerArgs));
                            } else {
                                replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
                            }
                            if (position >= nextSourcePosition) {
                                accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
                                nextSourcePosition = position + matched.length;
                            }
                        }
                        return accumulatedResult + S.slice(nextSourcePosition);
                    }
                ];

                // https://tc39.github.io/ecma262/#sec-getsubstitution
                function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
                    var tailPos = position + matched.length;
                    var m = captures.length;
                    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
                    if (namedCaptures !== undefined) {
                        namedCaptures = toObject(namedCaptures);
                        symbols = SUBSTITUTION_SYMBOLS;
                    }
                    return nativeReplace.call(replacement, symbols, function (match, ch) {
                        var capture;
                        switch (ch.charAt(0)) {
                            case '$': return '$';
                            case '&': return matched;
                            case '`': return str.slice(0, position);
                            case "'": return str.slice(tailPos);
                            case '<':
                                capture = namedCaptures[ch.slice(1, -1)];
                                break;
                            default: // \d\d?
                                var n = +ch;
                                if (n === 0) return match;
                                if (n > m) {
                                    var f = floor(n / 10);
                                    if (f === 0) return match;
                                    if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                                    return match;
                                }
                                capture = captures[n - 1];
                        }
                        return capture === undefined ? '' : capture;
                    });
                }
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.string.split.js":
        /*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.split.js ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");
            var isRegExp = __webpack_require__(/*! ../internals/is-regexp */ "./node_modules/core-js/internals/is-regexp.js");
            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
            var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
            var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "./node_modules/core-js/internals/species-constructor.js");
            var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
            var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
            var callRegExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");
            var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");
            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

            var arrayPush = [].push;
            var min = Math.min;
            var MAX_UINT32 = 0xFFFFFFFF;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
            var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

// @@split logic
            fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
                var internalSplit;
                if (
                    'abbc'.split(/(b)*/)[1] == 'c' ||
                    'test'.split(/(?:)/, -1).length != 4 ||
                    'ab'.split(/(?:ab)*/).length != 2 ||
                    '.'.split(/(.?)(.?)/).length != 4 ||
                    '.'.split(/()()/).length > 1 ||
                    ''.split(/.?/).length
                ) {
                    // based on es5-shim implementation, need to rework it
                    internalSplit = function (separator, limit) {
                        var string = String(requireObjectCoercible(this));
                        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
                        if (lim === 0) return [];
                        if (separator === undefined) return [string];
                        // If `separator` is not a regex, use native split
                        if (!isRegExp(separator)) {
                            return nativeSplit.call(string, separator, lim);
                        }
                        var output = [];
                        var flags = (separator.ignoreCase ? 'i' : '') +
                            (separator.multiline ? 'm' : '') +
                            (separator.unicode ? 'u' : '') +
                            (separator.sticky ? 'y' : '');
                        var lastLastIndex = 0;
                        // Make `global` and avoid `lastIndex` issues by working with a copy
                        var separatorCopy = new RegExp(separator.source, flags + 'g');
                        var match, lastIndex, lastLength;
                        while (match = regexpExec.call(separatorCopy, string)) {
                            lastIndex = separatorCopy.lastIndex;
                            if (lastIndex > lastLastIndex) {
                                output.push(string.slice(lastLastIndex, match.index));
                                if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
                                lastLength = match[0].length;
                                lastLastIndex = lastIndex;
                                if (output.length >= lim) break;
                            }
                            if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
                        }
                        if (lastLastIndex === string.length) {
                            if (lastLength || !separatorCopy.test('')) output.push('');
                        } else output.push(string.slice(lastLastIndex));
                        return output.length > lim ? output.slice(0, lim) : output;
                    };
                    // Chakra, V8
                } else if ('0'.split(undefined, 0).length) {
                    internalSplit = function (separator, limit) {
                        return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
                    };
                } else internalSplit = nativeSplit;

                return [
                    // `String.prototype.split` method
                    // https://tc39.github.io/ecma262/#sec-string.prototype.split
                    function split(separator, limit) {
                        var O = requireObjectCoercible(this);
                        var splitter = separator == undefined ? undefined : separator[SPLIT];
                        return splitter !== undefined
                            ? splitter.call(separator, O, limit)
                            : internalSplit.call(String(O), separator, limit);
                    },
                    // `RegExp.prototype[@@split]` method
                    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
                    //
                    // NOTE: This cannot be properly polyfilled in engines that don't support
                    // the 'y' flag.
                    function (regexp, limit) {
                        var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
                        if (res.done) return res.value;

                        var rx = anObject(regexp);
                        var S = String(this);
                        var C = speciesConstructor(rx, RegExp);

                        var unicodeMatching = rx.unicode;
                        var flags = (rx.ignoreCase ? 'i' : '') +
                            (rx.multiline ? 'm' : '') +
                            (rx.unicode ? 'u' : '') +
                            (SUPPORTS_Y ? 'y' : 'g');

                        // ^(? + rx + ) is needed, in combination with some S slicing, to
                        // simulate the 'y' flag.
                        var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
                        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
                        if (lim === 0) return [];
                        if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
                        var p = 0;
                        var q = 0;
                        var A = [];
                        while (q < S.length) {
                            splitter.lastIndex = SUPPORTS_Y ? q : 0;
                            var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
                            var e;
                            if (
                                z === null ||
                                (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
                            ) {
                                q = advanceStringIndex(S, q, unicodeMatching);
                            } else {
                                A.push(S.slice(p, q));
                                if (A.length === lim) return A;
                                for (var i = 1; i <= z.length - 1; i++) {
                                    A.push(z[i]);
                                    if (A.length === lim) return A;
                                }
                                q = p = e;
                            }
                        }
                        A.push(S.slice(p));
                        return A;
                    }
                ];
            }, !SUPPORTS_Y);


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.string.trim.js":
        /*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.trim.js ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var internalStringTrim = __webpack_require__(/*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js");
            var forcedStringTrimMethod = __webpack_require__(/*! ../internals/forced-string-trim-method */ "./node_modules/core-js/internals/forced-string-trim-method.js");

            var FORCED = forcedStringTrimMethod('trim');

// `String.prototype.trim` method
// https://tc39.github.io/ecma262/#sec-string.prototype.trim
            $({ target: 'String', proto: true, forced: FORCED }, {
                trim: function trim() {
                    return internalStringTrim(this, 3);
                }
            });


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.symbol.description.js":
        /*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.description.js ***!
  \***************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";
// `Symbol.prototype.description` getter
// https://tc39.github.io/ecma262/#sec-symbol.prototype.description

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
            var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
            var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
            var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");

            var NativeSymbol = global.Symbol;

            if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
                // Safari 12 bug
                NativeSymbol().description !== undefined
            )) {
                var EmptyStringDescriptionStore = {};
                // wrap Symbol constructor for correct work with undefined description
                var SymbolWrapper = function Symbol() {
                    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
                    var result = this instanceof SymbolWrapper
                        ? new NativeSymbol(description)
                        // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
                        : description === undefined ? NativeSymbol() : NativeSymbol(description);
                    if (description === '') EmptyStringDescriptionStore[result] = true;
                    return result;
                };
                copyConstructorProperties(SymbolWrapper, NativeSymbol);
                var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
                symbolPrototype.constructor = SymbolWrapper;

                var symbolToString = symbolPrototype.toString;
                var native = String(NativeSymbol('test')) == 'Symbol(test)';
                var regexp = /^Symbol\((.*)\)[^)]+$/;
                defineProperty(symbolPrototype, 'description', {
                    configurable: true,
                    get: function description() {
                        var symbol = isObject(this) ? this.valueOf() : this;
                        var string = symbolToString.call(symbol);
                        if (has(EmptyStringDescriptionStore, symbol)) return '';
                        var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
                        return desc === '' ? undefined : desc;
                    }
                });

                $({ global: true, forced: true }, {
                    Symbol: SymbolWrapper
                });
            }


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.symbol.iterator.js":
        /*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.iterator.js ***!
  \************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var defineWellKnownSymbol = __webpack_require__(/*! ../internals/define-well-known-symbol */ "./node_modules/core-js/internals/define-well-known-symbol.js");

// `Symbol.iterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.iterator
            defineWellKnownSymbol('iterator');


            /***/ }),

        /***/ "./node_modules/core-js/modules/es.symbol.js":
        /*!***************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.js ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
            var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");
            var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
            var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
            var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
            var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
            var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
            var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
            var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
            var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
            var wrappedWellKnownSymbolModule = __webpack_require__(/*! ../internals/wrapped-well-known-symbol */ "./node_modules/core-js/internals/wrapped-well-known-symbol.js");
            var defineWellKnownSymbol = __webpack_require__(/*! ../internals/define-well-known-symbol */ "./node_modules/core-js/internals/define-well-known-symbol.js");
            var enumKeys = __webpack_require__(/*! ../internals/enum-keys */ "./node_modules/core-js/internals/enum-keys.js");
            var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
            var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
            var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
            var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
            var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
            var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
            var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
            var nativeObjectCreate = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
            var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
            var getOwnPropertyNamesExternal = __webpack_require__(/*! ../internals/object-get-own-property-names-external */ "./node_modules/core-js/internals/object-get-own-property-names-external.js");
            var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
            var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
            var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
            var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
            var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
            var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
            var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
            var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

            var HIDDEN = sharedKey('hidden');
            var SYMBOL = 'Symbol';
            var setInternalState = InternalStateModule.set;
            var getInternalState = InternalStateModule.getterFor(SYMBOL);
            var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
            var nativeDefineProperty = definePropertyModule.f;
            var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
            var $Symbol = global.Symbol;
            var JSON = global.JSON;
            var nativeJSONStringify = JSON && JSON.stringify;
            var PROTOTYPE = 'prototype';
            var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
            var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
            var SymbolRegistry = shared('symbol-registry');
            var AllSymbols = shared('symbols');
            var ObjectPrototypeSymbols = shared('op-symbols');
            var WellKnownSymbolsStore = shared('wks');
            var ObjectPrototype = Object[PROTOTYPE];
            var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
            var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
            var setSymbolDescriptor = DESCRIPTORS && fails(function () {
                return nativeObjectCreate(nativeDefineProperty({}, 'a', {
                    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
                })).a != 7;
            }) ? function (it, key, D) {
                var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, key);
                if (ObjectPrototypeDescriptor) delete ObjectPrototype[key];
                nativeDefineProperty(it, key, D);
                if (ObjectPrototypeDescriptor && it !== ObjectPrototype) {
                    nativeDefineProperty(ObjectPrototype, key, ObjectPrototypeDescriptor);
                }
            } : nativeDefineProperty;

            var wrap = function (tag, description) {
                var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
                setInternalState(symbol, {
                    type: SYMBOL,
                    tag: tag,
                    description: description
                });
                if (!DESCRIPTORS) symbol.description = description;
                return symbol;
            };

            var isSymbol = NATIVE_SYMBOL && typeof $Symbol.iterator == 'symbol' ? function (it) {
                return typeof it == 'symbol';
            } : function (it) {
                return Object(it) instanceof $Symbol;
            };

            var $defineProperty = function defineProperty(it, key, D) {
                if (it === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, key, D);
                anObject(it);
                key = toPrimitive(key, true);
                anObject(D);
                if (has(AllSymbols, key)) {
                    if (!D.enumerable) {
                        if (!has(it, HIDDEN)) nativeDefineProperty(it, HIDDEN, createPropertyDescriptor(1, {}));
                        it[HIDDEN][key] = true;
                    } else {
                        if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
                        D = nativeObjectCreate(D, { enumerable: createPropertyDescriptor(0, false) });
                    } return setSymbolDescriptor(it, key, D);
                } return nativeDefineProperty(it, key, D);
            };

            var $defineProperties = function defineProperties(it, P) {
                anObject(it);
                var keys = enumKeys(P = toIndexedObject(P));
                var i = 0;
                var l = keys.length;
                var key;
                while (l > i) $defineProperty(it, key = keys[i++], P[key]);
                return it;
            };

            var $create = function create(it, P) {
                return P === undefined ? nativeObjectCreate(it) : $defineProperties(nativeObjectCreate(it), P);
            };

            var $propertyIsEnumerable = function propertyIsEnumerable(key) {
                var E = nativePropertyIsEnumerable.call(this, key = toPrimitive(key, true));
                if (this === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return false;
                return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
            };

            var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
                it = toIndexedObject(it);
                key = toPrimitive(key, true);
                if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
                var D = nativeGetOwnPropertyDescriptor(it, key);
                if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
                return D;
            };

            var $getOwnPropertyNames = function getOwnPropertyNames(it) {
                var names = nativeGetOwnPropertyNames(toIndexedObject(it));
                var result = [];
                var i = 0;
                var key;
                while (names.length > i) {
                    if (!has(AllSymbols, key = names[i++]) && !has(hiddenKeys, key)) result.push(key);
                } return result;
            };

            var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
                var IS_OP = it === ObjectPrototype;
                var names = nativeGetOwnPropertyNames(IS_OP ? ObjectPrototypeSymbols : toIndexedObject(it));
                var result = [];
                var i = 0;
                var key;
                while (names.length > i) {
                    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectPrototype, key) : true)) result.push(AllSymbols[key]);
                } return result;
            };

// `Symbol` constructor
// https://tc39.github.io/ecma262/#sec-symbol-constructor
            if (!NATIVE_SYMBOL) {
                $Symbol = function Symbol() {
                    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
                    var description = arguments[0] === undefined ? undefined : String(arguments[0]);
                    var tag = uid(description);
                    var setter = function (value) {
                        if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
                        if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                        setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
                    };
                    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
                    return wrap(tag, description);
                };
                redefine($Symbol[PROTOTYPE], 'toString', function toString() {
                    return getInternalState(this).tag;
                });

                propertyIsEnumerableModule.f = $propertyIsEnumerable;
                definePropertyModule.f = $defineProperty;
                getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
                getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
                getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

                if (DESCRIPTORS) {
                    // https://github.com/tc39/proposal-Symbol-description
                    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
                        configurable: true,
                        get: function description() {
                            return getInternalState(this).description;
                        }
                    });
                    if (!IS_PURE) {
                        redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
                    }
                }

                wrappedWellKnownSymbolModule.f = function (name) {
                    return wrap(wellKnownSymbol(name), name);
                };
            }

            $({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
                Symbol: $Symbol
            });

            for (var wellKnownSymbols = objectKeys(WellKnownSymbolsStore), k = 0; wellKnownSymbols.length > k;) {
                defineWellKnownSymbol(wellKnownSymbols[k++]);
            }

            $({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
                // `Symbol.for` method
                // https://tc39.github.io/ecma262/#sec-symbol.for
                'for': function (key) {
                    return has(SymbolRegistry, key += '')
                        ? SymbolRegistry[key]
                        : SymbolRegistry[key] = $Symbol(key);
                },
                // `Symbol.keyFor` method
                // https://tc39.github.io/ecma262/#sec-symbol.keyfor
                keyFor: function keyFor(sym) {
                    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
                    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
                },
                useSetter: function () { USE_SETTER = true; },
                useSimple: function () { USE_SETTER = false; }
            });

            $({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
                // `Object.create` method
                // https://tc39.github.io/ecma262/#sec-object.create
                create: $create,
                // `Object.defineProperty` method
                // https://tc39.github.io/ecma262/#sec-object.defineproperty
                defineProperty: $defineProperty,
                // `Object.defineProperties` method
                // https://tc39.github.io/ecma262/#sec-object.defineproperties
                defineProperties: $defineProperties,
                // `Object.getOwnPropertyDescriptor` method
                // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
                getOwnPropertyDescriptor: $getOwnPropertyDescriptor
            });

            $({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
                // `Object.getOwnPropertyNames` method
                // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
                getOwnPropertyNames: $getOwnPropertyNames,
                // `Object.getOwnPropertySymbols` method
                // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
                getOwnPropertySymbols: $getOwnPropertySymbols
            });

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
            $({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {
                getOwnPropertySymbols: function getOwnPropertySymbols(it) {
                    return getOwnPropertySymbolsModule.f(toObject(it));
                }
            });

// `JSON.stringify` method behavior with symbols
// https://tc39.github.io/ecma262/#sec-json.stringify
            JSON && $({ target: 'JSON', stat: true, forced: !NATIVE_SYMBOL || fails(function () {
                    var symbol = $Symbol();
                    // MS Edge converts symbol values to JSON as {}
                    return nativeJSONStringify([symbol]) != '[null]'
                        // WebKit converts symbol values to JSON as null
                        || nativeJSONStringify({ a: symbol }) != '{}'
                        // V8 throws on boxed symbols
                        || nativeJSONStringify(Object(symbol)) != '{}';
                }) }, {
                stringify: function stringify(it) {
                    var args = [it];
                    var i = 1;
                    var replacer, $replacer;
                    while (arguments.length > i) args.push(arguments[i++]);
                    $replacer = replacer = args[1];
                    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
                    if (!isArray(replacer)) replacer = function (key, value) {
                        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
                        if (!isSymbol(value)) return value;
                    };
                    args[1] = replacer;
                    return nativeJSONStringify.apply(JSON, args);
                }
            });

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
            if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) hide($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
            setToStringTag($Symbol, SYMBOL);

            hiddenKeys[HIDDEN] = true;


            /***/ }),

        /***/ "./node_modules/core-js/modules/web.dom-collections.for-each.js":
        /*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.for-each.js ***!
  \**********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js");
            var forEach = __webpack_require__(/*! ../internals/array-for-each */ "./node_modules/core-js/internals/array-for-each.js");
            var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");

            for (var COLLECTION_NAME in DOMIterables) {
                var Collection = global[COLLECTION_NAME];
                var CollectionPrototype = Collection && Collection.prototype;
                // some Chrome versions have non-configurable methods on DOMTokenList
                if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
                    hide(CollectionPrototype, 'forEach', forEach);
                } catch (error) {
                    CollectionPrototype.forEach = forEach;
                }
            }


            /***/ }),

        /***/ "./node_modules/core-js/modules/web.dom-collections.iterator.js":
        /*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.iterator.js ***!
  \**********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
            var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js");
            var ArrayIteratorMethods = __webpack_require__(/*! ../modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");
            var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
            var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

            var ITERATOR = wellKnownSymbol('iterator');
            var TO_STRING_TAG = wellKnownSymbol('toStringTag');
            var ArrayValues = ArrayIteratorMethods.values;

            for (var COLLECTION_NAME in DOMIterables) {
                var Collection = global[COLLECTION_NAME];
                var CollectionPrototype = Collection && Collection.prototype;
                if (CollectionPrototype) {
                    // some Chrome versions have non-configurable methods on DOMTokenList
                    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
                        hide(CollectionPrototype, ITERATOR, ArrayValues);
                    } catch (error) {
                        CollectionPrototype[ITERATOR] = ArrayValues;
                    }
                    if (!CollectionPrototype[TO_STRING_TAG]) hide(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
                    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
                        // some Chrome versions have non-configurable methods on DOMTokenList
                        if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
                            hide(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
                        } catch (error) {
                            CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
                        }
                    }
                }
            }


            /***/ }),

        /***/ "./node_modules/cropperjs/dist/cropper.js":
        /*!************************************************!*\
  !*** ./node_modules/cropperjs/dist/cropper.js ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /*!
 * Cropper.js v1.5.3
 * https://fengyuanchen.github.io/cropperjs
 *
 * Copyright 2015-present Chen Fengyuan
 * Released under the MIT license
 *
 * Date: 2019-07-10T12:07:44.557Z
 */

            (function (global, factory) {
                true ? module.exports = factory() :
                    undefined;
            }(this, function () { 'use strict';

                function _typeof(obj) {
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function (obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function (obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }

                    return _typeof(obj);
                }

                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }

                function _defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) _defineProperties(Constructor, staticProps);
                    return Constructor;
                }

                function _toConsumableArray(arr) {
                    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
                }

                function _arrayWithoutHoles(arr) {
                    if (Array.isArray(arr)) {
                        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

                        return arr2;
                    }
                }

                function _iterableToArray(iter) {
                    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
                }

                function _nonIterableSpread() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance");
                }

                var IS_BROWSER = typeof window !== 'undefined';
                var WINDOW = IS_BROWSER ? window : {};
                var IS_TOUCH_DEVICE = IS_BROWSER ? 'ontouchstart' in WINDOW.document.documentElement : false;
                var HAS_POINTER_EVENT = IS_BROWSER ? 'PointerEvent' in WINDOW : false;
                var NAMESPACE = 'cropper'; // Actions

                var ACTION_ALL = 'all';
                var ACTION_CROP = 'crop';
                var ACTION_MOVE = 'move';
                var ACTION_ZOOM = 'zoom';
                var ACTION_EAST = 'e';
                var ACTION_WEST = 'w';
                var ACTION_SOUTH = 's';
                var ACTION_NORTH = 'n';
                var ACTION_NORTH_EAST = 'ne';
                var ACTION_NORTH_WEST = 'nw';
                var ACTION_SOUTH_EAST = 'se';
                var ACTION_SOUTH_WEST = 'sw'; // Classes

                var CLASS_CROP = "".concat(NAMESPACE, "-crop");
                var CLASS_DISABLED = "".concat(NAMESPACE, "-disabled");
                var CLASS_HIDDEN = "".concat(NAMESPACE, "-hidden");
                var CLASS_HIDE = "".concat(NAMESPACE, "-hide");
                var CLASS_INVISIBLE = "".concat(NAMESPACE, "-invisible");
                var CLASS_MODAL = "".concat(NAMESPACE, "-modal");
                var CLASS_MOVE = "".concat(NAMESPACE, "-move"); // Data keys

                var DATA_ACTION = "".concat(NAMESPACE, "Action");
                var DATA_PREVIEW = "".concat(NAMESPACE, "Preview"); // Drag modes

                var DRAG_MODE_CROP = 'crop';
                var DRAG_MODE_MOVE = 'move';
                var DRAG_MODE_NONE = 'none'; // Events

                var EVENT_CROP = 'crop';
                var EVENT_CROP_END = 'cropend';
                var EVENT_CROP_MOVE = 'cropmove';
                var EVENT_CROP_START = 'cropstart';
                var EVENT_DBLCLICK = 'dblclick';
                var EVENT_TOUCH_START = IS_TOUCH_DEVICE ? 'touchstart' : 'mousedown';
                var EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? 'touchmove' : 'mousemove';
                var EVENT_TOUCH_END = IS_TOUCH_DEVICE ? 'touchend touchcancel' : 'mouseup';
                var EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? 'pointerdown' : EVENT_TOUCH_START;
                var EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? 'pointermove' : EVENT_TOUCH_MOVE;
                var EVENT_POINTER_UP = HAS_POINTER_EVENT ? 'pointerup pointercancel' : EVENT_TOUCH_END;
                var EVENT_READY = 'ready';
                var EVENT_RESIZE = 'resize';
                var EVENT_WHEEL = 'wheel';
                var EVENT_ZOOM = 'zoom'; // Mime types

                var MIME_TYPE_JPEG = 'image/jpeg'; // RegExps

                var REGEXP_ACTIONS = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/;
                var REGEXP_DATA_URL_JPEG = /^data:image\/jpeg;base64,/;
                var REGEXP_TAG_NAME = /^img|canvas$/i; // Misc
                // Inspired by the default width and height of a canvas element.

                var MIN_CONTAINER_WIDTH = 200;
                var MIN_CONTAINER_HEIGHT = 100;

                var DEFAULTS = {
                    // Define the view mode of the cropper
                    viewMode: 0,
                    // 0, 1, 2, 3
                    // Define the dragging mode of the cropper
                    dragMode: DRAG_MODE_CROP,
                    // 'crop', 'move' or 'none'
                    // Define the initial aspect ratio of the crop box
                    initialAspectRatio: NaN,
                    // Define the aspect ratio of the crop box
                    aspectRatio: NaN,
                    // An object with the previous cropping result data
                    data: null,
                    // A selector for adding extra containers to preview
                    preview: '',
                    // Re-render the cropper when resize the window
                    responsive: true,
                    // Restore the cropped area after resize the window
                    restore: true,
                    // Check if the current image is a cross-origin image
                    checkCrossOrigin: true,
                    // Check the current image's Exif Orientation information
                    checkOrientation: true,
                    // Show the black modal
                    modal: true,
                    // Show the dashed lines for guiding
                    guides: true,
                    // Show the center indicator for guiding
                    center: true,
                    // Show the white modal to highlight the crop box
                    highlight: true,
                    // Show the grid background
                    background: true,
                    // Enable to crop the image automatically when initialize
                    autoCrop: true,
                    // Define the percentage of automatic cropping area when initializes
                    autoCropArea: 0.8,
                    // Enable to move the image
                    movable: true,
                    // Enable to rotate the image
                    rotatable: true,
                    // Enable to scale the image
                    scalable: true,
                    // Enable to zoom the image
                    zoomable: true,
                    // Enable to zoom the image by dragging touch
                    zoomOnTouch: true,
                    // Enable to zoom the image by wheeling mouse
                    zoomOnWheel: true,
                    // Define zoom ratio when zoom the image by wheeling mouse
                    wheelZoomRatio: 0.1,
                    // Enable to move the crop box
                    cropBoxMovable: true,
                    // Enable to resize the crop box
                    cropBoxResizable: true,
                    // Toggle drag mode between "crop" and "move" when click twice on the cropper
                    toggleDragModeOnDblclick: true,
                    // Size limitation
                    minCanvasWidth: 0,
                    minCanvasHeight: 0,
                    minCropBoxWidth: 0,
                    minCropBoxHeight: 0,
                    minContainerWidth: 200,
                    minContainerHeight: 100,
                    // Shortcuts of events
                    ready: null,
                    cropstart: null,
                    cropmove: null,
                    cropend: null,
                    crop: null,
                    zoom: null
                };

                var TEMPLATE = '<div class="cropper-container" touch-action="none">' + '<div class="cropper-wrap-box">' + '<div class="cropper-canvas"></div>' + '</div>' + '<div class="cropper-drag-box"></div>' + '<div class="cropper-crop-box">' + '<span class="cropper-view-box"></span>' + '<span class="cropper-dashed dashed-h"></span>' + '<span class="cropper-dashed dashed-v"></span>' + '<span class="cropper-center"></span>' + '<span class="cropper-face"></span>' + '<span class="cropper-line line-e" data-cropper-action="e"></span>' + '<span class="cropper-line line-n" data-cropper-action="n"></span>' + '<span class="cropper-line line-w" data-cropper-action="w"></span>' + '<span class="cropper-line line-s" data-cropper-action="s"></span>' + '<span class="cropper-point point-e" data-cropper-action="e"></span>' + '<span class="cropper-point point-n" data-cropper-action="n"></span>' + '<span class="cropper-point point-w" data-cropper-action="w"></span>' + '<span class="cropper-point point-s" data-cropper-action="s"></span>' + '<span class="cropper-point point-ne" data-cropper-action="ne"></span>' + '<span class="cropper-point point-nw" data-cropper-action="nw"></span>' + '<span class="cropper-point point-sw" data-cropper-action="sw"></span>' + '<span class="cropper-point point-se" data-cropper-action="se"></span>' + '</div>' + '</div>';

                /**
                 * Check if the given value is not a number.
                 */

                var isNaN = Number.isNaN || WINDOW.isNaN;
                /**
                 * Check if the given value is a number.
                 * @param {*} value - The value to check.
                 * @returns {boolean} Returns `true` if the given value is a number, else `false`.
                 */

                function isNumber(value) {
                    return typeof value === 'number' && !isNaN(value);
                }
                /**
                 * Check if the given value is a positive number.
                 * @param {*} value - The value to check.
                 * @returns {boolean} Returns `true` if the given value is a positive number, else `false`.
                 */

                var isPositiveNumber = function isPositiveNumber(value) {
                    return value > 0 && value < Infinity;
                };
                /**
                 * Check if the given value is undefined.
                 * @param {*} value - The value to check.
                 * @returns {boolean} Returns `true` if the given value is undefined, else `false`.
                 */

                function isUndefined(value) {
                    return typeof value === 'undefined';
                }
                /**
                 * Check if the given value is an object.
                 * @param {*} value - The value to check.
                 * @returns {boolean} Returns `true` if the given value is an object, else `false`.
                 */

                function isObject(value) {
                    return _typeof(value) === 'object' && value !== null;
                }
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                /**
                 * Check if the given value is a plain object.
                 * @param {*} value - The value to check.
                 * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.
                 */

                function isPlainObject(value) {
                    if (!isObject(value)) {
                        return false;
                    }

                    try {
                        var _constructor = value.constructor;
                        var prototype = _constructor.prototype;
                        return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');
                    } catch (error) {
                        return false;
                    }
                }
                /**
                 * Check if the given value is a function.
                 * @param {*} value - The value to check.
                 * @returns {boolean} Returns `true` if the given value is a function, else `false`.
                 */

                function isFunction(value) {
                    return typeof value === 'function';
                }
                var slice = Array.prototype.slice;
                /**
                 * Convert array-like or iterable object to an array.
                 * @param {*} value - The value to convert.
                 * @returns {Array} Returns a new array.
                 */

                function toArray(value) {
                    return Array.from ? Array.from(value) : slice.call(value);
                }
                /**
                 * Iterate the given data.
                 * @param {*} data - The data to iterate.
                 * @param {Function} callback - The process function for each element.
                 * @returns {*} The original data.
                 */

                function forEach(data, callback) {
                    if (data && isFunction(callback)) {
                        if (Array.isArray(data) || isNumber(data.length)
                            /* array-like */
                        ) {
                            toArray(data).forEach(function (value, key) {
                                callback.call(data, value, key, data);
                            });
                        } else if (isObject(data)) {
                            Object.keys(data).forEach(function (key) {
                                callback.call(data, data[key], key, data);
                            });
                        }
                    }

                    return data;
                }
                /**
                 * Extend the given object.
                 * @param {*} target - The target object to extend.
                 * @param {*} args - The rest objects for merging to the target object.
                 * @returns {Object} The extended object.
                 */

                var assign = Object.assign || function assign(target) {
                    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        args[_key - 1] = arguments[_key];
                    }

                    if (isObject(target) && args.length > 0) {
                        args.forEach(function (arg) {
                            if (isObject(arg)) {
                                Object.keys(arg).forEach(function (key) {
                                    target[key] = arg[key];
                                });
                            }
                        });
                    }

                    return target;
                };
                var REGEXP_DECIMALS = /\.\d*(?:0|9){12}\d*$/;
                /**
                 * Normalize decimal number.
                 * Check out {@link http://0.30000000000000004.com/}
                 * @param {number} value - The value to normalize.
                 * @param {number} [times=100000000000] - The times for normalizing.
                 * @returns {number} Returns the normalized number.
                 */

                function normalizeDecimalNumber(value) {
                    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;
                    return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;
                }
                var REGEXP_SUFFIX = /^width|height|left|top|marginLeft|marginTop$/;
                /**
                 * Apply styles to the given element.
                 * @param {Element} element - The target element.
                 * @param {Object} styles - The styles for applying.
                 */

                function setStyle(element, styles) {
                    var style = element.style;
                    forEach(styles, function (value, property) {
                        if (REGEXP_SUFFIX.test(property) && isNumber(value)) {
                            value = "".concat(value, "px");
                        }

                        style[property] = value;
                    });
                }
                /**
                 * Check if the given element has a special class.
                 * @param {Element} element - The element to check.
                 * @param {string} value - The class to search.
                 * @returns {boolean} Returns `true` if the special class was found.
                 */

                function hasClass(element, value) {
                    return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;
                }
                /**
                 * Add classes to the given element.
                 * @param {Element} element - The target element.
                 * @param {string} value - The classes to be added.
                 */

                function addClass(element, value) {
                    if (!value) {
                        return;
                    }

                    if (isNumber(element.length)) {
                        forEach(element, function (elem) {
                            addClass(elem, value);
                        });
                        return;
                    }

                    if (element.classList) {
                        element.classList.add(value);
                        return;
                    }

                    var className = element.className.trim();

                    if (!className) {
                        element.className = value;
                    } else if (className.indexOf(value) < 0) {
                        element.className = "".concat(className, " ").concat(value);
                    }
                }
                /**
                 * Remove classes from the given element.
                 * @param {Element} element - The target element.
                 * @param {string} value - The classes to be removed.
                 */

                function removeClass(element, value) {
                    if (!value) {
                        return;
                    }

                    if (isNumber(element.length)) {
                        forEach(element, function (elem) {
                            removeClass(elem, value);
                        });
                        return;
                    }

                    if (element.classList) {
                        element.classList.remove(value);
                        return;
                    }

                    if (element.className.indexOf(value) >= 0) {
                        element.className = element.className.replace(value, '');
                    }
                }
                /**
                 * Add or remove classes from the given element.
                 * @param {Element} element - The target element.
                 * @param {string} value - The classes to be toggled.
                 * @param {boolean} added - Add only.
                 */

                function toggleClass(element, value, added) {
                    if (!value) {
                        return;
                    }

                    if (isNumber(element.length)) {
                        forEach(element, function (elem) {
                            toggleClass(elem, value, added);
                        });
                        return;
                    } // IE10-11 doesn't support the second parameter of `classList.toggle`


                    if (added) {
                        addClass(element, value);
                    } else {
                        removeClass(element, value);
                    }
                }
                var REGEXP_CAMEL_CASE = /([a-z\d])([A-Z])/g;
                /**
                 * Transform the given string from camelCase to kebab-case
                 * @param {string} value - The value to transform.
                 * @returns {string} The transformed value.
                 */

                function toParamCase(value) {
                    return value.replace(REGEXP_CAMEL_CASE, '$1-$2').toLowerCase();
                }
                /**
                 * Get data from the given element.
                 * @param {Element} element - The target element.
                 * @param {string} name - The data key to get.
                 * @returns {string} The data value.
                 */

                function getData(element, name) {
                    if (isObject(element[name])) {
                        return element[name];
                    }

                    if (element.dataset) {
                        return element.dataset[name];
                    }

                    return element.getAttribute("data-".concat(toParamCase(name)));
                }
                /**
                 * Set data to the given element.
                 * @param {Element} element - The target element.
                 * @param {string} name - The data key to set.
                 * @param {string} data - The data value.
                 */

                function setData(element, name, data) {
                    if (isObject(data)) {
                        element[name] = data;
                    } else if (element.dataset) {
                        element.dataset[name] = data;
                    } else {
                        element.setAttribute("data-".concat(toParamCase(name)), data);
                    }
                }
                /**
                 * Remove data from the given element.
                 * @param {Element} element - The target element.
                 * @param {string} name - The data key to remove.
                 */

                function removeData(element, name) {
                    if (isObject(element[name])) {
                        try {
                            delete element[name];
                        } catch (error) {
                            element[name] = undefined;
                        }
                    } else if (element.dataset) {
                        // #128 Safari not allows to delete dataset property
                        try {
                            delete element.dataset[name];
                        } catch (error) {
                            element.dataset[name] = undefined;
                        }
                    } else {
                        element.removeAttribute("data-".concat(toParamCase(name)));
                    }
                }
                var REGEXP_SPACES = /\s\s*/;

                var onceSupported = function () {
                    var supported = false;

                    if (IS_BROWSER) {
                        var once = false;

                        var listener = function listener() {};

                        var options = Object.defineProperty({}, 'once', {
                            get: function get() {
                                supported = true;
                                return once;
                            },

                            /**
                             * This setter can fix a `TypeError` in strict mode
                             * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}
                             * @param {boolean} value - The value to set
                             */
                            set: function set(value) {
                                once = value;
                            }
                        });
                        WINDOW.addEventListener('test', listener, options);
                        WINDOW.removeEventListener('test', listener, options);
                    }

                    return supported;
                }();
                /**
                 * Remove event listener from the target element.
                 * @param {Element} element - The event target.
                 * @param {string} type - The event type(s).
                 * @param {Function} listener - The event listener.
                 * @param {Object} options - The event options.
                 */


                function removeListener(element, type, listener) {
                    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                    var handler = listener;
                    type.trim().split(REGEXP_SPACES).forEach(function (event) {
                        if (!onceSupported) {
                            var listeners = element.listeners;

                            if (listeners && listeners[event] && listeners[event][listener]) {
                                handler = listeners[event][listener];
                                delete listeners[event][listener];

                                if (Object.keys(listeners[event]).length === 0) {
                                    delete listeners[event];
                                }

                                if (Object.keys(listeners).length === 0) {
                                    delete element.listeners;
                                }
                            }
                        }

                        element.removeEventListener(event, handler, options);
                    });
                }
                /**
                 * Add event listener to the target element.
                 * @param {Element} element - The event target.
                 * @param {string} type - The event type(s).
                 * @param {Function} listener - The event listener.
                 * @param {Object} options - The event options.
                 */

                function addListener(element, type, listener) {
                    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                    var _handler = listener;
                    type.trim().split(REGEXP_SPACES).forEach(function (event) {
                        if (options.once && !onceSupported) {
                            var _element$listeners = element.listeners,
                                listeners = _element$listeners === void 0 ? {} : _element$listeners;

                            _handler = function handler() {
                                delete listeners[event][listener];
                                element.removeEventListener(event, _handler, options);

                                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                                    args[_key2] = arguments[_key2];
                                }

                                listener.apply(element, args);
                            };

                            if (!listeners[event]) {
                                listeners[event] = {};
                            }

                            if (listeners[event][listener]) {
                                element.removeEventListener(event, listeners[event][listener], options);
                            }

                            listeners[event][listener] = _handler;
                            element.listeners = listeners;
                        }

                        element.addEventListener(event, _handler, options);
                    });
                }
                /**
                 * Dispatch event on the target element.
                 * @param {Element} element - The event target.
                 * @param {string} type - The event type(s).
                 * @param {Object} data - The additional event data.
                 * @returns {boolean} Indicate if the event is default prevented or not.
                 */

                function dispatchEvent(element, type, data) {
                    var event; // Event and CustomEvent on IE9-11 are global objects, not constructors

                    if (isFunction(Event) && isFunction(CustomEvent)) {
                        event = new CustomEvent(type, {
                            detail: data,
                            bubbles: true,
                            cancelable: true
                        });
                    } else {
                        event = document.createEvent('CustomEvent');
                        event.initCustomEvent(type, true, true, data);
                    }

                    return element.dispatchEvent(event);
                }
                /**
                 * Get the offset base on the document.
                 * @param {Element} element - The target element.
                 * @returns {Object} The offset data.
                 */

                function getOffset(element) {
                    var box = element.getBoundingClientRect();
                    return {
                        left: box.left + (window.pageXOffset - document.documentElement.clientLeft),
                        top: box.top + (window.pageYOffset - document.documentElement.clientTop)
                    };
                }
                var location = WINDOW.location;
                var REGEXP_ORIGINS = /^(\w+:)\/\/([^:/?#]*):?(\d*)/i;
                /**
                 * Check if the given URL is a cross origin URL.
                 * @param {string} url - The target URL.
                 * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.
                 */

                function isCrossOriginURL(url) {
                    var parts = url.match(REGEXP_ORIGINS);
                    return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);
                }
                /**
                 * Add timestamp to the given URL.
                 * @param {string} url - The target URL.
                 * @returns {string} The result URL.
                 */

                function addTimestamp(url) {
                    var timestamp = "timestamp=".concat(new Date().getTime());
                    return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;
                }
                /**
                 * Get transforms base on the given object.
                 * @param {Object} obj - The target object.
                 * @returns {string} A string contains transform values.
                 */

                function getTransforms(_ref) {
                    var rotate = _ref.rotate,
                        scaleX = _ref.scaleX,
                        scaleY = _ref.scaleY,
                        translateX = _ref.translateX,
                        translateY = _ref.translateY;
                    var values = [];

                    if (isNumber(translateX) && translateX !== 0) {
                        values.push("translateX(".concat(translateX, "px)"));
                    }

                    if (isNumber(translateY) && translateY !== 0) {
                        values.push("translateY(".concat(translateY, "px)"));
                    } // Rotate should come first before scale to match orientation transform


                    if (isNumber(rotate) && rotate !== 0) {
                        values.push("rotate(".concat(rotate, "deg)"));
                    }

                    if (isNumber(scaleX) && scaleX !== 1) {
                        values.push("scaleX(".concat(scaleX, ")"));
                    }

                    if (isNumber(scaleY) && scaleY !== 1) {
                        values.push("scaleY(".concat(scaleY, ")"));
                    }

                    var transform = values.length ? values.join(' ') : 'none';
                    return {
                        WebkitTransform: transform,
                        msTransform: transform,
                        transform: transform
                    };
                }
                /**
                 * Get the max ratio of a group of pointers.
                 * @param {string} pointers - The target pointers.
                 * @returns {number} The result ratio.
                 */

                function getMaxZoomRatio(pointers) {
                    var pointers2 = assign({}, pointers);
                    var ratios = [];
                    forEach(pointers, function (pointer, pointerId) {
                        delete pointers2[pointerId];
                        forEach(pointers2, function (pointer2) {
                            var x1 = Math.abs(pointer.startX - pointer2.startX);
                            var y1 = Math.abs(pointer.startY - pointer2.startY);
                            var x2 = Math.abs(pointer.endX - pointer2.endX);
                            var y2 = Math.abs(pointer.endY - pointer2.endY);
                            var z1 = Math.sqrt(x1 * x1 + y1 * y1);
                            var z2 = Math.sqrt(x2 * x2 + y2 * y2);
                            var ratio = (z2 - z1) / z1;
                            ratios.push(ratio);
                        });
                    });
                    ratios.sort(function (a, b) {
                        return Math.abs(a) < Math.abs(b);
                    });
                    return ratios[0];
                }
                /**
                 * Get a pointer from an event object.
                 * @param {Object} event - The target event object.
                 * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.
                 * @returns {Object} The result pointer contains start and/or end point coordinates.
                 */

                function getPointer(_ref2, endOnly) {
                    var pageX = _ref2.pageX,
                        pageY = _ref2.pageY;
                    var end = {
                        endX: pageX,
                        endY: pageY
                    };
                    return endOnly ? end : assign({
                        startX: pageX,
                        startY: pageY
                    }, end);
                }
                /**
                 * Get the center point coordinate of a group of pointers.
                 * @param {Object} pointers - The target pointers.
                 * @returns {Object} The center point coordinate.
                 */

                function getPointersCenter(pointers) {
                    var pageX = 0;
                    var pageY = 0;
                    var count = 0;
                    forEach(pointers, function (_ref3) {
                        var startX = _ref3.startX,
                            startY = _ref3.startY;
                        pageX += startX;
                        pageY += startY;
                        count += 1;
                    });
                    pageX /= count;
                    pageY /= count;
                    return {
                        pageX: pageX,
                        pageY: pageY
                    };
                }
                /**
                 * Get the max sizes in a rectangle under the given aspect ratio.
                 * @param {Object} data - The original sizes.
                 * @param {string} [type='contain'] - The adjust type.
                 * @returns {Object} The result sizes.
                 */

                function getAdjustedSizes(_ref4) // or 'cover'
                {
                    var aspectRatio = _ref4.aspectRatio,
                        height = _ref4.height,
                        width = _ref4.width;
                    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';
                    var isValidWidth = isPositiveNumber(width);
                    var isValidHeight = isPositiveNumber(height);

                    if (isValidWidth && isValidHeight) {
                        var adjustedWidth = height * aspectRatio;

                        if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {
                            height = width / aspectRatio;
                        } else {
                            width = height * aspectRatio;
                        }
                    } else if (isValidWidth) {
                        height = width / aspectRatio;
                    } else if (isValidHeight) {
                        width = height * aspectRatio;
                    }

                    return {
                        width: width,
                        height: height
                    };
                }
                /**
                 * Get the new sizes of a rectangle after rotated.
                 * @param {Object} data - The original sizes.
                 * @returns {Object} The result sizes.
                 */

                function getRotatedSizes(_ref5) {
                    var width = _ref5.width,
                        height = _ref5.height,
                        degree = _ref5.degree;
                    degree = Math.abs(degree) % 180;

                    if (degree === 90) {
                        return {
                            width: height,
                            height: width
                        };
                    }

                    var arc = degree % 90 * Math.PI / 180;
                    var sinArc = Math.sin(arc);
                    var cosArc = Math.cos(arc);
                    var newWidth = width * cosArc + height * sinArc;
                    var newHeight = width * sinArc + height * cosArc;
                    return degree > 90 ? {
                        width: newHeight,
                        height: newWidth
                    } : {
                        width: newWidth,
                        height: newHeight
                    };
                }
                /**
                 * Get a canvas which drew the given image.
                 * @param {HTMLImageElement} image - The image for drawing.
                 * @param {Object} imageData - The image data.
                 * @param {Object} canvasData - The canvas data.
                 * @param {Object} options - The options.
                 * @returns {HTMLCanvasElement} The result canvas.
                 */

                function getSourceCanvas(image, _ref6, _ref7, _ref8) {
                    var imageAspectRatio = _ref6.aspectRatio,
                        imageNaturalWidth = _ref6.naturalWidth,
                        imageNaturalHeight = _ref6.naturalHeight,
                        _ref6$rotate = _ref6.rotate,
                        rotate = _ref6$rotate === void 0 ? 0 : _ref6$rotate,
                        _ref6$scaleX = _ref6.scaleX,
                        scaleX = _ref6$scaleX === void 0 ? 1 : _ref6$scaleX,
                        _ref6$scaleY = _ref6.scaleY,
                        scaleY = _ref6$scaleY === void 0 ? 1 : _ref6$scaleY;
                    var aspectRatio = _ref7.aspectRatio,
                        naturalWidth = _ref7.naturalWidth,
                        naturalHeight = _ref7.naturalHeight;
                    var _ref8$fillColor = _ref8.fillColor,
                        fillColor = _ref8$fillColor === void 0 ? 'transparent' : _ref8$fillColor,
                        _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,
                        imageSmoothingEnabled = _ref8$imageSmoothingE === void 0 ? true : _ref8$imageSmoothingE,
                        _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,
                        imageSmoothingQuality = _ref8$imageSmoothingQ === void 0 ? 'low' : _ref8$imageSmoothingQ,
                        _ref8$maxWidth = _ref8.maxWidth,
                        maxWidth = _ref8$maxWidth === void 0 ? Infinity : _ref8$maxWidth,
                        _ref8$maxHeight = _ref8.maxHeight,
                        maxHeight = _ref8$maxHeight === void 0 ? Infinity : _ref8$maxHeight,
                        _ref8$minWidth = _ref8.minWidth,
                        minWidth = _ref8$minWidth === void 0 ? 0 : _ref8$minWidth,
                        _ref8$minHeight = _ref8.minHeight,
                        minHeight = _ref8$minHeight === void 0 ? 0 : _ref8$minHeight;
                    var canvas = document.createElement('canvas');
                    var context = canvas.getContext('2d');
                    var maxSizes = getAdjustedSizes({
                        aspectRatio: aspectRatio,
                        width: maxWidth,
                        height: maxHeight
                    });
                    var minSizes = getAdjustedSizes({
                        aspectRatio: aspectRatio,
                        width: minWidth,
                        height: minHeight
                    }, 'cover');
                    var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));
                    var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight)); // Note: should always use image's natural sizes for drawing as
                    // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90

                    var destMaxSizes = getAdjustedSizes({
                        aspectRatio: imageAspectRatio,
                        width: maxWidth,
                        height: maxHeight
                    });
                    var destMinSizes = getAdjustedSizes({
                        aspectRatio: imageAspectRatio,
                        width: minWidth,
                        height: minHeight
                    }, 'cover');
                    var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));
                    var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));
                    var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];
                    canvas.width = normalizeDecimalNumber(width);
                    canvas.height = normalizeDecimalNumber(height);
                    context.fillStyle = fillColor;
                    context.fillRect(0, 0, width, height);
                    context.save();
                    context.translate(width / 2, height / 2);
                    context.rotate(rotate * Math.PI / 180);
                    context.scale(scaleX, scaleY);
                    context.imageSmoothingEnabled = imageSmoothingEnabled;
                    context.imageSmoothingQuality = imageSmoothingQuality;
                    context.drawImage.apply(context, [image].concat(_toConsumableArray(params.map(function (param) {
                        return Math.floor(normalizeDecimalNumber(param));
                    }))));
                    context.restore();
                    return canvas;
                }
                var fromCharCode = String.fromCharCode;
                /**
                 * Get string from char code in data view.
                 * @param {DataView} dataView - The data view for read.
                 * @param {number} start - The start index.
                 * @param {number} length - The read length.
                 * @returns {string} The read result.
                 */

                function getStringFromCharCode(dataView, start, length) {
                    var str = '';
                    length += start;

                    for (var i = start; i < length; i += 1) {
                        str += fromCharCode(dataView.getUint8(i));
                    }

                    return str;
                }
                var REGEXP_DATA_URL_HEAD = /^data:.*,/;
                /**
                 * Transform Data URL to array buffer.
                 * @param {string} dataURL - The Data URL to transform.
                 * @returns {ArrayBuffer} The result array buffer.
                 */

                function dataURLToArrayBuffer(dataURL) {
                    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');
                    var binary = atob(base64);
                    var arrayBuffer = new ArrayBuffer(binary.length);
                    var uint8 = new Uint8Array(arrayBuffer);
                    forEach(uint8, function (value, i) {
                        uint8[i] = binary.charCodeAt(i);
                    });
                    return arrayBuffer;
                }
                /**
                 * Transform array buffer to Data URL.
                 * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.
                 * @param {string} mimeType - The mime type of the Data URL.
                 * @returns {string} The result Data URL.
                 */

                function arrayBufferToDataURL(arrayBuffer, mimeType) {
                    var chunks = []; // Chunk Typed Array for better performance (#435)

                    var chunkSize = 8192;
                    var uint8 = new Uint8Array(arrayBuffer);

                    while (uint8.length > 0) {
                        // XXX: Babel's `toConsumableArray` helper will throw error in IE or Safari 9
                        // eslint-disable-next-line prefer-spread
                        chunks.push(fromCharCode.apply(null, toArray(uint8.subarray(0, chunkSize))));
                        uint8 = uint8.subarray(chunkSize);
                    }

                    return "data:".concat(mimeType, ";base64,").concat(btoa(chunks.join('')));
                }
                /**
                 * Get orientation value from given array buffer.
                 * @param {ArrayBuffer} arrayBuffer - The array buffer to read.
                 * @returns {number} The read orientation value.
                 */

                function resetAndGetOrientation(arrayBuffer) {
                    var dataView = new DataView(arrayBuffer);
                    var orientation; // Ignores range error when the image does not have correct Exif information

                    try {
                        var littleEndian;
                        var app1Start;
                        var ifdStart; // Only handle JPEG image (start by 0xFFD8)

                        if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {
                            var length = dataView.byteLength;
                            var offset = 2;

                            while (offset + 1 < length) {
                                if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {
                                    app1Start = offset;
                                    break;
                                }

                                offset += 1;
                            }
                        }

                        if (app1Start) {
                            var exifIDCode = app1Start + 4;
                            var tiffOffset = app1Start + 10;

                            if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {
                                var endianness = dataView.getUint16(tiffOffset);
                                littleEndian = endianness === 0x4949;

                                if (littleEndian || endianness === 0x4D4D
                                    /* bigEndian */
                                ) {
                                    if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {
                                        var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);

                                        if (firstIFDOffset >= 0x00000008) {
                                            ifdStart = tiffOffset + firstIFDOffset;
                                        }
                                    }
                                }
                            }
                        }

                        if (ifdStart) {
                            var _length = dataView.getUint16(ifdStart, littleEndian);

                            var _offset;

                            var i;

                            for (i = 0; i < _length; i += 1) {
                                _offset = ifdStart + i * 12 + 2;

                                if (dataView.getUint16(_offset, littleEndian) === 0x0112
                                    /* Orientation */
                                ) {
                                    // 8 is the offset of the current tag's value
                                    _offset += 8; // Get the original orientation value

                                    orientation = dataView.getUint16(_offset, littleEndian); // Override the orientation with its default value

                                    dataView.setUint16(_offset, 1, littleEndian);
                                    break;
                                }
                            }
                        }
                    } catch (error) {
                        orientation = 1;
                    }

                    return orientation;
                }
                /**
                 * Parse Exif Orientation value.
                 * @param {number} orientation - The orientation to parse.
                 * @returns {Object} The parsed result.
                 */

                function parseOrientation(orientation) {
                    var rotate = 0;
                    var scaleX = 1;
                    var scaleY = 1;

                    switch (orientation) {
                        // Flip horizontal
                        case 2:
                            scaleX = -1;
                            break;
                        // Rotate left 180°

                        case 3:
                            rotate = -180;
                            break;
                        // Flip vertical

                        case 4:
                            scaleY = -1;
                            break;
                        // Flip vertical and rotate right 90°

                        case 5:
                            rotate = 90;
                            scaleY = -1;
                            break;
                        // Rotate right 90°

                        case 6:
                            rotate = 90;
                            break;
                        // Flip horizontal and rotate right 90°

                        case 7:
                            rotate = 90;
                            scaleX = -1;
                            break;
                        // Rotate left 90°

                        case 8:
                            rotate = -90;
                            break;

                        default:
                    }

                    return {
                        rotate: rotate,
                        scaleX: scaleX,
                        scaleY: scaleY
                    };
                }

                var render = {
                    render: function render() {
                        this.initContainer();
                        this.initCanvas();
                        this.initCropBox();
                        this.renderCanvas();

                        if (this.cropped) {
                            this.renderCropBox();
                        }
                    },
                    initContainer: function initContainer() {
                        var element = this.element,
                            options = this.options,
                            container = this.container,
                            cropper = this.cropper;
                        addClass(cropper, CLASS_HIDDEN);
                        removeClass(element, CLASS_HIDDEN);
                        var containerData = {
                            width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),
                            height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)
                        };
                        this.containerData = containerData;
                        setStyle(cropper, {
                            width: containerData.width,
                            height: containerData.height
                        });
                        addClass(element, CLASS_HIDDEN);
                        removeClass(cropper, CLASS_HIDDEN);
                    },
                    // Canvas (image wrapper)
                    initCanvas: function initCanvas() {
                        var containerData = this.containerData,
                            imageData = this.imageData;
                        var viewMode = this.options.viewMode;
                        var rotated = Math.abs(imageData.rotate) % 180 === 90;
                        var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;
                        var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;
                        var aspectRatio = naturalWidth / naturalHeight;
                        var canvasWidth = containerData.width;
                        var canvasHeight = containerData.height;

                        if (containerData.height * aspectRatio > containerData.width) {
                            if (viewMode === 3) {
                                canvasWidth = containerData.height * aspectRatio;
                            } else {
                                canvasHeight = containerData.width / aspectRatio;
                            }
                        } else if (viewMode === 3) {
                            canvasHeight = containerData.width / aspectRatio;
                        } else {
                            canvasWidth = containerData.height * aspectRatio;
                        }

                        var canvasData = {
                            aspectRatio: aspectRatio,
                            naturalWidth: naturalWidth,
                            naturalHeight: naturalHeight,
                            width: canvasWidth,
                            height: canvasHeight
                        };
                        canvasData.left = (containerData.width - canvasWidth) / 2;
                        canvasData.top = (containerData.height - canvasHeight) / 2;
                        canvasData.oldLeft = canvasData.left;
                        canvasData.oldTop = canvasData.top;
                        this.canvasData = canvasData;
                        this.limited = viewMode === 1 || viewMode === 2;
                        this.limitCanvas(true, true);
                        this.initialImageData = assign({}, imageData);
                        this.initialCanvasData = assign({}, canvasData);
                    },
                    limitCanvas: function limitCanvas(sizeLimited, positionLimited) {
                        var options = this.options,
                            containerData = this.containerData,
                            canvasData = this.canvasData,
                            cropBoxData = this.cropBoxData;
                        var viewMode = options.viewMode;
                        var aspectRatio = canvasData.aspectRatio;
                        var cropped = this.cropped && cropBoxData;

                        if (sizeLimited) {
                            var minCanvasWidth = Number(options.minCanvasWidth) || 0;
                            var minCanvasHeight = Number(options.minCanvasHeight) || 0;

                            if (viewMode > 1) {
                                minCanvasWidth = Math.max(minCanvasWidth, containerData.width);
                                minCanvasHeight = Math.max(minCanvasHeight, containerData.height);

                                if (viewMode === 3) {
                                    if (minCanvasHeight * aspectRatio > minCanvasWidth) {
                                        minCanvasWidth = minCanvasHeight * aspectRatio;
                                    } else {
                                        minCanvasHeight = minCanvasWidth / aspectRatio;
                                    }
                                }
                            } else if (viewMode > 0) {
                                if (minCanvasWidth) {
                                    minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);
                                } else if (minCanvasHeight) {
                                    minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);
                                } else if (cropped) {
                                    minCanvasWidth = cropBoxData.width;
                                    minCanvasHeight = cropBoxData.height;

                                    if (minCanvasHeight * aspectRatio > minCanvasWidth) {
                                        minCanvasWidth = minCanvasHeight * aspectRatio;
                                    } else {
                                        minCanvasHeight = minCanvasWidth / aspectRatio;
                                    }
                                }
                            }

                            var _getAdjustedSizes = getAdjustedSizes({
                                aspectRatio: aspectRatio,
                                width: minCanvasWidth,
                                height: minCanvasHeight
                            });

                            minCanvasWidth = _getAdjustedSizes.width;
                            minCanvasHeight = _getAdjustedSizes.height;
                            canvasData.minWidth = minCanvasWidth;
                            canvasData.minHeight = minCanvasHeight;
                            canvasData.maxWidth = Infinity;
                            canvasData.maxHeight = Infinity;
                        }

                        if (positionLimited) {
                            if (viewMode > (cropped ? 0 : 1)) {
                                var newCanvasLeft = containerData.width - canvasData.width;
                                var newCanvasTop = containerData.height - canvasData.height;
                                canvasData.minLeft = Math.min(0, newCanvasLeft);
                                canvasData.minTop = Math.min(0, newCanvasTop);
                                canvasData.maxLeft = Math.max(0, newCanvasLeft);
                                canvasData.maxTop = Math.max(0, newCanvasTop);

                                if (cropped && this.limited) {
                                    canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));
                                    canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));
                                    canvasData.maxLeft = cropBoxData.left;
                                    canvasData.maxTop = cropBoxData.top;

                                    if (viewMode === 2) {
                                        if (canvasData.width >= containerData.width) {
                                            canvasData.minLeft = Math.min(0, newCanvasLeft);
                                            canvasData.maxLeft = Math.max(0, newCanvasLeft);
                                        }

                                        if (canvasData.height >= containerData.height) {
                                            canvasData.minTop = Math.min(0, newCanvasTop);
                                            canvasData.maxTop = Math.max(0, newCanvasTop);
                                        }
                                    }
                                }
                            } else {
                                canvasData.minLeft = -canvasData.width;
                                canvasData.minTop = -canvasData.height;
                                canvasData.maxLeft = containerData.width;
                                canvasData.maxTop = containerData.height;
                            }
                        }
                    },
                    renderCanvas: function renderCanvas(changed, transformed) {
                        var canvasData = this.canvasData,
                            imageData = this.imageData;

                        if (transformed) {
                            var _getRotatedSizes = getRotatedSizes({
                                    width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),
                                    height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),
                                    degree: imageData.rotate || 0
                                }),
                                naturalWidth = _getRotatedSizes.width,
                                naturalHeight = _getRotatedSizes.height;

                            var width = canvasData.width * (naturalWidth / canvasData.naturalWidth);
                            var height = canvasData.height * (naturalHeight / canvasData.naturalHeight);
                            canvasData.left -= (width - canvasData.width) / 2;
                            canvasData.top -= (height - canvasData.height) / 2;
                            canvasData.width = width;
                            canvasData.height = height;
                            canvasData.aspectRatio = naturalWidth / naturalHeight;
                            canvasData.naturalWidth = naturalWidth;
                            canvasData.naturalHeight = naturalHeight;
                            this.limitCanvas(true, false);
                        }

                        if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {
                            canvasData.left = canvasData.oldLeft;
                        }

                        if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {
                            canvasData.top = canvasData.oldTop;
                        }

                        canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);
                        canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);
                        this.limitCanvas(false, true);
                        canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);
                        canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);
                        canvasData.oldLeft = canvasData.left;
                        canvasData.oldTop = canvasData.top;
                        setStyle(this.canvas, assign({
                            width: canvasData.width,
                            height: canvasData.height
                        }, getTransforms({
                            translateX: canvasData.left,
                            translateY: canvasData.top
                        })));
                        this.renderImage(changed);

                        if (this.cropped && this.limited) {
                            this.limitCropBox(true, true);
                        }
                    },
                    renderImage: function renderImage(changed) {
                        var canvasData = this.canvasData,
                            imageData = this.imageData;
                        var width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);
                        var height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);
                        assign(imageData, {
                            width: width,
                            height: height,
                            left: (canvasData.width - width) / 2,
                            top: (canvasData.height - height) / 2
                        });
                        setStyle(this.image, assign({
                            width: imageData.width,
                            height: imageData.height
                        }, getTransforms(assign({
                            translateX: imageData.left,
                            translateY: imageData.top
                        }, imageData))));

                        if (changed) {
                            this.output();
                        }
                    },
                    initCropBox: function initCropBox() {
                        var options = this.options,
                            canvasData = this.canvasData;
                        var aspectRatio = options.aspectRatio || options.initialAspectRatio;
                        var autoCropArea = Number(options.autoCropArea) || 0.8;
                        var cropBoxData = {
                            width: canvasData.width,
                            height: canvasData.height
                        };

                        if (aspectRatio) {
                            if (canvasData.height * aspectRatio > canvasData.width) {
                                cropBoxData.height = cropBoxData.width / aspectRatio;
                            } else {
                                cropBoxData.width = cropBoxData.height * aspectRatio;
                            }
                        }

                        this.cropBoxData = cropBoxData;
                        this.limitCropBox(true, true); // Initialize auto crop area

                        cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);
                        cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight); // The width/height of auto crop area must large than "minWidth/Height"

                        cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);
                        cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);
                        cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;
                        cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;
                        cropBoxData.oldLeft = cropBoxData.left;
                        cropBoxData.oldTop = cropBoxData.top;
                        this.initialCropBoxData = assign({}, cropBoxData);
                    },
                    limitCropBox: function limitCropBox(sizeLimited, positionLimited) {
                        var options = this.options,
                            containerData = this.containerData,
                            canvasData = this.canvasData,
                            cropBoxData = this.cropBoxData,
                            limited = this.limited;
                        var aspectRatio = options.aspectRatio;

                        if (sizeLimited) {
                            var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;
                            var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;
                            var maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;
                            var maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height; // The min/maxCropBoxWidth/Height must be less than container's width/height

                            minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);
                            minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);

                            if (aspectRatio) {
                                if (minCropBoxWidth && minCropBoxHeight) {
                                    if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {
                                        minCropBoxHeight = minCropBoxWidth / aspectRatio;
                                    } else {
                                        minCropBoxWidth = minCropBoxHeight * aspectRatio;
                                    }
                                } else if (minCropBoxWidth) {
                                    minCropBoxHeight = minCropBoxWidth / aspectRatio;
                                } else if (minCropBoxHeight) {
                                    minCropBoxWidth = minCropBoxHeight * aspectRatio;
                                }

                                if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {
                                    maxCropBoxHeight = maxCropBoxWidth / aspectRatio;
                                } else {
                                    maxCropBoxWidth = maxCropBoxHeight * aspectRatio;
                                }
                            } // The minWidth/Height must be less than maxWidth/Height


                            cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);
                            cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);
                            cropBoxData.maxWidth = maxCropBoxWidth;
                            cropBoxData.maxHeight = maxCropBoxHeight;
                        }

                        if (positionLimited) {
                            if (limited) {
                                cropBoxData.minLeft = Math.max(0, canvasData.left);
                                cropBoxData.minTop = Math.max(0, canvasData.top);
                                cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;
                                cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;
                            } else {
                                cropBoxData.minLeft = 0;
                                cropBoxData.minTop = 0;
                                cropBoxData.maxLeft = containerData.width - cropBoxData.width;
                                cropBoxData.maxTop = containerData.height - cropBoxData.height;
                            }
                        }
                    },
                    renderCropBox: function renderCropBox() {
                        var options = this.options,
                            containerData = this.containerData,
                            cropBoxData = this.cropBoxData;

                        if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {
                            cropBoxData.left = cropBoxData.oldLeft;
                        }

                        if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {
                            cropBoxData.top = cropBoxData.oldTop;
                        }

                        cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);
                        cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);
                        this.limitCropBox(false, true);
                        cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);
                        cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);
                        cropBoxData.oldLeft = cropBoxData.left;
                        cropBoxData.oldTop = cropBoxData.top;

                        if (options.movable && options.cropBoxMovable) {
                            // Turn to move the canvas when the crop box is equal to the container
                            setData(this.face, DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? ACTION_MOVE : ACTION_ALL);
                        }

                        setStyle(this.cropBox, assign({
                            width: cropBoxData.width,
                            height: cropBoxData.height
                        }, getTransforms({
                            translateX: cropBoxData.left,
                            translateY: cropBoxData.top
                        })));

                        if (this.cropped && this.limited) {
                            this.limitCanvas(true, true);
                        }

                        if (!this.disabled) {
                            this.output();
                        }
                    },
                    output: function output() {
                        this.preview();
                        dispatchEvent(this.element, EVENT_CROP, this.getData());
                    }
                };

                var preview = {
                    initPreview: function initPreview() {
                        var crossOrigin = this.crossOrigin;
                        var preview = this.options.preview;
                        var url = crossOrigin ? this.crossOriginUrl : this.url;
                        var image = document.createElement('img');

                        if (crossOrigin) {
                            image.crossOrigin = crossOrigin;
                        }

                        image.src = url;
                        this.viewBox.appendChild(image);
                        this.viewBoxImage = image;

                        if (!preview) {
                            return;
                        }

                        var previews = preview;

                        if (typeof preview === 'string') {
                            previews = this.element.ownerDocument.querySelectorAll(preview);
                        } else if (preview.querySelector) {
                            previews = [preview];
                        }

                        this.previews = previews;
                        forEach(previews, function (el) {
                            var img = document.createElement('img'); // Save the original size for recover

                            setData(el, DATA_PREVIEW, {
                                width: el.offsetWidth,
                                height: el.offsetHeight,
                                html: el.innerHTML
                            });

                            if (crossOrigin) {
                                img.crossOrigin = crossOrigin;
                            }

                            img.src = url;
                            /**
                             * Override img element styles
                             * Add `display:block` to avoid margin top issue
                             * Add `height:auto` to override `height` attribute on IE8
                             * (Occur only when margin-top <= -height)
                             */

                            img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;"';
                            el.innerHTML = '';
                            el.appendChild(img);
                        });
                    },
                    resetPreview: function resetPreview() {
                        forEach(this.previews, function (element) {
                            var data = getData(element, DATA_PREVIEW);
                            setStyle(element, {
                                width: data.width,
                                height: data.height
                            });
                            element.innerHTML = data.html;
                            removeData(element, DATA_PREVIEW);
                        });
                    },
                    preview: function preview() {
                        var imageData = this.imageData,
                            canvasData = this.canvasData,
                            cropBoxData = this.cropBoxData;
                        var cropBoxWidth = cropBoxData.width,
                            cropBoxHeight = cropBoxData.height;
                        var width = imageData.width,
                            height = imageData.height;
                        var left = cropBoxData.left - canvasData.left - imageData.left;
                        var top = cropBoxData.top - canvasData.top - imageData.top;

                        if (!this.cropped || this.disabled) {
                            return;
                        }

                        setStyle(this.viewBoxImage, assign({
                            width: width,
                            height: height
                        }, getTransforms(assign({
                            translateX: -left,
                            translateY: -top
                        }, imageData))));
                        forEach(this.previews, function (element) {
                            var data = getData(element, DATA_PREVIEW);
                            var originalWidth = data.width;
                            var originalHeight = data.height;
                            var newWidth = originalWidth;
                            var newHeight = originalHeight;
                            var ratio = 1;

                            if (cropBoxWidth) {
                                ratio = originalWidth / cropBoxWidth;
                                newHeight = cropBoxHeight * ratio;
                            }

                            if (cropBoxHeight && newHeight > originalHeight) {
                                ratio = originalHeight / cropBoxHeight;
                                newWidth = cropBoxWidth * ratio;
                                newHeight = originalHeight;
                            }

                            setStyle(element, {
                                width: newWidth,
                                height: newHeight
                            });
                            setStyle(element.getElementsByTagName('img')[0], assign({
                                width: width * ratio,
                                height: height * ratio
                            }, getTransforms(assign({
                                translateX: -left * ratio,
                                translateY: -top * ratio
                            }, imageData))));
                        });
                    }
                };

                var events = {
                    bind: function bind() {
                        var element = this.element,
                            options = this.options,
                            cropper = this.cropper;

                        if (isFunction(options.cropstart)) {
                            addListener(element, EVENT_CROP_START, options.cropstart);
                        }

                        if (isFunction(options.cropmove)) {
                            addListener(element, EVENT_CROP_MOVE, options.cropmove);
                        }

                        if (isFunction(options.cropend)) {
                            addListener(element, EVENT_CROP_END, options.cropend);
                        }

                        if (isFunction(options.crop)) {
                            addListener(element, EVENT_CROP, options.crop);
                        }

                        if (isFunction(options.zoom)) {
                            addListener(element, EVENT_ZOOM, options.zoom);
                        }

                        addListener(cropper, EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));

                        if (options.zoomable && options.zoomOnWheel) {
                            addListener(cropper, EVENT_WHEEL, this.onWheel = this.wheel.bind(this), {
                                passive: false,
                                capture: true
                            });
                        }

                        if (options.toggleDragModeOnDblclick) {
                            addListener(cropper, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));
                        }

                        addListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));
                        addListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));

                        if (options.responsive) {
                            addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));
                        }
                    },
                    unbind: function unbind() {
                        var element = this.element,
                            options = this.options,
                            cropper = this.cropper;

                        if (isFunction(options.cropstart)) {
                            removeListener(element, EVENT_CROP_START, options.cropstart);
                        }

                        if (isFunction(options.cropmove)) {
                            removeListener(element, EVENT_CROP_MOVE, options.cropmove);
                        }

                        if (isFunction(options.cropend)) {
                            removeListener(element, EVENT_CROP_END, options.cropend);
                        }

                        if (isFunction(options.crop)) {
                            removeListener(element, EVENT_CROP, options.crop);
                        }

                        if (isFunction(options.zoom)) {
                            removeListener(element, EVENT_ZOOM, options.zoom);
                        }

                        removeListener(cropper, EVENT_POINTER_DOWN, this.onCropStart);

                        if (options.zoomable && options.zoomOnWheel) {
                            removeListener(cropper, EVENT_WHEEL, this.onWheel, {
                                passive: false,
                                capture: true
                            });
                        }

                        if (options.toggleDragModeOnDblclick) {
                            removeListener(cropper, EVENT_DBLCLICK, this.onDblclick);
                        }

                        removeListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove);
                        removeListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd);

                        if (options.responsive) {
                            removeListener(window, EVENT_RESIZE, this.onResize);
                        }
                    }
                };

                var handlers = {
                    resize: function resize() {
                        var options = this.options,
                            container = this.container,
                            containerData = this.containerData;
                        var minContainerWidth = Number(options.minContainerWidth) || MIN_CONTAINER_WIDTH;
                        var minContainerHeight = Number(options.minContainerHeight) || MIN_CONTAINER_HEIGHT;

                        if (this.disabled || containerData.width <= minContainerWidth || containerData.height <= minContainerHeight) {
                            return;
                        }

                        var ratio = container.offsetWidth / containerData.width; // Resize when width changed or height changed

                        if (ratio !== 1 || container.offsetHeight !== containerData.height) {
                            var canvasData;
                            var cropBoxData;

                            if (options.restore) {
                                canvasData = this.getCanvasData();
                                cropBoxData = this.getCropBoxData();
                            }

                            this.render();

                            if (options.restore) {
                                this.setCanvasData(forEach(canvasData, function (n, i) {
                                    canvasData[i] = n * ratio;
                                }));
                                this.setCropBoxData(forEach(cropBoxData, function (n, i) {
                                    cropBoxData[i] = n * ratio;
                                }));
                            }
                        }
                    },
                    dblclick: function dblclick() {
                        if (this.disabled || this.options.dragMode === DRAG_MODE_NONE) {
                            return;
                        }

                        this.setDragMode(hasClass(this.dragBox, CLASS_CROP) ? DRAG_MODE_MOVE : DRAG_MODE_CROP);
                    },
                    wheel: function wheel(event) {
                        var _this = this;

                        var ratio = Number(this.options.wheelZoomRatio) || 0.1;
                        var delta = 1;

                        if (this.disabled) {
                            return;
                        }

                        event.preventDefault(); // Limit wheel speed to prevent zoom too fast (#21)

                        if (this.wheeling) {
                            return;
                        }

                        this.wheeling = true;
                        setTimeout(function () {
                            _this.wheeling = false;
                        }, 50);

                        if (event.deltaY) {
                            delta = event.deltaY > 0 ? 1 : -1;
                        } else if (event.wheelDelta) {
                            delta = -event.wheelDelta / 120;
                        } else if (event.detail) {
                            delta = event.detail > 0 ? 1 : -1;
                        }

                        this.zoom(-delta * ratio, event);
                    },
                    cropStart: function cropStart(event) {
                        var buttons = event.buttons,
                            button = event.button;

                        if (this.disabled // No primary button (Usually the left button)
                            // Note that touch events have no `buttons` or `button` property
                            || isNumber(buttons) && buttons !== 1 || isNumber(button) && button !== 0 // Open context menu
                            || event.ctrlKey) {
                            return;
                        }

                        var options = this.options,
                            pointers = this.pointers;
                        var action;

                        if (event.changedTouches) {
                            // Handle touch event
                            forEach(event.changedTouches, function (touch) {
                                pointers[touch.identifier] = getPointer(touch);
                            });
                        } else {
                            // Handle mouse event and pointer event
                            pointers[event.pointerId || 0] = getPointer(event);
                        }

                        if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {
                            action = ACTION_ZOOM;
                        } else {
                            action = getData(event.target, DATA_ACTION);
                        }

                        if (!REGEXP_ACTIONS.test(action)) {
                            return;
                        }

                        if (dispatchEvent(this.element, EVENT_CROP_START, {
                            originalEvent: event,
                            action: action
                        }) === false) {
                            return;
                        } // This line is required for preventing page zooming in iOS browsers


                        event.preventDefault();
                        this.action = action;
                        this.cropping = false;

                        if (action === ACTION_CROP) {
                            this.cropping = true;
                            addClass(this.dragBox, CLASS_MODAL);
                        }
                    },
                    cropMove: function cropMove(event) {
                        var action = this.action;

                        if (this.disabled || !action) {
                            return;
                        }

                        var pointers = this.pointers;
                        event.preventDefault();

                        if (dispatchEvent(this.element, EVENT_CROP_MOVE, {
                            originalEvent: event,
                            action: action
                        }) === false) {
                            return;
                        }

                        if (event.changedTouches) {
                            forEach(event.changedTouches, function (touch) {
                                // The first parameter should not be undefined (#432)
                                assign(pointers[touch.identifier] || {}, getPointer(touch, true));
                            });
                        } else {
                            assign(pointers[event.pointerId || 0] || {}, getPointer(event, true));
                        }

                        this.change(event);
                    },
                    cropEnd: function cropEnd(event) {
                        if (this.disabled) {
                            return;
                        }

                        var action = this.action,
                            pointers = this.pointers;

                        if (event.changedTouches) {
                            forEach(event.changedTouches, function (touch) {
                                delete pointers[touch.identifier];
                            });
                        } else {
                            delete pointers[event.pointerId || 0];
                        }

                        if (!action) {
                            return;
                        }

                        event.preventDefault();

                        if (!Object.keys(pointers).length) {
                            this.action = '';
                        }

                        if (this.cropping) {
                            this.cropping = false;
                            toggleClass(this.dragBox, CLASS_MODAL, this.cropped && this.options.modal);
                        }

                        dispatchEvent(this.element, EVENT_CROP_END, {
                            originalEvent: event,
                            action: action
                        });
                    }
                };

                var change = {
                    change: function change(event) {
                        var options = this.options,
                            canvasData = this.canvasData,
                            containerData = this.containerData,
                            cropBoxData = this.cropBoxData,
                            pointers = this.pointers;
                        var action = this.action;
                        var aspectRatio = options.aspectRatio;
                        var left = cropBoxData.left,
                            top = cropBoxData.top,
                            width = cropBoxData.width,
                            height = cropBoxData.height;
                        var right = left + width;
                        var bottom = top + height;
                        var minLeft = 0;
                        var minTop = 0;
                        var maxWidth = containerData.width;
                        var maxHeight = containerData.height;
                        var renderable = true;
                        var offset; // Locking aspect ratio in "free mode" by holding shift key

                        if (!aspectRatio && event.shiftKey) {
                            aspectRatio = width && height ? width / height : 1;
                        }

                        if (this.limited) {
                            minLeft = cropBoxData.minLeft;
                            minTop = cropBoxData.minTop;
                            maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);
                            maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);
                        }

                        var pointer = pointers[Object.keys(pointers)[0]];
                        var range = {
                            x: pointer.endX - pointer.startX,
                            y: pointer.endY - pointer.startY
                        };

                        var check = function check(side) {
                            switch (side) {
                                case ACTION_EAST:
                                    if (right + range.x > maxWidth) {
                                        range.x = maxWidth - right;
                                    }

                                    break;

                                case ACTION_WEST:
                                    if (left + range.x < minLeft) {
                                        range.x = minLeft - left;
                                    }

                                    break;

                                case ACTION_NORTH:
                                    if (top + range.y < minTop) {
                                        range.y = minTop - top;
                                    }

                                    break;

                                case ACTION_SOUTH:
                                    if (bottom + range.y > maxHeight) {
                                        range.y = maxHeight - bottom;
                                    }

                                    break;

                                default:
                            }
                        };

                        switch (action) {
                            // Move crop box
                            case ACTION_ALL:
                                left += range.x;
                                top += range.y;
                                break;
                            // Resize crop box

                            case ACTION_EAST:
                                if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {
                                    renderable = false;
                                    break;
                                }

                                check(ACTION_EAST);
                                width += range.x;

                                if (width < 0) {
                                    action = ACTION_WEST;
                                    width = -width;
                                    left -= width;
                                }

                                if (aspectRatio) {
                                    height = width / aspectRatio;
                                    top += (cropBoxData.height - height) / 2;
                                }

                                break;

                            case ACTION_NORTH:
                                if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {
                                    renderable = false;
                                    break;
                                }

                                check(ACTION_NORTH);
                                height -= range.y;
                                top += range.y;

                                if (height < 0) {
                                    action = ACTION_SOUTH;
                                    height = -height;
                                    top -= height;
                                }

                                if (aspectRatio) {
                                    width = height * aspectRatio;
                                    left += (cropBoxData.width - width) / 2;
                                }

                                break;

                            case ACTION_WEST:
                                if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {
                                    renderable = false;
                                    break;
                                }

                                check(ACTION_WEST);
                                width -= range.x;
                                left += range.x;

                                if (width < 0) {
                                    action = ACTION_EAST;
                                    width = -width;
                                    left -= width;
                                }

                                if (aspectRatio) {
                                    height = width / aspectRatio;
                                    top += (cropBoxData.height - height) / 2;
                                }

                                break;

                            case ACTION_SOUTH:
                                if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {
                                    renderable = false;
                                    break;
                                }

                                check(ACTION_SOUTH);
                                height += range.y;

                                if (height < 0) {
                                    action = ACTION_NORTH;
                                    height = -height;
                                    top -= height;
                                }

                                if (aspectRatio) {
                                    width = height * aspectRatio;
                                    left += (cropBoxData.width - width) / 2;
                                }

                                break;

                            case ACTION_NORTH_EAST:
                                if (aspectRatio) {
                                    if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {
                                        renderable = false;
                                        break;
                                    }

                                    check(ACTION_NORTH);
                                    height -= range.y;
                                    top += range.y;
                                    width = height * aspectRatio;
                                } else {
                                    check(ACTION_NORTH);
                                    check(ACTION_EAST);

                                    if (range.x >= 0) {
                                        if (right < maxWidth) {
                                            width += range.x;
                                        } else if (range.y <= 0 && top <= minTop) {
                                            renderable = false;
                                        }
                                    } else {
                                        width += range.x;
                                    }

                                    if (range.y <= 0) {
                                        if (top > minTop) {
                                            height -= range.y;
                                            top += range.y;
                                        }
                                    } else {
                                        height -= range.y;
                                        top += range.y;
                                    }
                                }

                                if (width < 0 && height < 0) {
                                    action = ACTION_SOUTH_WEST;
                                    height = -height;
                                    width = -width;
                                    top -= height;
                                    left -= width;
                                } else if (width < 0) {
                                    action = ACTION_NORTH_WEST;
                                    width = -width;
                                    left -= width;
                                } else if (height < 0) {
                                    action = ACTION_SOUTH_EAST;
                                    height = -height;
                                    top -= height;
                                }

                                break;

                            case ACTION_NORTH_WEST:
                                if (aspectRatio) {
                                    if (range.y <= 0 && (top <= minTop || left <= minLeft)) {
                                        renderable = false;
                                        break;
                                    }

                                    check(ACTION_NORTH);
                                    height -= range.y;
                                    top += range.y;
                                    width = height * aspectRatio;
                                    left += cropBoxData.width - width;
                                } else {
                                    check(ACTION_NORTH);
                                    check(ACTION_WEST);

                                    if (range.x <= 0) {
                                        if (left > minLeft) {
                                            width -= range.x;
                                            left += range.x;
                                        } else if (range.y <= 0 && top <= minTop) {
                                            renderable = false;
                                        }
                                    } else {
                                        width -= range.x;
                                        left += range.x;
                                    }

                                    if (range.y <= 0) {
                                        if (top > minTop) {
                                            height -= range.y;
                                            top += range.y;
                                        }
                                    } else {
                                        height -= range.y;
                                        top += range.y;
                                    }
                                }

                                if (width < 0 && height < 0) {
                                    action = ACTION_SOUTH_EAST;
                                    height = -height;
                                    width = -width;
                                    top -= height;
                                    left -= width;
                                } else if (width < 0) {
                                    action = ACTION_NORTH_EAST;
                                    width = -width;
                                    left -= width;
                                } else if (height < 0) {
                                    action = ACTION_SOUTH_WEST;
                                    height = -height;
                                    top -= height;
                                }

                                break;

                            case ACTION_SOUTH_WEST:
                                if (aspectRatio) {
                                    if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {
                                        renderable = false;
                                        break;
                                    }

                                    check(ACTION_WEST);
                                    width -= range.x;
                                    left += range.x;
                                    height = width / aspectRatio;
                                } else {
                                    check(ACTION_SOUTH);
                                    check(ACTION_WEST);

                                    if (range.x <= 0) {
                                        if (left > minLeft) {
                                            width -= range.x;
                                            left += range.x;
                                        } else if (range.y >= 0 && bottom >= maxHeight) {
                                            renderable = false;
                                        }
                                    } else {
                                        width -= range.x;
                                        left += range.x;
                                    }

                                    if (range.y >= 0) {
                                        if (bottom < maxHeight) {
                                            height += range.y;
                                        }
                                    } else {
                                        height += range.y;
                                    }
                                }

                                if (width < 0 && height < 0) {
                                    action = ACTION_NORTH_EAST;
                                    height = -height;
                                    width = -width;
                                    top -= height;
                                    left -= width;
                                } else if (width < 0) {
                                    action = ACTION_SOUTH_EAST;
                                    width = -width;
                                    left -= width;
                                } else if (height < 0) {
                                    action = ACTION_NORTH_WEST;
                                    height = -height;
                                    top -= height;
                                }

                                break;

                            case ACTION_SOUTH_EAST:
                                if (aspectRatio) {
                                    if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {
                                        renderable = false;
                                        break;
                                    }

                                    check(ACTION_EAST);
                                    width += range.x;
                                    height = width / aspectRatio;
                                } else {
                                    check(ACTION_SOUTH);
                                    check(ACTION_EAST);

                                    if (range.x >= 0) {
                                        if (right < maxWidth) {
                                            width += range.x;
                                        } else if (range.y >= 0 && bottom >= maxHeight) {
                                            renderable = false;
                                        }
                                    } else {
                                        width += range.x;
                                    }

                                    if (range.y >= 0) {
                                        if (bottom < maxHeight) {
                                            height += range.y;
                                        }
                                    } else {
                                        height += range.y;
                                    }
                                }

                                if (width < 0 && height < 0) {
                                    action = ACTION_NORTH_WEST;
                                    height = -height;
                                    width = -width;
                                    top -= height;
                                    left -= width;
                                } else if (width < 0) {
                                    action = ACTION_SOUTH_WEST;
                                    width = -width;
                                    left -= width;
                                } else if (height < 0) {
                                    action = ACTION_NORTH_EAST;
                                    height = -height;
                                    top -= height;
                                }

                                break;
                            // Move canvas

                            case ACTION_MOVE:
                                this.move(range.x, range.y);
                                renderable = false;
                                break;
                            // Zoom canvas

                            case ACTION_ZOOM:
                                this.zoom(getMaxZoomRatio(pointers), event);
                                renderable = false;
                                break;
                            // Create crop box

                            case ACTION_CROP:
                                if (!range.x || !range.y) {
                                    renderable = false;
                                    break;
                                }

                                offset = getOffset(this.cropper);
                                left = pointer.startX - offset.left;
                                top = pointer.startY - offset.top;
                                width = cropBoxData.minWidth;
                                height = cropBoxData.minHeight;

                                if (range.x > 0) {
                                    action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;
                                } else if (range.x < 0) {
                                    left -= width;
                                    action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;
                                }

                                if (range.y < 0) {
                                    top -= height;
                                } // Show the crop box if is hidden


                                if (!this.cropped) {
                                    removeClass(this.cropBox, CLASS_HIDDEN);
                                    this.cropped = true;

                                    if (this.limited) {
                                        this.limitCropBox(true, true);
                                    }
                                }

                                break;

                            default:
                        }

                        if (renderable) {
                            cropBoxData.width = width;
                            cropBoxData.height = height;
                            cropBoxData.left = left;
                            cropBoxData.top = top;
                            this.action = action;
                            this.renderCropBox();
                        } // Override


                        forEach(pointers, function (p) {
                            p.startX = p.endX;
                            p.startY = p.endY;
                        });
                    }
                };

                var methods = {
                    // Show the crop box manually
                    crop: function crop() {
                        if (this.ready && !this.cropped && !this.disabled) {
                            this.cropped = true;
                            this.limitCropBox(true, true);

                            if (this.options.modal) {
                                addClass(this.dragBox, CLASS_MODAL);
                            }

                            removeClass(this.cropBox, CLASS_HIDDEN);
                            this.setCropBoxData(this.initialCropBoxData);
                        }

                        return this;
                    },
                    // Reset the image and crop box to their initial states
                    reset: function reset() {
                        if (this.ready && !this.disabled) {
                            this.imageData = assign({}, this.initialImageData);
                            this.canvasData = assign({}, this.initialCanvasData);
                            this.cropBoxData = assign({}, this.initialCropBoxData);
                            this.renderCanvas();

                            if (this.cropped) {
                                this.renderCropBox();
                            }
                        }

                        return this;
                    },
                    // Clear the crop box
                    clear: function clear() {
                        if (this.cropped && !this.disabled) {
                            assign(this.cropBoxData, {
                                left: 0,
                                top: 0,
                                width: 0,
                                height: 0
                            });
                            this.cropped = false;
                            this.renderCropBox();
                            this.limitCanvas(true, true); // Render canvas after crop box rendered

                            this.renderCanvas();
                            removeClass(this.dragBox, CLASS_MODAL);
                            addClass(this.cropBox, CLASS_HIDDEN);
                        }

                        return this;
                    },

                    /**
                     * Replace the image's src and rebuild the cropper
                     * @param {string} url - The new URL.
                     * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.
                     * @returns {Cropper} this
                     */
                    replace: function replace(url) {
                        var hasSameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                        if (!this.disabled && url) {
                            if (this.isImg) {
                                this.element.src = url;
                            }

                            if (hasSameSize) {
                                this.url = url;
                                this.image.src = url;

                                if (this.ready) {
                                    this.viewBoxImage.src = url;
                                    forEach(this.previews, function (element) {
                                        element.getElementsByTagName('img')[0].src = url;
                                    });
                                }
                            } else {
                                if (this.isImg) {
                                    this.replaced = true;
                                }

                                this.options.data = null;
                                this.uncreate();
                                this.load(url);
                            }
                        }

                        return this;
                    },
                    // Enable (unfreeze) the cropper
                    enable: function enable() {
                        if (this.ready && this.disabled) {
                            this.disabled = false;
                            removeClass(this.cropper, CLASS_DISABLED);
                        }

                        return this;
                    },
                    // Disable (freeze) the cropper
                    disable: function disable() {
                        if (this.ready && !this.disabled) {
                            this.disabled = true;
                            addClass(this.cropper, CLASS_DISABLED);
                        }

                        return this;
                    },

                    /**
                     * Destroy the cropper and remove the instance from the image
                     * @returns {Cropper} this
                     */
                    destroy: function destroy() {
                        var element = this.element;

                        if (!element[NAMESPACE]) {
                            return this;
                        }

                        element[NAMESPACE] = undefined;

                        if (this.isImg && this.replaced) {
                            element.src = this.originalUrl;
                        }

                        this.uncreate();
                        return this;
                    },

                    /**
                     * Move the canvas with relative offsets
                     * @param {number} offsetX - The relative offset distance on the x-axis.
                     * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.
                     * @returns {Cropper} this
                     */
                    move: function move(offsetX) {
                        var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetX;
                        var _this$canvasData = this.canvasData,
                            left = _this$canvasData.left,
                            top = _this$canvasData.top;
                        return this.moveTo(isUndefined(offsetX) ? offsetX : left + Number(offsetX), isUndefined(offsetY) ? offsetY : top + Number(offsetY));
                    },

                    /**
                     * Move the canvas to an absolute point
                     * @param {number} x - The x-axis coordinate.
                     * @param {number} [y=x] - The y-axis coordinate.
                     * @returns {Cropper} this
                     */
                    moveTo: function moveTo(x) {
                        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;
                        var canvasData = this.canvasData;
                        var changed = false;
                        x = Number(x);
                        y = Number(y);

                        if (this.ready && !this.disabled && this.options.movable) {
                            if (isNumber(x)) {
                                canvasData.left = x;
                                changed = true;
                            }

                            if (isNumber(y)) {
                                canvasData.top = y;
                                changed = true;
                            }

                            if (changed) {
                                this.renderCanvas(true);
                            }
                        }

                        return this;
                    },

                    /**
                     * Zoom the canvas with a relative ratio
                     * @param {number} ratio - The target ratio.
                     * @param {Event} _originalEvent - The original event if any.
                     * @returns {Cropper} this
                     */
                    zoom: function zoom(ratio, _originalEvent) {
                        var canvasData = this.canvasData;
                        ratio = Number(ratio);

                        if (ratio < 0) {
                            ratio = 1 / (1 - ratio);
                        } else {
                            ratio = 1 + ratio;
                        }

                        return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);
                    },

                    /**
                     * Zoom the canvas to an absolute ratio
                     * @param {number} ratio - The target ratio.
                     * @param {Object} pivot - The zoom pivot point coordinate.
                     * @param {Event} _originalEvent - The original event if any.
                     * @returns {Cropper} this
                     */
                    zoomTo: function zoomTo(ratio, pivot, _originalEvent) {
                        var options = this.options,
                            canvasData = this.canvasData;
                        var width = canvasData.width,
                            height = canvasData.height,
                            naturalWidth = canvasData.naturalWidth,
                            naturalHeight = canvasData.naturalHeight;
                        ratio = Number(ratio);

                        if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {
                            var newWidth = naturalWidth * ratio;
                            var newHeight = naturalHeight * ratio;

                            if (dispatchEvent(this.element, EVENT_ZOOM, {
                                ratio: ratio,
                                oldRatio: width / naturalWidth,
                                originalEvent: _originalEvent
                            }) === false) {
                                return this;
                            }

                            if (_originalEvent) {
                                var pointers = this.pointers;
                                var offset = getOffset(this.cropper);
                                var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {
                                    pageX: _originalEvent.pageX,
                                    pageY: _originalEvent.pageY
                                }; // Zoom from the triggering point of the event

                                canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);
                                canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);
                            } else if (isPlainObject(pivot) && isNumber(pivot.x) && isNumber(pivot.y)) {
                                canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);
                                canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);
                            } else {
                                // Zoom from the center of the canvas
                                canvasData.left -= (newWidth - width) / 2;
                                canvasData.top -= (newHeight - height) / 2;
                            }

                            canvasData.width = newWidth;
                            canvasData.height = newHeight;
                            this.renderCanvas(true);
                        }

                        return this;
                    },

                    /**
                     * Rotate the canvas with a relative degree
                     * @param {number} degree - The rotate degree.
                     * @returns {Cropper} this
                     */
                    rotate: function rotate(degree) {
                        return this.rotateTo((this.imageData.rotate || 0) + Number(degree));
                    },

                    /**
                     * Rotate the canvas to an absolute degree
                     * @param {number} degree - The rotate degree.
                     * @returns {Cropper} this
                     */
                    rotateTo: function rotateTo(degree) {
                        degree = Number(degree);

                        if (isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {
                            this.imageData.rotate = degree % 360;
                            this.renderCanvas(true, true);
                        }

                        return this;
                    },

                    /**
                     * Scale the image on the x-axis.
                     * @param {number} scaleX - The scale ratio on the x-axis.
                     * @returns {Cropper} this
                     */
                    scaleX: function scaleX(_scaleX) {
                        var scaleY = this.imageData.scaleY;
                        return this.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);
                    },

                    /**
                     * Scale the image on the y-axis.
                     * @param {number} scaleY - The scale ratio on the y-axis.
                     * @returns {Cropper} this
                     */
                    scaleY: function scaleY(_scaleY) {
                        var scaleX = this.imageData.scaleX;
                        return this.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);
                    },

                    /**
                     * Scale the image
                     * @param {number} scaleX - The scale ratio on the x-axis.
                     * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.
                     * @returns {Cropper} this
                     */
                    scale: function scale(scaleX) {
                        var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;
                        var imageData = this.imageData;
                        var transformed = false;
                        scaleX = Number(scaleX);
                        scaleY = Number(scaleY);

                        if (this.ready && !this.disabled && this.options.scalable) {
                            if (isNumber(scaleX)) {
                                imageData.scaleX = scaleX;
                                transformed = true;
                            }

                            if (isNumber(scaleY)) {
                                imageData.scaleY = scaleY;
                                transformed = true;
                            }

                            if (transformed) {
                                this.renderCanvas(true, true);
                            }
                        }

                        return this;
                    },

                    /**
                     * Get the cropped area position and size data (base on the original image)
                     * @param {boolean} [rounded=false] - Indicate if round the data values or not.
                     * @returns {Object} The result cropped data.
                     */
                    getData: function getData() {
                        var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                        var options = this.options,
                            imageData = this.imageData,
                            canvasData = this.canvasData,
                            cropBoxData = this.cropBoxData;
                        var data;

                        if (this.ready && this.cropped) {
                            data = {
                                x: cropBoxData.left - canvasData.left,
                                y: cropBoxData.top - canvasData.top,
                                width: cropBoxData.width,
                                height: cropBoxData.height
                            };
                            var ratio = imageData.width / imageData.naturalWidth;
                            forEach(data, function (n, i) {
                                data[i] = n / ratio;
                            });

                            if (rounded) {
                                // In case rounding off leads to extra 1px in right or bottom border
                                // we should round the top-left corner and the dimension (#343).
                                var bottom = Math.round(data.y + data.height);
                                var right = Math.round(data.x + data.width);
                                data.x = Math.round(data.x);
                                data.y = Math.round(data.y);
                                data.width = right - data.x;
                                data.height = bottom - data.y;
                            }
                        } else {
                            data = {
                                x: 0,
                                y: 0,
                                width: 0,
                                height: 0
                            };
                        }

                        if (options.rotatable) {
                            data.rotate = imageData.rotate || 0;
                        }

                        if (options.scalable) {
                            data.scaleX = imageData.scaleX || 1;
                            data.scaleY = imageData.scaleY || 1;
                        }

                        return data;
                    },

                    /**
                     * Set the cropped area position and size with new data
                     * @param {Object} data - The new data.
                     * @returns {Cropper} this
                     */
                    setData: function setData(data) {
                        var options = this.options,
                            imageData = this.imageData,
                            canvasData = this.canvasData;
                        var cropBoxData = {};

                        if (this.ready && !this.disabled && isPlainObject(data)) {
                            var transformed = false;

                            if (options.rotatable) {
                                if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {
                                    imageData.rotate = data.rotate;
                                    transformed = true;
                                }
                            }

                            if (options.scalable) {
                                if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {
                                    imageData.scaleX = data.scaleX;
                                    transformed = true;
                                }

                                if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {
                                    imageData.scaleY = data.scaleY;
                                    transformed = true;
                                }
                            }

                            if (transformed) {
                                this.renderCanvas(true, true);
                            }

                            var ratio = imageData.width / imageData.naturalWidth;

                            if (isNumber(data.x)) {
                                cropBoxData.left = data.x * ratio + canvasData.left;
                            }

                            if (isNumber(data.y)) {
                                cropBoxData.top = data.y * ratio + canvasData.top;
                            }

                            if (isNumber(data.width)) {
                                cropBoxData.width = data.width * ratio;
                            }

                            if (isNumber(data.height)) {
                                cropBoxData.height = data.height * ratio;
                            }

                            this.setCropBoxData(cropBoxData);
                        }

                        return this;
                    },

                    /**
                     * Get the container size data.
                     * @returns {Object} The result container data.
                     */
                    getContainerData: function getContainerData() {
                        return this.ready ? assign({}, this.containerData) : {};
                    },

                    /**
                     * Get the image position and size data.
                     * @returns {Object} The result image data.
                     */
                    getImageData: function getImageData() {
                        return this.sized ? assign({}, this.imageData) : {};
                    },

                    /**
                     * Get the canvas position and size data.
                     * @returns {Object} The result canvas data.
                     */
                    getCanvasData: function getCanvasData() {
                        var canvasData = this.canvasData;
                        var data = {};

                        if (this.ready) {
                            forEach(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {
                                data[n] = canvasData[n];
                            });
                        }

                        return data;
                    },

                    /**
                     * Set the canvas position and size with new data.
                     * @param {Object} data - The new canvas data.
                     * @returns {Cropper} this
                     */
                    setCanvasData: function setCanvasData(data) {
                        var canvasData = this.canvasData;
                        var aspectRatio = canvasData.aspectRatio;

                        if (this.ready && !this.disabled && isPlainObject(data)) {
                            if (isNumber(data.left)) {
                                canvasData.left = data.left;
                            }

                            if (isNumber(data.top)) {
                                canvasData.top = data.top;
                            }

                            if (isNumber(data.width)) {
                                canvasData.width = data.width;
                                canvasData.height = data.width / aspectRatio;
                            } else if (isNumber(data.height)) {
                                canvasData.height = data.height;
                                canvasData.width = data.height * aspectRatio;
                            }

                            this.renderCanvas(true);
                        }

                        return this;
                    },

                    /**
                     * Get the crop box position and size data.
                     * @returns {Object} The result crop box data.
                     */
                    getCropBoxData: function getCropBoxData() {
                        var cropBoxData = this.cropBoxData;
                        var data;

                        if (this.ready && this.cropped) {
                            data = {
                                left: cropBoxData.left,
                                top: cropBoxData.top,
                                width: cropBoxData.width,
                                height: cropBoxData.height
                            };
                        }

                        return data || {};
                    },

                    /**
                     * Set the crop box position and size with new data.
                     * @param {Object} data - The new crop box data.
                     * @returns {Cropper} this
                     */
                    setCropBoxData: function setCropBoxData(data) {
                        var cropBoxData = this.cropBoxData;
                        var aspectRatio = this.options.aspectRatio;
                        var widthChanged;
                        var heightChanged;

                        if (this.ready && this.cropped && !this.disabled && isPlainObject(data)) {
                            if (isNumber(data.left)) {
                                cropBoxData.left = data.left;
                            }

                            if (isNumber(data.top)) {
                                cropBoxData.top = data.top;
                            }

                            if (isNumber(data.width) && data.width !== cropBoxData.width) {
                                widthChanged = true;
                                cropBoxData.width = data.width;
                            }

                            if (isNumber(data.height) && data.height !== cropBoxData.height) {
                                heightChanged = true;
                                cropBoxData.height = data.height;
                            }

                            if (aspectRatio) {
                                if (widthChanged) {
                                    cropBoxData.height = cropBoxData.width / aspectRatio;
                                } else if (heightChanged) {
                                    cropBoxData.width = cropBoxData.height * aspectRatio;
                                }
                            }

                            this.renderCropBox();
                        }

                        return this;
                    },

                    /**
                     * Get a canvas drawn the cropped image.
                     * @param {Object} [options={}] - The config options.
                     * @returns {HTMLCanvasElement} - The result canvas.
                     */
                    getCroppedCanvas: function getCroppedCanvas() {
                        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                        if (!this.ready || !window.HTMLCanvasElement) {
                            return null;
                        }

                        var canvasData = this.canvasData;
                        var source = getSourceCanvas(this.image, this.imageData, canvasData, options); // Returns the source canvas if it is not cropped.

                        if (!this.cropped) {
                            return source;
                        }

                        var _this$getData = this.getData(),
                            initialX = _this$getData.x,
                            initialY = _this$getData.y,
                            initialWidth = _this$getData.width,
                            initialHeight = _this$getData.height;

                        var ratio = source.width / Math.floor(canvasData.naturalWidth);

                        if (ratio !== 1) {
                            initialX *= ratio;
                            initialY *= ratio;
                            initialWidth *= ratio;
                            initialHeight *= ratio;
                        }

                        var aspectRatio = initialWidth / initialHeight;
                        var maxSizes = getAdjustedSizes({
                            aspectRatio: aspectRatio,
                            width: options.maxWidth || Infinity,
                            height: options.maxHeight || Infinity
                        });
                        var minSizes = getAdjustedSizes({
                            aspectRatio: aspectRatio,
                            width: options.minWidth || 0,
                            height: options.minHeight || 0
                        }, 'cover');

                        var _getAdjustedSizes = getAdjustedSizes({
                                aspectRatio: aspectRatio,
                                width: options.width || (ratio !== 1 ? source.width : initialWidth),
                                height: options.height || (ratio !== 1 ? source.height : initialHeight)
                            }),
                            width = _getAdjustedSizes.width,
                            height = _getAdjustedSizes.height;

                        width = Math.min(maxSizes.width, Math.max(minSizes.width, width));
                        height = Math.min(maxSizes.height, Math.max(minSizes.height, height));
                        var canvas = document.createElement('canvas');
                        var context = canvas.getContext('2d');
                        canvas.width = normalizeDecimalNumber(width);
                        canvas.height = normalizeDecimalNumber(height);
                        context.fillStyle = options.fillColor || 'transparent';
                        context.fillRect(0, 0, width, height);
                        var _options$imageSmoothi = options.imageSmoothingEnabled,
                            imageSmoothingEnabled = _options$imageSmoothi === void 0 ? true : _options$imageSmoothi,
                            imageSmoothingQuality = options.imageSmoothingQuality;
                        context.imageSmoothingEnabled = imageSmoothingEnabled;

                        if (imageSmoothingQuality) {
                            context.imageSmoothingQuality = imageSmoothingQuality;
                        } // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage


                        var sourceWidth = source.width;
                        var sourceHeight = source.height; // Source canvas parameters

                        var srcX = initialX;
                        var srcY = initialY;
                        var srcWidth;
                        var srcHeight; // Destination canvas parameters

                        var dstX;
                        var dstY;
                        var dstWidth;
                        var dstHeight;

                        if (srcX <= -initialWidth || srcX > sourceWidth) {
                            srcX = 0;
                            srcWidth = 0;
                            dstX = 0;
                            dstWidth = 0;
                        } else if (srcX <= 0) {
                            dstX = -srcX;
                            srcX = 0;
                            srcWidth = Math.min(sourceWidth, initialWidth + srcX);
                            dstWidth = srcWidth;
                        } else if (srcX <= sourceWidth) {
                            dstX = 0;
                            srcWidth = Math.min(initialWidth, sourceWidth - srcX);
                            dstWidth = srcWidth;
                        }

                        if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {
                            srcY = 0;
                            srcHeight = 0;
                            dstY = 0;
                            dstHeight = 0;
                        } else if (srcY <= 0) {
                            dstY = -srcY;
                            srcY = 0;
                            srcHeight = Math.min(sourceHeight, initialHeight + srcY);
                            dstHeight = srcHeight;
                        } else if (srcY <= sourceHeight) {
                            dstY = 0;
                            srcHeight = Math.min(initialHeight, sourceHeight - srcY);
                            dstHeight = srcHeight;
                        }

                        var params = [srcX, srcY, srcWidth, srcHeight]; // Avoid "IndexSizeError"

                        if (dstWidth > 0 && dstHeight > 0) {
                            var scale = width / initialWidth;
                            params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);
                        } // All the numerical parameters should be integer for `drawImage`
                        // https://github.com/fengyuanchen/cropper/issues/476


                        context.drawImage.apply(context, [source].concat(_toConsumableArray(params.map(function (param) {
                            return Math.floor(normalizeDecimalNumber(param));
                        }))));
                        return canvas;
                    },

                    /**
                     * Change the aspect ratio of the crop box.
                     * @param {number} aspectRatio - The new aspect ratio.
                     * @returns {Cropper} this
                     */
                    setAspectRatio: function setAspectRatio(aspectRatio) {
                        var options = this.options;

                        if (!this.disabled && !isUndefined(aspectRatio)) {
                            // 0 -> NaN
                            options.aspectRatio = Math.max(0, aspectRatio) || NaN;

                            if (this.ready) {
                                this.initCropBox();

                                if (this.cropped) {
                                    this.renderCropBox();
                                }
                            }
                        }

                        return this;
                    },

                    /**
                     * Change the drag mode.
                     * @param {string} mode - The new drag mode.
                     * @returns {Cropper} this
                     */
                    setDragMode: function setDragMode(mode) {
                        var options = this.options,
                            dragBox = this.dragBox,
                            face = this.face;

                        if (this.ready && !this.disabled) {
                            var croppable = mode === DRAG_MODE_CROP;
                            var movable = options.movable && mode === DRAG_MODE_MOVE;
                            mode = croppable || movable ? mode : DRAG_MODE_NONE;
                            options.dragMode = mode;
                            setData(dragBox, DATA_ACTION, mode);
                            toggleClass(dragBox, CLASS_CROP, croppable);
                            toggleClass(dragBox, CLASS_MOVE, movable);

                            if (!options.cropBoxMovable) {
                                // Sync drag mode to crop box when it is not movable
                                setData(face, DATA_ACTION, mode);
                                toggleClass(face, CLASS_CROP, croppable);
                                toggleClass(face, CLASS_MOVE, movable);
                            }
                        }

                        return this;
                    }
                };

                var AnotherCropper = WINDOW.Cropper;

                var Cropper =
                    /*#__PURE__*/
                    function () {
                        /**
                         * Create a new Cropper.
                         * @param {Element} element - The target element for cropping.
                         * @param {Object} [options={}] - The configuration options.
                         */
                        function Cropper(element) {
                            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                            _classCallCheck(this, Cropper);

                            if (!element || !REGEXP_TAG_NAME.test(element.tagName)) {
                                throw new Error('The first argument is required and must be an <img> or <canvas> element.');
                            }

                            this.element = element;
                            this.options = assign({}, DEFAULTS, isPlainObject(options) && options);
                            this.cropped = false;
                            this.disabled = false;
                            this.pointers = {};
                            this.ready = false;
                            this.reloading = false;
                            this.replaced = false;
                            this.sized = false;
                            this.sizing = false;
                            this.init();
                        }

                        _createClass(Cropper, [{
                            key: "init",
                            value: function init() {
                                var element = this.element;
                                var tagName = element.tagName.toLowerCase();
                                var url;

                                if (element[NAMESPACE]) {
                                    return;
                                }

                                element[NAMESPACE] = this;

                                if (tagName === 'img') {
                                    this.isImg = true; // e.g.: "img/picture.jpg"

                                    url = element.getAttribute('src') || '';
                                    this.originalUrl = url; // Stop when it's a blank image

                                    if (!url) {
                                        return;
                                    } // e.g.: "http://example.com/img/picture.jpg"


                                    url = element.src;
                                } else if (tagName === 'canvas' && window.HTMLCanvasElement) {
                                    url = element.toDataURL();
                                }

                                this.load(url);
                            }
                        }, {
                            key: "load",
                            value: function load(url) {
                                var _this = this;

                                if (!url) {
                                    return;
                                }

                                this.url = url;
                                this.imageData = {};
                                var element = this.element,
                                    options = this.options;

                                if (!options.rotatable && !options.scalable) {
                                    options.checkOrientation = false;
                                } // Only IE10+ supports Typed Arrays


                                if (!options.checkOrientation || !window.ArrayBuffer) {
                                    this.clone();
                                    return;
                                } // Read ArrayBuffer from Data URL of JPEG images directly for better performance.


                                if (REGEXP_DATA_URL_JPEG.test(url)) {
                                    this.read(dataURLToArrayBuffer(url));
                                    return;
                                }

                                var xhr = new XMLHttpRequest();
                                var clone = this.clone.bind(this);
                                this.reloading = true;
                                this.xhr = xhr; // 1. Cross origin requests are only supported for protocol schemes:
                                // http, https, data, chrome, chrome-extension.
                                // 2. Access to XMLHttpRequest from a Data URL will be blocked by CORS policy
                                // in some browsers as IE11 and Safari.

                                xhr.onabort = clone;
                                xhr.onerror = clone;
                                xhr.ontimeout = clone;

                                xhr.onprogress = function () {
                                    if (xhr.getResponseHeader('content-type') !== MIME_TYPE_JPEG) {
                                        xhr.abort();
                                    }
                                };

                                xhr.onload = function () {
                                    _this.read(xhr.response);
                                };

                                xhr.onloadend = function () {
                                    _this.reloading = false;
                                    _this.xhr = null;
                                }; // Bust cache when there is a "crossOrigin" property to avoid browser cache error


                                if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {
                                    url = addTimestamp(url);
                                }

                                xhr.open('GET', url);
                                xhr.responseType = 'arraybuffer';
                                xhr.withCredentials = element.crossOrigin === 'use-credentials';
                                xhr.send();
                            }
                        }, {
                            key: "read",
                            value: function read(arrayBuffer) {
                                var options = this.options,
                                    imageData = this.imageData; // Reset the orientation value to its default value 1
                                // as some iOS browsers will render image with its orientation

                                var orientation = resetAndGetOrientation(arrayBuffer);
                                var rotate = 0;
                                var scaleX = 1;
                                var scaleY = 1;

                                if (orientation > 1) {
                                    // Generate a new URL which has the default orientation value
                                    this.url = arrayBufferToDataURL(arrayBuffer, MIME_TYPE_JPEG);

                                    var _parseOrientation = parseOrientation(orientation);

                                    rotate = _parseOrientation.rotate;
                                    scaleX = _parseOrientation.scaleX;
                                    scaleY = _parseOrientation.scaleY;
                                }

                                if (options.rotatable) {
                                    imageData.rotate = rotate;
                                }

                                if (options.scalable) {
                                    imageData.scaleX = scaleX;
                                    imageData.scaleY = scaleY;
                                }

                                this.clone();
                            }
                        }, {
                            key: "clone",
                            value: function clone() {
                                var element = this.element,
                                    url = this.url;
                                var crossOrigin;
                                var crossOriginUrl;

                                if (this.options.checkCrossOrigin && isCrossOriginURL(url)) {
                                    crossOrigin = element.crossOrigin;

                                    if (!crossOrigin) {
                                        crossOrigin = 'anonymous';
                                    } // Bust cache when there is not a "crossOrigin" property (#519)


                                    crossOriginUrl = addTimestamp(url);
                                }

                                this.crossOrigin = crossOrigin;
                                this.crossOriginUrl = crossOriginUrl;
                                var image = document.createElement('img');

                                if (crossOrigin) {
                                    image.crossOrigin = crossOrigin;
                                }

                                image.src = crossOriginUrl || url;
                                this.image = image;
                                image.onload = this.start.bind(this);
                                image.onerror = this.stop.bind(this);
                                addClass(image, CLASS_HIDE);
                                element.parentNode.insertBefore(image, element.nextSibling);
                            }
                        }, {
                            key: "start",
                            value: function start() {
                                var _this2 = this;

                                var image = this.isImg ? this.element : this.image;
                                image.onload = null;
                                image.onerror = null;
                                this.sizing = true; // Match all browsers that use WebKit as the layout engine in iOS devices,
                                // such as Safari for iOS, Chrome for iOS, and in-app browsers.

                                var isIOSWebKit = WINDOW.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(WINDOW.navigator.userAgent);

                                var done = function done(naturalWidth, naturalHeight) {
                                    assign(_this2.imageData, {
                                        naturalWidth: naturalWidth,
                                        naturalHeight: naturalHeight,
                                        aspectRatio: naturalWidth / naturalHeight
                                    });
                                    _this2.sizing = false;
                                    _this2.sized = true;

                                    _this2.build();
                                }; // Most modern browsers (excepts iOS WebKit)


                                if (image.naturalWidth && !isIOSWebKit) {
                                    done(image.naturalWidth, image.naturalHeight);
                                    return;
                                }

                                var sizingImage = document.createElement('img');
                                var body = document.body || document.documentElement;
                                this.sizingImage = sizingImage;

                                sizingImage.onload = function () {
                                    done(sizingImage.width, sizingImage.height);

                                    if (!isIOSWebKit) {
                                        body.removeChild(sizingImage);
                                    }
                                };

                                sizingImage.src = image.src; // iOS WebKit will convert the image automatically
                                // with its orientation once append it into DOM (#279)

                                if (!isIOSWebKit) {
                                    sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';
                                    body.appendChild(sizingImage);
                                }
                            }
                        }, {
                            key: "stop",
                            value: function stop() {
                                var image = this.image;
                                image.onload = null;
                                image.onerror = null;
                                image.parentNode.removeChild(image);
                                this.image = null;
                            }
                        }, {
                            key: "build",
                            value: function build() {
                                if (!this.sized || this.ready) {
                                    return;
                                }

                                var element = this.element,
                                    options = this.options,
                                    image = this.image; // Create cropper elements

                                var container = element.parentNode;
                                var template = document.createElement('div');
                                template.innerHTML = TEMPLATE;
                                var cropper = template.querySelector(".".concat(NAMESPACE, "-container"));
                                var canvas = cropper.querySelector(".".concat(NAMESPACE, "-canvas"));
                                var dragBox = cropper.querySelector(".".concat(NAMESPACE, "-drag-box"));
                                var cropBox = cropper.querySelector(".".concat(NAMESPACE, "-crop-box"));
                                var face = cropBox.querySelector(".".concat(NAMESPACE, "-face"));
                                this.container = container;
                                this.cropper = cropper;
                                this.canvas = canvas;
                                this.dragBox = dragBox;
                                this.cropBox = cropBox;
                                this.viewBox = cropper.querySelector(".".concat(NAMESPACE, "-view-box"));
                                this.face = face;
                                canvas.appendChild(image); // Hide the original image

                                addClass(element, CLASS_HIDDEN); // Inserts the cropper after to the current image

                                container.insertBefore(cropper, element.nextSibling); // Show the image if is hidden

                                if (!this.isImg) {
                                    removeClass(image, CLASS_HIDE);
                                }

                                this.initPreview();
                                this.bind();
                                options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;
                                options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;
                                options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;
                                addClass(cropBox, CLASS_HIDDEN);

                                if (!options.guides) {
                                    addClass(cropBox.getElementsByClassName("".concat(NAMESPACE, "-dashed")), CLASS_HIDDEN);
                                }

                                if (!options.center) {
                                    addClass(cropBox.getElementsByClassName("".concat(NAMESPACE, "-center")), CLASS_HIDDEN);
                                }

                                if (options.background) {
                                    addClass(cropper, "".concat(NAMESPACE, "-bg"));
                                }

                                if (!options.highlight) {
                                    addClass(face, CLASS_INVISIBLE);
                                }

                                if (options.cropBoxMovable) {
                                    addClass(face, CLASS_MOVE);
                                    setData(face, DATA_ACTION, ACTION_ALL);
                                }

                                if (!options.cropBoxResizable) {
                                    addClass(cropBox.getElementsByClassName("".concat(NAMESPACE, "-line")), CLASS_HIDDEN);
                                    addClass(cropBox.getElementsByClassName("".concat(NAMESPACE, "-point")), CLASS_HIDDEN);
                                }

                                this.render();
                                this.ready = true;
                                this.setDragMode(options.dragMode);

                                if (options.autoCrop) {
                                    this.crop();
                                }

                                this.setData(options.data);

                                if (isFunction(options.ready)) {
                                    addListener(element, EVENT_READY, options.ready, {
                                        once: true
                                    });
                                }

                                dispatchEvent(element, EVENT_READY);
                            }
                        }, {
                            key: "unbuild",
                            value: function unbuild() {
                                if (!this.ready) {
                                    return;
                                }

                                this.ready = false;
                                this.unbind();
                                this.resetPreview();
                                this.cropper.parentNode.removeChild(this.cropper);
                                removeClass(this.element, CLASS_HIDDEN);
                            }
                        }, {
                            key: "uncreate",
                            value: function uncreate() {
                                if (this.ready) {
                                    this.unbuild();
                                    this.ready = false;
                                    this.cropped = false;
                                } else if (this.sizing) {
                                    this.sizingImage.onload = null;
                                    this.sizing = false;
                                    this.sized = false;
                                } else if (this.reloading) {
                                    this.xhr.onabort = null;
                                    this.xhr.abort();
                                } else if (this.image) {
                                    this.stop();
                                }
                            }
                            /**
                             * Get the no conflict cropper class.
                             * @returns {Cropper} The cropper class.
                             */

                        }], [{
                            key: "noConflict",
                            value: function noConflict() {
                                window.Cropper = AnotherCropper;
                                return Cropper;
                            }
                            /**
                             * Change the default options.
                             * @param {Object} options - The new default options.
                             */

                        }, {
                            key: "setDefaults",
                            value: function setDefaults(options) {
                                assign(DEFAULTS, isPlainObject(options) && options);
                            }
                        }]);

                        return Cropper;
                    }();

                assign(Cropper.prototype, render, preview, events, handlers, change, methods);

                return Cropper;

            }));


            /***/ }),

        /***/ "./node_modules/jquery-slimscroll/jquery.slimscroll.js":
        /*!*************************************************************!*\
  !*** ./node_modules/jquery-slimscroll/jquery.slimscroll.js ***!
  \*************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/*! Copyright (c) 2011 Piotr Rochala (http://rocha.la)
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *
 * Version: 1.3.8
 *
 */
                (function($) {

                    $.fn.extend({
                        slimScroll: function(options) {

                            var defaults = {

                                // width in pixels of the visible scroll area
                                width : 'auto',

                                // height in pixels of the visible scroll area
                                height : '250px',

                                // width in pixels of the scrollbar and rail
                                size : '7px',

                                // scrollbar color, accepts any hex/color value
                                color: '#000',

                                // scrollbar position - left/right
                                position : 'right',

                                // distance in pixels between the side edge and the scrollbar
                                distance : '1px',

                                // default scroll position on load - top / bottom / $('selector')
                                start : 'top',

                                // sets scrollbar opacity
                                opacity : .4,

                                // enables always-on mode for the scrollbar
                                alwaysVisible : false,

                                // check if we should hide the scrollbar when user is hovering over
                                disableFadeOut : false,

                                // sets visibility of the rail
                                railVisible : false,

                                // sets rail color
                                railColor : '#333',

                                // sets rail opacity
                                railOpacity : .2,

                                // whether  we should use jQuery UI Draggable to enable bar dragging
                                railDraggable : true,

                                // defautlt CSS class of the slimscroll rail
                                railClass : 'slimScrollRail',

                                // defautlt CSS class of the slimscroll bar
                                barClass : 'slimScrollBar',

                                // defautlt CSS class of the slimscroll wrapper
                                wrapperClass : 'slimScrollDiv',

                                // check if mousewheel should scroll the window if we reach top/bottom
                                allowPageScroll : false,

                                // scroll amount applied to each mouse wheel step
                                wheelStep : 20,

                                // scroll amount applied when user is using gestures
                                touchScrollStep : 200,

                                // sets border radius
                                borderRadius: '7px',

                                // sets border radius of the rail
                                railBorderRadius : '7px'
                            };

                            var o = $.extend(defaults, options);

                            // do it for every element that matches selector
                            this.each(function(){

                                var isOverPanel, isOverBar, isDragg, queueHide, touchDif,
                                    barHeight, percentScroll, lastScroll,
                                    divS = '<div></div>',
                                    minBarHeight = 30,
                                    releaseScroll = false;

                                // used in event handlers and for better minification
                                var me = $(this);

                                // ensure we are not binding it again
                                if (me.parent().hasClass(o.wrapperClass))
                                {
                                    // start from last bar position
                                    var offset = me.scrollTop();

                                    // find bar and rail
                                    bar = me.siblings('.' + o.barClass);
                                    rail = me.siblings('.' + o.railClass);

                                    getBarHeight();

                                    // check if we should scroll existing instance
                                    if ($.isPlainObject(options))
                                    {
                                        // Pass height: auto to an existing slimscroll object to force a resize after contents have changed
                                        if ( 'height' in options && options.height == 'auto' ) {
                                            me.parent().css('height', 'auto');
                                            me.css('height', 'auto');
                                            var height = me.parent().parent().height();
                                            me.parent().css('height', height);
                                            me.css('height', height);
                                        } else if ('height' in options) {
                                            var h = options.height;
                                            me.parent().css('height', h);
                                            me.css('height', h);
                                        }

                                        if ('scrollTo' in options)
                                        {
                                            // jump to a static point
                                            offset = parseInt(o.scrollTo);
                                        }
                                        else if ('scrollBy' in options)
                                        {
                                            // jump by value pixels
                                            offset += parseInt(o.scrollBy);
                                        }
                                        else if ('destroy' in options)
                                        {
                                            // remove slimscroll elements
                                            bar.remove();
                                            rail.remove();
                                            me.unwrap();
                                            return;
                                        }

                                        // scroll content by the given offset
                                        scrollContent(offset, false, true);
                                    }

                                    return;
                                }
                                else if ($.isPlainObject(options))
                                {
                                    if ('destroy' in options)
                                    {
                                        return;
                                    }
                                }

                                // optionally set height to the parent's height
                                o.height = (o.height == 'auto') ? me.parent().height() : o.height;

                                // wrap content
                                var wrapper = $(divS)
                                    .addClass(o.wrapperClass)
                                    .css({
                                        position: 'relative',
                                        overflow: 'hidden',
                                        width: o.width,
                                        height: o.height
                                    });

                                // update style for the div
                                me.css({
                                    overflow: 'hidden',
                                    width: o.width,
                                    height: o.height
                                });

                                // create scrollbar rail
                                var rail = $(divS)
                                    .addClass(o.railClass)
                                    .css({
                                        width: o.size,
                                        height: '100%',
                                        position: 'absolute',
                                        top: 0,
                                        display: (o.alwaysVisible && o.railVisible) ? 'block' : 'none',
                                        'border-radius': o.railBorderRadius,
                                        background: o.railColor,
                                        opacity: o.railOpacity,
                                        zIndex: 90
                                    });

                                // create scrollbar
                                var bar = $(divS)
                                    .addClass(o.barClass)
                                    .css({
                                        background: o.color,
                                        width: o.size,
                                        position: 'absolute',
                                        top: 0,
                                        opacity: o.opacity,
                                        display: o.alwaysVisible ? 'block' : 'none',
                                        'border-radius' : o.borderRadius,
                                        BorderRadius: o.borderRadius,
                                        MozBorderRadius: o.borderRadius,
                                        WebkitBorderRadius: o.borderRadius,
                                        zIndex: 99
                                    });

                                // set position
                                var posCss = (o.position == 'right') ? { right: o.distance } : { left: o.distance };
                                rail.css(posCss);
                                bar.css(posCss);

                                // wrap it
                                me.wrap(wrapper);

                                // append to parent div
                                me.parent().append(bar);
                                me.parent().append(rail);

                                // make it draggable and no longer dependent on the jqueryUI
                                if (o.railDraggable){
                                    bar.bind("mousedown", function(e) {
                                        var $doc = $(document);
                                        isDragg = true;
                                        t = parseFloat(bar.css('top'));
                                        pageY = e.pageY;

                                        $doc.bind("mousemove.slimscroll", function(e){
                                            currTop = t + e.pageY - pageY;
                                            bar.css('top', currTop);
                                            scrollContent(0, bar.position().top, false);// scroll content
                                        });

                                        $doc.bind("mouseup.slimscroll", function(e) {
                                            isDragg = false;hideBar();
                                            $doc.unbind('.slimscroll');
                                        });
                                        return false;
                                    }).bind("selectstart.slimscroll", function(e){
                                        e.stopPropagation();
                                        e.preventDefault();
                                        return false;
                                    });
                                }

                                // on rail over
                                rail.hover(function(){
                                    showBar();
                                }, function(){
                                    hideBar();
                                });

                                // on bar over
                                bar.hover(function(){
                                    isOverBar = true;
                                }, function(){
                                    isOverBar = false;
                                });

                                // show on parent mouseover
                                me.hover(function(){
                                    isOverPanel = true;
                                    showBar();
                                    hideBar();
                                }, function(){
                                    isOverPanel = false;
                                    hideBar();
                                });

                                // support for mobile
                                me.bind('touchstart', function(e,b){
                                    if (e.originalEvent.touches.length)
                                    {
                                        // record where touch started
                                        touchDif = e.originalEvent.touches[0].pageY;
                                    }
                                });

                                me.bind('touchmove', function(e){
                                    // prevent scrolling the page if necessary
                                    if(!releaseScroll)
                                    {
                                        e.originalEvent.preventDefault();
                                    }
                                    if (e.originalEvent.touches.length)
                                    {
                                        // see how far user swiped
                                        var diff = (touchDif - e.originalEvent.touches[0].pageY) / o.touchScrollStep;
                                        // scroll content
                                        scrollContent(diff, true);
                                        touchDif = e.originalEvent.touches[0].pageY;
                                    }
                                });

                                // set up initial height
                                getBarHeight();

                                // check start position
                                if (o.start === 'bottom')
                                {
                                    // scroll content to bottom
                                    bar.css({ top: me.outerHeight() - bar.outerHeight() });
                                    scrollContent(0, true);
                                }
                                else if (o.start !== 'top')
                                {
                                    // assume jQuery selector
                                    scrollContent($(o.start).position().top, null, true);

                                    // make sure bar stays hidden
                                    if (!o.alwaysVisible) { bar.hide(); }
                                }

                                // attach scroll events
                                attachWheel(this);

                                function _onWheel(e)
                                {
                                    // use mouse wheel only when mouse is over
                                    if (!isOverPanel) { return; }

                                    var e = e || window.event;

                                    var delta = 0;
                                    if (e.wheelDelta) { delta = -e.wheelDelta/120; }
                                    if (e.detail) { delta = e.detail / 3; }

                                    var target = e.target || e.srcTarget || e.srcElement;
                                    if ($(target).closest('.' + o.wrapperClass).is(me.parent())) {
                                        // scroll content
                                        scrollContent(delta, true);
                                    }

                                    // stop window scroll
                                    if (e.preventDefault && !releaseScroll) { e.preventDefault(); }
                                    if (!releaseScroll) { e.returnValue = false; }
                                }

                                function scrollContent(y, isWheel, isJump)
                                {
                                    releaseScroll = false;
                                    var delta = y;
                                    var maxTop = me.outerHeight() - bar.outerHeight();

                                    if (isWheel)
                                    {
                                        // move bar with mouse wheel
                                        delta = parseInt(bar.css('top')) + y * parseInt(o.wheelStep) / 100 * bar.outerHeight();

                                        // move bar, make sure it doesn't go out
                                        delta = Math.min(Math.max(delta, 0), maxTop);

                                        // if scrolling down, make sure a fractional change to the
                                        // scroll position isn't rounded away when the scrollbar's CSS is set
                                        // this flooring of delta would happened automatically when
                                        // bar.css is set below, but we floor here for clarity
                                        delta = (y > 0) ? Math.ceil(delta) : Math.floor(delta);

                                        // scroll the scrollbar
                                        bar.css({ top: delta + 'px' });
                                    }

                                    // calculate actual scroll amount
                                    percentScroll = parseInt(bar.css('top')) / (me.outerHeight() - bar.outerHeight());
                                    delta = percentScroll * (me[0].scrollHeight - me.outerHeight());

                                    if (isJump)
                                    {
                                        delta = y;
                                        var offsetTop = delta / me[0].scrollHeight * me.outerHeight();
                                        offsetTop = Math.min(Math.max(offsetTop, 0), maxTop);
                                        bar.css({ top: offsetTop + 'px' });
                                    }

                                    // scroll content
                                    me.scrollTop(delta);

                                    // fire scrolling event
                                    me.trigger('slimscrolling', ~~delta);

                                    // ensure bar is visible
                                    showBar();

                                    // trigger hide when scroll is stopped
                                    hideBar();
                                }

                                function attachWheel(target)
                                {
                                    if (window.addEventListener)
                                    {
                                        target.addEventListener('DOMMouseScroll', _onWheel, false );
                                        target.addEventListener('mousewheel', _onWheel, false );
                                    }
                                    else
                                    {
                                        document.attachEvent("onmousewheel", _onWheel)
                                    }
                                }

                                function getBarHeight()
                                {
                                    // calculate scrollbar height and make sure it is not too small
                                    barHeight = Math.max((me.outerHeight() / me[0].scrollHeight) * me.outerHeight(), minBarHeight);
                                    bar.css({ height: barHeight + 'px' });

                                    // hide scrollbar if content is not long enough
                                    var display = barHeight == me.outerHeight() ? 'none' : 'block';
                                    bar.css({ display: display });
                                }

                                function showBar()
                                {
                                    // recalculate bar height
                                    getBarHeight();
                                    clearTimeout(queueHide);

                                    // when bar reached top or bottom
                                    if (percentScroll == ~~percentScroll)
                                    {
                                        //release wheel
                                        releaseScroll = o.allowPageScroll;

                                        // publish approporiate event
                                        if (lastScroll != percentScroll)
                                        {
                                            var msg = (~~percentScroll == 0) ? 'top' : 'bottom';
                                            me.trigger('slimscroll', msg);
                                        }
                                    }
                                    else
                                    {
                                        releaseScroll = false;
                                    }
                                    lastScroll = percentScroll;

                                    // show only when required
                                    if(barHeight >= me.outerHeight()) {
                                        //allow window scroll
                                        releaseScroll = true;
                                        return;
                                    }
                                    bar.stop(true,true).fadeIn('fast');
                                    if (o.railVisible) { rail.stop(true,true).fadeIn('fast'); }
                                }

                                function hideBar()
                                {
                                    // only hide when options allow it
                                    if (!o.alwaysVisible)
                                    {
                                        queueHide = setTimeout(function(){
                                            if (!(o.disableFadeOut && isOverPanel) && !isOverBar && !isDragg)
                                            {
                                                bar.fadeOut('slow');
                                                rail.fadeOut('slow');
                                            }
                                        }, 1000);
                                    }
                                }

                            });

                            // maintain chainability
                            return this;
                        }
                    });

                    $.fn.extend({
                        slimscroll: $.fn.slimScroll
                    });

                })(jQuery);

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/jquery/dist/jquery.js":
        /*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
            ( function( global, factory ) {

                "use strict";

                if (  true && typeof module.exports === "object" ) {

                    // For CommonJS and CommonJS-like environments where a proper `window`
                    // is present, execute the factory and get jQuery.
                    // For environments that do not have a `window` with a `document`
                    // (such as Node.js), expose a factory as module.exports.
                    // This accentuates the need for the creation of a real `window`.
                    // e.g. var jQuery = require("jquery")(window);
                    // See ticket #14549 for more info.
                    module.exports = global.document ?
                        factory( global, true ) :
                        function( w ) {
                            if ( !w.document ) {
                                throw new Error( "jQuery requires a window with a document" );
                            }
                            return factory( w );
                        };
                } else {
                    factory( global );
                }

// Pass this if window is not defined yet
            } )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
                "use strict";

                var arr = [];

                var document = window.document;

                var getProto = Object.getPrototypeOf;

                var slice = arr.slice;

                var concat = arr.concat;

                var push = arr.push;

                var indexOf = arr.indexOf;

                var class2type = {};

                var toString = class2type.toString;

                var hasOwn = class2type.hasOwnProperty;

                var fnToString = hasOwn.toString;

                var ObjectFunctionString = fnToString.call( Object );

                var support = {};

                var isFunction = function isFunction( obj ) {

                    // Support: Chrome <=57, Firefox <=52
                    // In some browsers, typeof returns "function" for HTML <object> elements
                    // (i.e., `typeof document.createElement( "object" ) === "function"`).
                    // We don't want to classify *any* DOM node as a function.
                    return typeof obj === "function" && typeof obj.nodeType !== "number";
                };


                var isWindow = function isWindow( obj ) {
                    return obj != null && obj === obj.window;
                };




                var preservedScriptAttributes = {
                    type: true,
                    src: true,
                    nonce: true,
                    noModule: true
                };

                function DOMEval( code, node, doc ) {
                    doc = doc || document;

                    var i, val,
                        script = doc.createElement( "script" );

                    script.text = code;
                    if ( node ) {
                        for ( i in preservedScriptAttributes ) {

                            // Support: Firefox 64+, Edge 18+
                            // Some browsers don't support the "nonce" property on scripts.
                            // On the other hand, just using `getAttribute` is not enough as
                            // the `nonce` attribute is reset to an empty string whenever it
                            // becomes browsing-context connected.
                            // See https://github.com/whatwg/html/issues/2369
                            // See https://html.spec.whatwg.org/#nonce-attributes
                            // The `node.getAttribute` check was added for the sake of
                            // `jQuery.globalEval` so that it can fake a nonce-containing node
                            // via an object.
                            val = node[ i ] || node.getAttribute && node.getAttribute( i );
                            if ( val ) {
                                script.setAttribute( i, val );
                            }
                        }
                    }
                    doc.head.appendChild( script ).parentNode.removeChild( script );
                }


                function toType( obj ) {
                    if ( obj == null ) {
                        return obj + "";
                    }

                    // Support: Android <=2.3 only (functionish RegExp)
                    return typeof obj === "object" || typeof obj === "function" ?
                        class2type[ toString.call( obj ) ] || "object" :
                        typeof obj;
                }
                /* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



                var
                    version = "3.4.1",

                    // Define a local copy of jQuery
                    jQuery = function( selector, context ) {

                        // The jQuery object is actually just the init constructor 'enhanced'
                        // Need init if jQuery is called (just allow error to be thrown if not included)
                        return new jQuery.fn.init( selector, context );
                    },

                    // Support: Android <=4.0 only
                    // Make sure we trim BOM and NBSP
                    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

                jQuery.fn = jQuery.prototype = {

                    // The current version of jQuery being used
                    jquery: version,

                    constructor: jQuery,

                    // The default length of a jQuery object is 0
                    length: 0,

                    toArray: function() {
                        return slice.call( this );
                    },

                    // Get the Nth element in the matched element set OR
                    // Get the whole matched element set as a clean array
                    get: function( num ) {

                        // Return all the elements in a clean array
                        if ( num == null ) {
                            return slice.call( this );
                        }

                        // Return just the one element from the set
                        return num < 0 ? this[ num + this.length ] : this[ num ];
                    },

                    // Take an array of elements and push it onto the stack
                    // (returning the new matched element set)
                    pushStack: function( elems ) {

                        // Build a new jQuery matched element set
                        var ret = jQuery.merge( this.constructor(), elems );

                        // Add the old object onto the stack (as a reference)
                        ret.prevObject = this;

                        // Return the newly-formed element set
                        return ret;
                    },

                    // Execute a callback for every element in the matched set.
                    each: function( callback ) {
                        return jQuery.each( this, callback );
                    },

                    map: function( callback ) {
                        return this.pushStack( jQuery.map( this, function( elem, i ) {
                            return callback.call( elem, i, elem );
                        } ) );
                    },

                    slice: function() {
                        return this.pushStack( slice.apply( this, arguments ) );
                    },

                    first: function() {
                        return this.eq( 0 );
                    },

                    last: function() {
                        return this.eq( -1 );
                    },

                    eq: function( i ) {
                        var len = this.length,
                            j = +i + ( i < 0 ? len : 0 );
                        return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
                    },

                    end: function() {
                        return this.prevObject || this.constructor();
                    },

                    // For internal use only.
                    // Behaves like an Array's method, not like a jQuery method.
                    push: push,
                    sort: arr.sort,
                    splice: arr.splice
                };

                jQuery.extend = jQuery.fn.extend = function() {
                    var options, name, src, copy, copyIsArray, clone,
                        target = arguments[ 0 ] || {},
                        i = 1,
                        length = arguments.length,
                        deep = false;

                    // Handle a deep copy situation
                    if ( typeof target === "boolean" ) {
                        deep = target;

                        // Skip the boolean and the target
                        target = arguments[ i ] || {};
                        i++;
                    }

                    // Handle case when target is a string or something (possible in deep copy)
                    if ( typeof target !== "object" && !isFunction( target ) ) {
                        target = {};
                    }

                    // Extend jQuery itself if only one argument is passed
                    if ( i === length ) {
                        target = this;
                        i--;
                    }

                    for ( ; i < length; i++ ) {

                        // Only deal with non-null/undefined values
                        if ( ( options = arguments[ i ] ) != null ) {

                            // Extend the base object
                            for ( name in options ) {
                                copy = options[ name ];

                                // Prevent Object.prototype pollution
                                // Prevent never-ending loop
                                if ( name === "__proto__" || target === copy ) {
                                    continue;
                                }

                                // Recurse if we're merging plain objects or arrays
                                if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
                                    ( copyIsArray = Array.isArray( copy ) ) ) ) {
                                    src = target[ name ];

                                    // Ensure proper type for the source value
                                    if ( copyIsArray && !Array.isArray( src ) ) {
                                        clone = [];
                                    } else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
                                        clone = {};
                                    } else {
                                        clone = src;
                                    }
                                    copyIsArray = false;

                                    // Never move original objects, clone them
                                    target[ name ] = jQuery.extend( deep, clone, copy );

                                    // Don't bring in undefined values
                                } else if ( copy !== undefined ) {
                                    target[ name ] = copy;
                                }
                            }
                        }
                    }

                    // Return the modified object
                    return target;
                };

                jQuery.extend( {

                    // Unique for each copy of jQuery on the page
                    expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

                    // Assume jQuery is ready without the ready module
                    isReady: true,

                    error: function( msg ) {
                        throw new Error( msg );
                    },

                    noop: function() {},

                    isPlainObject: function( obj ) {
                        var proto, Ctor;

                        // Detect obvious negatives
                        // Use toString instead of jQuery.type to catch host objects
                        if ( !obj || toString.call( obj ) !== "[object Object]" ) {
                            return false;
                        }

                        proto = getProto( obj );

                        // Objects with no prototype (e.g., `Object.create( null )`) are plain
                        if ( !proto ) {
                            return true;
                        }

                        // Objects with prototype are plain iff they were constructed by a global Object function
                        Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
                        return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
                    },

                    isEmptyObject: function( obj ) {
                        var name;

                        for ( name in obj ) {
                            return false;
                        }
                        return true;
                    },

                    // Evaluates a script in a global context
                    globalEval: function( code, options ) {
                        DOMEval( code, { nonce: options && options.nonce } );
                    },

                    each: function( obj, callback ) {
                        var length, i = 0;

                        if ( isArrayLike( obj ) ) {
                            length = obj.length;
                            for ( ; i < length; i++ ) {
                                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
                                    break;
                                }
                            }
                        } else {
                            for ( i in obj ) {
                                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
                                    break;
                                }
                            }
                        }

                        return obj;
                    },

                    // Support: Android <=4.0 only
                    trim: function( text ) {
                        return text == null ?
                            "" :
                            ( text + "" ).replace( rtrim, "" );
                    },

                    // results is for internal usage only
                    makeArray: function( arr, results ) {
                        var ret = results || [];

                        if ( arr != null ) {
                            if ( isArrayLike( Object( arr ) ) ) {
                                jQuery.merge( ret,
                                    typeof arr === "string" ?
                                        [ arr ] : arr
                                );
                            } else {
                                push.call( ret, arr );
                            }
                        }

                        return ret;
                    },

                    inArray: function( elem, arr, i ) {
                        return arr == null ? -1 : indexOf.call( arr, elem, i );
                    },

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    merge: function( first, second ) {
                        var len = +second.length,
                            j = 0,
                            i = first.length;

                        for ( ; j < len; j++ ) {
                            first[ i++ ] = second[ j ];
                        }

                        first.length = i;

                        return first;
                    },

                    grep: function( elems, callback, invert ) {
                        var callbackInverse,
                            matches = [],
                            i = 0,
                            length = elems.length,
                            callbackExpect = !invert;

                        // Go through the array, only saving the items
                        // that pass the validator function
                        for ( ; i < length; i++ ) {
                            callbackInverse = !callback( elems[ i ], i );
                            if ( callbackInverse !== callbackExpect ) {
                                matches.push( elems[ i ] );
                            }
                        }

                        return matches;
                    },

                    // arg is for internal usage only
                    map: function( elems, callback, arg ) {
                        var length, value,
                            i = 0,
                            ret = [];

                        // Go through the array, translating each of the items to their new values
                        if ( isArrayLike( elems ) ) {
                            length = elems.length;
                            for ( ; i < length; i++ ) {
                                value = callback( elems[ i ], i, arg );

                                if ( value != null ) {
                                    ret.push( value );
                                }
                            }

                            // Go through every key on the object,
                        } else {
                            for ( i in elems ) {
                                value = callback( elems[ i ], i, arg );

                                if ( value != null ) {
                                    ret.push( value );
                                }
                            }
                        }

                        // Flatten any nested arrays
                        return concat.apply( [], ret );
                    },

                    // A global GUID counter for objects
                    guid: 1,

                    // jQuery.support is not used in Core but other projects attach their
                    // properties to it so it needs to exist.
                    support: support
                } );

                if ( typeof Symbol === "function" ) {
                    jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
                }

// Populate the class2type map
                jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
                    function( i, name ) {
                        class2type[ "[object " + name + "]" ] = name.toLowerCase();
                    } );

                function isArrayLike( obj ) {

                    // Support: real iOS 8.2 only (not reproducible in simulator)
                    // `in` check used to prevent JIT error (gh-2145)
                    // hasOwn isn't used here due to false negatives
                    // regarding Nodelist length in IE
                    var length = !!obj && "length" in obj && obj.length,
                        type = toType( obj );

                    if ( isFunction( obj ) || isWindow( obj ) ) {
                        return false;
                    }

                    return type === "array" || length === 0 ||
                        typeof length === "number" && length > 0 && ( length - 1 ) in obj;
                }
                var Sizzle =
                    /*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
                    (function( window ) {

                        var i,
                            support,
                            Expr,
                            getText,
                            isXML,
                            tokenize,
                            compile,
                            select,
                            outermostContext,
                            sortInput,
                            hasDuplicate,

                            // Local document vars
                            setDocument,
                            document,
                            docElem,
                            documentIsHTML,
                            rbuggyQSA,
                            rbuggyMatches,
                            matches,
                            contains,

                            // Instance-specific data
                            expando = "sizzle" + 1 * new Date(),
                            preferredDoc = window.document,
                            dirruns = 0,
                            done = 0,
                            classCache = createCache(),
                            tokenCache = createCache(),
                            compilerCache = createCache(),
                            nonnativeSelectorCache = createCache(),
                            sortOrder = function( a, b ) {
                                if ( a === b ) {
                                    hasDuplicate = true;
                                }
                                return 0;
                            },

                            // Instance methods
                            hasOwn = ({}).hasOwnProperty,
                            arr = [],
                            pop = arr.pop,
                            push_native = arr.push,
                            push = arr.push,
                            slice = arr.slice,
                            // Use a stripped-down indexOf as it's faster than native
                            // https://jsperf.com/thor-indexof-vs-for/5
                            indexOf = function( list, elem ) {
                                var i = 0,
                                    len = list.length;
                                for ( ; i < len; i++ ) {
                                    if ( list[i] === elem ) {
                                        return i;
                                    }
                                }
                                return -1;
                            },

                            booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

                            // Regular expressions

                            // http://www.w3.org/TR/css3-selectors/#whitespace
                            whitespace = "[\\x20\\t\\r\\n\\f]",

                            // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
                            identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

                            // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
                            attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
                                // Operator (capture 2)
                                "*([*^$|!~]?=)" + whitespace +
                                // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
                                "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
                                "*\\]",

                            pseudos = ":(" + identifier + ")(?:\\((" +
                                // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
                                // 1. quoted (capture 3; capture 4 or capture 5)
                                "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
                                // 2. simple (capture 6)
                                "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
                                // 3. anything else (capture 2)
                                ".*" +
                                ")\\)|)",

                            // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
                            rwhitespace = new RegExp( whitespace + "+", "g" ),
                            rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

                            rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
                            rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
                            rdescend = new RegExp( whitespace + "|>" ),

                            rpseudo = new RegExp( pseudos ),
                            ridentifier = new RegExp( "^" + identifier + "$" ),

                            matchExpr = {
                                "ID": new RegExp( "^#(" + identifier + ")" ),
                                "CLASS": new RegExp( "^\\.(" + identifier + ")" ),
                                "TAG": new RegExp( "^(" + identifier + "|[*])" ),
                                "ATTR": new RegExp( "^" + attributes ),
                                "PSEUDO": new RegExp( "^" + pseudos ),
                                "CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                                    "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                                    "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
                                "bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
                                // For use in libraries implementing .is()
                                // We use this for POS matching in `select`
                                "needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                                    whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
                            },

                            rhtml = /HTML$/i,
                            rinputs = /^(?:input|select|textarea|button)$/i,
                            rheader = /^h\d$/i,

                            rnative = /^[^{]+\{\s*\[native \w/,

                            // Easily-parseable/retrievable ID or TAG or CLASS selectors
                            rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

                            rsibling = /[+~]/,

                            // CSS escapes
                            // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
                            runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
                            funescape = function( _, escaped, escapedWhitespace ) {
                                var high = "0x" + escaped - 0x10000;
                                // NaN means non-codepoint
                                // Support: Firefox<24
                                // Workaround erroneous numeric interpretation of +"0x"
                                return high !== high || escapedWhitespace ?
                                    escaped :
                                    high < 0 ?
                                        // BMP codepoint
                                        String.fromCharCode( high + 0x10000 ) :
                                        // Supplemental Plane codepoint (surrogate pair)
                                        String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
                            },

                            // CSS string/identifier serialization
                            // https://drafts.csswg.org/cssom/#common-serializing-idioms
                            rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
                            fcssescape = function( ch, asCodePoint ) {
                                if ( asCodePoint ) {

                                    // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
                                    if ( ch === "\0" ) {
                                        return "\uFFFD";
                                    }

                                    // Control characters and (dependent upon position) numbers get escaped as code points
                                    return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
                                }

                                // Other potentially-special ASCII characters get backslash-escaped
                                return "\\" + ch;
                            },

                            // Used for iframes
                            // See setDocument()
                            // Removing the function wrapper causes a "Permission Denied"
                            // error in IE
                            unloadHandler = function() {
                                setDocument();
                            },

                            inDisabledFieldset = addCombinator(
                                function( elem ) {
                                    return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
                                },
                                { dir: "parentNode", next: "legend" }
                            );

// Optimize for push.apply( _, NodeList )
                        try {
                            push.apply(
                                (arr = slice.call( preferredDoc.childNodes )),
                                preferredDoc.childNodes
                            );
                            // Support: Android<4.0
                            // Detect silently failing push.apply
                            arr[ preferredDoc.childNodes.length ].nodeType;
                        } catch ( e ) {
                            push = { apply: arr.length ?

                                    // Leverage slice if possible
                                    function( target, els ) {
                                        push_native.apply( target, slice.call(els) );
                                    } :

                                    // Support: IE<9
                                    // Otherwise append directly
                                    function( target, els ) {
                                        var j = target.length,
                                            i = 0;
                                        // Can't trust NodeList.length
                                        while ( (target[j++] = els[i++]) ) {}
                                        target.length = j - 1;
                                    }
                            };
                        }

                        function Sizzle( selector, context, results, seed ) {
                            var m, i, elem, nid, match, groups, newSelector,
                                newContext = context && context.ownerDocument,

                                // nodeType defaults to 9, since context defaults to document
                                nodeType = context ? context.nodeType : 9;

                            results = results || [];

                            // Return early from calls with invalid selector or context
                            if ( typeof selector !== "string" || !selector ||
                                nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

                                return results;
                            }

                            // Try to shortcut find operations (as opposed to filters) in HTML documents
                            if ( !seed ) {

                                if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
                                    setDocument( context );
                                }
                                context = context || document;

                                if ( documentIsHTML ) {

                                    // If the selector is sufficiently simple, try using a "get*By*" DOM method
                                    // (excepting DocumentFragment context, where the methods don't exist)
                                    if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

                                        // ID selector
                                        if ( (m = match[1]) ) {

                                            // Document context
                                            if ( nodeType === 9 ) {
                                                if ( (elem = context.getElementById( m )) ) {

                                                    // Support: IE, Opera, Webkit
                                                    // TODO: identify versions
                                                    // getElementById can match elements by name instead of ID
                                                    if ( elem.id === m ) {
                                                        results.push( elem );
                                                        return results;
                                                    }
                                                } else {
                                                    return results;
                                                }

                                                // Element context
                                            } else {

                                                // Support: IE, Opera, Webkit
                                                // TODO: identify versions
                                                // getElementById can match elements by name instead of ID
                                                if ( newContext && (elem = newContext.getElementById( m )) &&
                                                    contains( context, elem ) &&
                                                    elem.id === m ) {

                                                    results.push( elem );
                                                    return results;
                                                }
                                            }

                                            // Type selector
                                        } else if ( match[2] ) {
                                            push.apply( results, context.getElementsByTagName( selector ) );
                                            return results;

                                            // Class selector
                                        } else if ( (m = match[3]) && support.getElementsByClassName &&
                                            context.getElementsByClassName ) {

                                            push.apply( results, context.getElementsByClassName( m ) );
                                            return results;
                                        }
                                    }

                                    // Take advantage of querySelectorAll
                                    if ( support.qsa &&
                                        !nonnativeSelectorCache[ selector + " " ] &&
                                        (!rbuggyQSA || !rbuggyQSA.test( selector )) &&

                                        // Support: IE 8 only
                                        // Exclude object elements
                                        (nodeType !== 1 || context.nodeName.toLowerCase() !== "object") ) {

                                        newSelector = selector;
                                        newContext = context;

                                        // qSA considers elements outside a scoping root when evaluating child or
                                        // descendant combinators, which is not what we want.
                                        // In such cases, we work around the behavior by prefixing every selector in the
                                        // list with an ID selector referencing the scope context.
                                        // Thanks to Andrew Dupont for this technique.
                                        if ( nodeType === 1 && rdescend.test( selector ) ) {

                                            // Capture the context ID, setting it first if necessary
                                            if ( (nid = context.getAttribute( "id" )) ) {
                                                nid = nid.replace( rcssescape, fcssescape );
                                            } else {
                                                context.setAttribute( "id", (nid = expando) );
                                            }

                                            // Prefix every selector in the list
                                            groups = tokenize( selector );
                                            i = groups.length;
                                            while ( i-- ) {
                                                groups[i] = "#" + nid + " " + toSelector( groups[i] );
                                            }
                                            newSelector = groups.join( "," );

                                            // Expand context for sibling selectors
                                            newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
                                                context;
                                        }

                                        try {
                                            push.apply( results,
                                                newContext.querySelectorAll( newSelector )
                                            );
                                            return results;
                                        } catch ( qsaError ) {
                                            nonnativeSelectorCache( selector, true );
                                        } finally {
                                            if ( nid === expando ) {
                                                context.removeAttribute( "id" );
                                            }
                                        }
                                    }
                                }
                            }

                            // All others
                            return select( selector.replace( rtrim, "$1" ), context, results, seed );
                        }

                        /**
                         * Create key-value caches of limited size
                         * @returns {function(string, object)} Returns the Object data after storing it on itself with
                         *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
                         *	deleting the oldest entry
                         */
                        function createCache() {
                            var keys = [];

                            function cache( key, value ) {
                                // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                                if ( keys.push( key + " " ) > Expr.cacheLength ) {
                                    // Only keep the most recent entries
                                    delete cache[ keys.shift() ];
                                }
                                return (cache[ key + " " ] = value);
                            }
                            return cache;
                        }

                        /**
                         * Mark a function for special use by Sizzle
                         * @param {Function} fn The function to mark
                         */
                        function markFunction( fn ) {
                            fn[ expando ] = true;
                            return fn;
                        }

                        /**
                         * Support testing using an element
                         * @param {Function} fn Passed the created element and returns a boolean result
                         */
                        function assert( fn ) {
                            var el = document.createElement("fieldset");

                            try {
                                return !!fn( el );
                            } catch (e) {
                                return false;
                            } finally {
                                // Remove from its parent by default
                                if ( el.parentNode ) {
                                    el.parentNode.removeChild( el );
                                }
                                // release memory in IE
                                el = null;
                            }
                        }

                        /**
                         * Adds the same handler for all of the specified attrs
                         * @param {String} attrs Pipe-separated list of attributes
                         * @param {Function} handler The method that will be applied
                         */
                        function addHandle( attrs, handler ) {
                            var arr = attrs.split("|"),
                                i = arr.length;

                            while ( i-- ) {
                                Expr.attrHandle[ arr[i] ] = handler;
                            }
                        }

                        /**
                         * Checks document order of two siblings
                         * @param {Element} a
                         * @param {Element} b
                         * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
                         */
                        function siblingCheck( a, b ) {
                            var cur = b && a,
                                diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
                                    a.sourceIndex - b.sourceIndex;

                            // Use IE sourceIndex if available on both nodes
                            if ( diff ) {
                                return diff;
                            }

                            // Check if b follows a
                            if ( cur ) {
                                while ( (cur = cur.nextSibling) ) {
                                    if ( cur === b ) {
                                        return -1;
                                    }
                                }
                            }

                            return a ? 1 : -1;
                        }

                        /**
                         * Returns a function to use in pseudos for input types
                         * @param {String} type
                         */
                        function createInputPseudo( type ) {
                            return function( elem ) {
                                var name = elem.nodeName.toLowerCase();
                                return name === "input" && elem.type === type;
                            };
                        }

                        /**
                         * Returns a function to use in pseudos for buttons
                         * @param {String} type
                         */
                        function createButtonPseudo( type ) {
                            return function( elem ) {
                                var name = elem.nodeName.toLowerCase();
                                return (name === "input" || name === "button") && elem.type === type;
                            };
                        }

                        /**
                         * Returns a function to use in pseudos for :enabled/:disabled
                         * @param {Boolean} disabled true for :disabled; false for :enabled
                         */
                        function createDisabledPseudo( disabled ) {

                            // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
                            return function( elem ) {

                                // Only certain elements can match :enabled or :disabled
                                // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
                                // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
                                if ( "form" in elem ) {

                                    // Check for inherited disabledness on relevant non-disabled elements:
                                    // * listed form-associated elements in a disabled fieldset
                                    //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                                    // * option elements in a disabled optgroup
                                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                                    // All such elements have a "form" property.
                                    if ( elem.parentNode && elem.disabled === false ) {

                                        // Option elements defer to a parent optgroup if present
                                        if ( "label" in elem ) {
                                            if ( "label" in elem.parentNode ) {
                                                return elem.parentNode.disabled === disabled;
                                            } else {
                                                return elem.disabled === disabled;
                                            }
                                        }

                                        // Support: IE 6 - 11
                                        // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                                        return elem.isDisabled === disabled ||

                                            // Where there is no isDisabled, check manually
                                            /* jshint -W018 */
                                            elem.isDisabled !== !disabled &&
                                            inDisabledFieldset( elem ) === disabled;
                                    }

                                    return elem.disabled === disabled;

                                    // Try to winnow out elements that can't be disabled before trusting the disabled property.
                                    // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                                    // even exist on them, let alone have a boolean value.
                                } else if ( "label" in elem ) {
                                    return elem.disabled === disabled;
                                }

                                // Remaining elements are neither :enabled nor :disabled
                                return false;
                            };
                        }

                        /**
                         * Returns a function to use in pseudos for positionals
                         * @param {Function} fn
                         */
                        function createPositionalPseudo( fn ) {
                            return markFunction(function( argument ) {
                                argument = +argument;
                                return markFunction(function( seed, matches ) {
                                    var j,
                                        matchIndexes = fn( [], seed.length, argument ),
                                        i = matchIndexes.length;

                                    // Match elements found at the specified indexes
                                    while ( i-- ) {
                                        if ( seed[ (j = matchIndexes[i]) ] ) {
                                            seed[j] = !(matches[j] = seed[j]);
                                        }
                                    }
                                });
                            });
                        }

                        /**
                         * Checks a node for validity as a Sizzle context
                         * @param {Element|Object=} context
                         * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
                         */
                        function testContext( context ) {
                            return context && typeof context.getElementsByTagName !== "undefined" && context;
                        }

// Expose support vars for convenience
                        support = Sizzle.support = {};

                        /**
                         * Detects XML nodes
                         * @param {Element|Object} elem An element or a document
                         * @returns {Boolean} True iff elem is a non-HTML XML node
                         */
                        isXML = Sizzle.isXML = function( elem ) {
                            var namespace = elem.namespaceURI,
                                docElem = (elem.ownerDocument || elem).documentElement;

                            // Support: IE <=8
                            // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
                            // https://bugs.jquery.com/ticket/4833
                            return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
                        };

                        /**
                         * Sets document-related variables once based on the current document
                         * @param {Element|Object} [doc] An element or document object to use to set the document
                         * @returns {Object} Returns the current document
                         */
                        setDocument = Sizzle.setDocument = function( node ) {
                            var hasCompare, subWindow,
                                doc = node ? node.ownerDocument || node : preferredDoc;

                            // Return early if doc is invalid or already selected
                            if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
                                return document;
                            }

                            // Update global variables
                            document = doc;
                            docElem = document.documentElement;
                            documentIsHTML = !isXML( document );

                            // Support: IE 9-11, Edge
                            // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
                            if ( preferredDoc !== document &&
                                (subWindow = document.defaultView) && subWindow.top !== subWindow ) {

                                // Support: IE 11, Edge
                                if ( subWindow.addEventListener ) {
                                    subWindow.addEventListener( "unload", unloadHandler, false );

                                    // Support: IE 9 - 10 only
                                } else if ( subWindow.attachEvent ) {
                                    subWindow.attachEvent( "onunload", unloadHandler );
                                }
                            }

                            /* Attributes
	---------------------------------------------------------------------- */

                            // Support: IE<8
                            // Verify that getAttribute really returns attributes and not properties
                            // (excepting IE8 booleans)
                            support.attributes = assert(function( el ) {
                                el.className = "i";
                                return !el.getAttribute("className");
                            });

                            /* getElement(s)By*
	---------------------------------------------------------------------- */

                            // Check if getElementsByTagName("*") returns only elements
                            support.getElementsByTagName = assert(function( el ) {
                                el.appendChild( document.createComment("") );
                                return !el.getElementsByTagName("*").length;
                            });

                            // Support: IE<9
                            support.getElementsByClassName = rnative.test( document.getElementsByClassName );

                            // Support: IE<10
                            // Check if getElementById returns elements by name
                            // The broken getElementById methods don't pick up programmatically-set names,
                            // so use a roundabout getElementsByName test
                            support.getById = assert(function( el ) {
                                docElem.appendChild( el ).id = expando;
                                return !document.getElementsByName || !document.getElementsByName( expando ).length;
                            });

                            // ID filter and find
                            if ( support.getById ) {
                                Expr.filter["ID"] = function( id ) {
                                    var attrId = id.replace( runescape, funescape );
                                    return function( elem ) {
                                        return elem.getAttribute("id") === attrId;
                                    };
                                };
                                Expr.find["ID"] = function( id, context ) {
                                    if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
                                        var elem = context.getElementById( id );
                                        return elem ? [ elem ] : [];
                                    }
                                };
                            } else {
                                Expr.filter["ID"] =  function( id ) {
                                    var attrId = id.replace( runescape, funescape );
                                    return function( elem ) {
                                        var node = typeof elem.getAttributeNode !== "undefined" &&
                                            elem.getAttributeNode("id");
                                        return node && node.value === attrId;
                                    };
                                };

                                // Support: IE 6 - 7 only
                                // getElementById is not reliable as a find shortcut
                                Expr.find["ID"] = function( id, context ) {
                                    if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
                                        var node, i, elems,
                                            elem = context.getElementById( id );

                                        if ( elem ) {

                                            // Verify the id attribute
                                            node = elem.getAttributeNode("id");
                                            if ( node && node.value === id ) {
                                                return [ elem ];
                                            }

                                            // Fall back on getElementsByName
                                            elems = context.getElementsByName( id );
                                            i = 0;
                                            while ( (elem = elems[i++]) ) {
                                                node = elem.getAttributeNode("id");
                                                if ( node && node.value === id ) {
                                                    return [ elem ];
                                                }
                                            }
                                        }

                                        return [];
                                    }
                                };
                            }

                            // Tag
                            Expr.find["TAG"] = support.getElementsByTagName ?
                                function( tag, context ) {
                                    if ( typeof context.getElementsByTagName !== "undefined" ) {
                                        return context.getElementsByTagName( tag );

                                        // DocumentFragment nodes don't have gEBTN
                                    } else if ( support.qsa ) {
                                        return context.querySelectorAll( tag );
                                    }
                                } :

                                function( tag, context ) {
                                    var elem,
                                        tmp = [],
                                        i = 0,
                                        // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                                        results = context.getElementsByTagName( tag );

                                    // Filter out possible comments
                                    if ( tag === "*" ) {
                                        while ( (elem = results[i++]) ) {
                                            if ( elem.nodeType === 1 ) {
                                                tmp.push( elem );
                                            }
                                        }

                                        return tmp;
                                    }
                                    return results;
                                };

                            // Class
                            Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
                                if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
                                    return context.getElementsByClassName( className );
                                }
                            };

                            /* QSA/matchesSelector
	---------------------------------------------------------------------- */

                            // QSA and matchesSelector support

                            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
                            rbuggyMatches = [];

                            // qSa(:focus) reports false when true (Chrome 21)
                            // We allow this because of a bug in IE8/9 that throws an error
                            // whenever `document.activeElement` is accessed on an iframe
                            // So, we allow :focus to pass through QSA all the time to avoid the IE error
                            // See https://bugs.jquery.com/ticket/13378
                            rbuggyQSA = [];

                            if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
                                // Build QSA regex
                                // Regex strategy adopted from Diego Perini
                                assert(function( el ) {
                                    // Select is set to empty string on purpose
                                    // This is to test IE's treatment of not explicitly
                                    // setting a boolean content attribute,
                                    // since its presence should be enough
                                    // https://bugs.jquery.com/ticket/12359
                                    docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
                                        "<select id='" + expando + "-\r\\' msallowcapture=''>" +
                                        "<option selected=''></option></select>";

                                    // Support: IE8, Opera 11-12.16
                                    // Nothing should be selected when empty strings follow ^= or $= or *=
                                    // The test attribute must be unknown in Opera but "safe" for WinRT
                                    // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                                    if ( el.querySelectorAll("[msallowcapture^='']").length ) {
                                        rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
                                    }

                                    // Support: IE8
                                    // Boolean attributes and "value" are not treated correctly
                                    if ( !el.querySelectorAll("[selected]").length ) {
                                        rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
                                    }

                                    // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
                                    if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
                                        rbuggyQSA.push("~=");
                                    }

                                    // Webkit/Opera - :checked should return selected option elements
                                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                                    // IE8 throws error here and will not see later tests
                                    if ( !el.querySelectorAll(":checked").length ) {
                                        rbuggyQSA.push(":checked");
                                    }

                                    // Support: Safari 8+, iOS 8+
                                    // https://bugs.webkit.org/show_bug.cgi?id=136851
                                    // In-page `selector#id sibling-combinator selector` fails
                                    if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
                                        rbuggyQSA.push(".#.+[+~]");
                                    }
                                });

                                assert(function( el ) {
                                    el.innerHTML = "<a href='' disabled='disabled'></a>" +
                                        "<select disabled='disabled'><option/></select>";

                                    // Support: Windows 8 Native Apps
                                    // The type and name attributes are restricted during .innerHTML assignment
                                    var input = document.createElement("input");
                                    input.setAttribute( "type", "hidden" );
                                    el.appendChild( input ).setAttribute( "name", "D" );

                                    // Support: IE8
                                    // Enforce case-sensitivity of name attribute
                                    if ( el.querySelectorAll("[name=d]").length ) {
                                        rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
                                    }

                                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                                    // IE8 throws error here and will not see later tests
                                    if ( el.querySelectorAll(":enabled").length !== 2 ) {
                                        rbuggyQSA.push( ":enabled", ":disabled" );
                                    }

                                    // Support: IE9-11+
                                    // IE's :disabled selector does not pick up the children of disabled fieldsets
                                    docElem.appendChild( el ).disabled = true;
                                    if ( el.querySelectorAll(":disabled").length !== 2 ) {
                                        rbuggyQSA.push( ":enabled", ":disabled" );
                                    }

                                    // Opera 10-11 does not throw on post-comma invalid pseudos
                                    el.querySelectorAll("*,:x");
                                    rbuggyQSA.push(",.*:");
                                });
                            }

                            if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
                                docElem.webkitMatchesSelector ||
                                docElem.mozMatchesSelector ||
                                docElem.oMatchesSelector ||
                                docElem.msMatchesSelector) )) ) {

                                assert(function( el ) {
                                    // Check to see if it's possible to do matchesSelector
                                    // on a disconnected node (IE 9)
                                    support.disconnectedMatch = matches.call( el, "*" );

                                    // This should fail with an exception
                                    // Gecko does not error, returns false instead
                                    matches.call( el, "[s!='']:x" );
                                    rbuggyMatches.push( "!=", pseudos );
                                });
                            }

                            rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
                            rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

                            /* Contains
	---------------------------------------------------------------------- */
                            hasCompare = rnative.test( docElem.compareDocumentPosition );

                            // Element contains another
                            // Purposefully self-exclusive
                            // As in, an element does not contain itself
                            contains = hasCompare || rnative.test( docElem.contains ) ?
                                function( a, b ) {
                                    var adown = a.nodeType === 9 ? a.documentElement : a,
                                        bup = b && b.parentNode;
                                    return a === bup || !!( bup && bup.nodeType === 1 && (
                                        adown.contains ?
                                            adown.contains( bup ) :
                                            a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
                                    ));
                                } :
                                function( a, b ) {
                                    if ( b ) {
                                        while ( (b = b.parentNode) ) {
                                            if ( b === a ) {
                                                return true;
                                            }
                                        }
                                    }
                                    return false;
                                };

                            /* Sorting
	---------------------------------------------------------------------- */

                            // Document order sorting
                            sortOrder = hasCompare ?
                                function( a, b ) {

                                    // Flag for duplicate removal
                                    if ( a === b ) {
                                        hasDuplicate = true;
                                        return 0;
                                    }

                                    // Sort on method existence if only one input has compareDocumentPosition
                                    var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                                    if ( compare ) {
                                        return compare;
                                    }

                                    // Calculate position if both inputs belong to the same document
                                    compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
                                        a.compareDocumentPosition( b ) :

                                        // Otherwise we know they are disconnected
                                        1;

                                    // Disconnected nodes
                                    if ( compare & 1 ||
                                        (!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

                                        // Choose the first element that is related to our preferred document
                                        if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
                                            return -1;
                                        }
                                        if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
                                            return 1;
                                        }

                                        // Maintain original order
                                        return sortInput ?
                                            ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
                                            0;
                                    }

                                    return compare & 4 ? -1 : 1;
                                } :
                                function( a, b ) {
                                    // Exit early if the nodes are identical
                                    if ( a === b ) {
                                        hasDuplicate = true;
                                        return 0;
                                    }

                                    var cur,
                                        i = 0,
                                        aup = a.parentNode,
                                        bup = b.parentNode,
                                        ap = [ a ],
                                        bp = [ b ];

                                    // Parentless nodes are either documents or disconnected
                                    if ( !aup || !bup ) {
                                        return a === document ? -1 :
                                            b === document ? 1 :
                                                aup ? -1 :
                                                    bup ? 1 :
                                                        sortInput ?
                                                            ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
                                                            0;

                                        // If the nodes are siblings, we can do a quick check
                                    } else if ( aup === bup ) {
                                        return siblingCheck( a, b );
                                    }

                                    // Otherwise we need full lists of their ancestors for comparison
                                    cur = a;
                                    while ( (cur = cur.parentNode) ) {
                                        ap.unshift( cur );
                                    }
                                    cur = b;
                                    while ( (cur = cur.parentNode) ) {
                                        bp.unshift( cur );
                                    }

                                    // Walk down the tree looking for a discrepancy
                                    while ( ap[i] === bp[i] ) {
                                        i++;
                                    }

                                    return i ?
                                        // Do a sibling check if the nodes have a common ancestor
                                        siblingCheck( ap[i], bp[i] ) :

                                        // Otherwise nodes in our document sort first
                                        ap[i] === preferredDoc ? -1 :
                                            bp[i] === preferredDoc ? 1 :
                                                0;
                                };

                            return document;
                        };

                        Sizzle.matches = function( expr, elements ) {
                            return Sizzle( expr, null, null, elements );
                        };

                        Sizzle.matchesSelector = function( elem, expr ) {
                            // Set document vars if needed
                            if ( ( elem.ownerDocument || elem ) !== document ) {
                                setDocument( elem );
                            }

                            if ( support.matchesSelector && documentIsHTML &&
                                !nonnativeSelectorCache[ expr + " " ] &&
                                ( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
                                ( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

                                try {
                                    var ret = matches.call( elem, expr );

                                    // IE 9's matchesSelector returns false on disconnected nodes
                                    if ( ret || support.disconnectedMatch ||
                                        // As well, disconnected nodes are said to be in a document
                                        // fragment in IE 9
                                        elem.document && elem.document.nodeType !== 11 ) {
                                        return ret;
                                    }
                                } catch (e) {
                                    nonnativeSelectorCache( expr, true );
                                }
                            }

                            return Sizzle( expr, document, null, [ elem ] ).length > 0;
                        };

                        Sizzle.contains = function( context, elem ) {
                            // Set document vars if needed
                            if ( ( context.ownerDocument || context ) !== document ) {
                                setDocument( context );
                            }
                            return contains( context, elem );
                        };

                        Sizzle.attr = function( elem, name ) {
                            // Set document vars if needed
                            if ( ( elem.ownerDocument || elem ) !== document ) {
                                setDocument( elem );
                            }

                            var fn = Expr.attrHandle[ name.toLowerCase() ],
                                // Don't get fooled by Object.prototype properties (jQuery #13807)
                                val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
                                    fn( elem, name, !documentIsHTML ) :
                                    undefined;

                            return val !== undefined ?
                                val :
                                support.attributes || !documentIsHTML ?
                                    elem.getAttribute( name ) :
                                    (val = elem.getAttributeNode(name)) && val.specified ?
                                        val.value :
                                        null;
                        };

                        Sizzle.escape = function( sel ) {
                            return (sel + "").replace( rcssescape, fcssescape );
                        };

                        Sizzle.error = function( msg ) {
                            throw new Error( "Syntax error, unrecognized expression: " + msg );
                        };

                        /**
                         * Document sorting and removing duplicates
                         * @param {ArrayLike} results
                         */
                        Sizzle.uniqueSort = function( results ) {
                            var elem,
                                duplicates = [],
                                j = 0,
                                i = 0;

                            // Unless we *know* we can detect duplicates, assume their presence
                            hasDuplicate = !support.detectDuplicates;
                            sortInput = !support.sortStable && results.slice( 0 );
                            results.sort( sortOrder );

                            if ( hasDuplicate ) {
                                while ( (elem = results[i++]) ) {
                                    if ( elem === results[ i ] ) {
                                        j = duplicates.push( i );
                                    }
                                }
                                while ( j-- ) {
                                    results.splice( duplicates[ j ], 1 );
                                }
                            }

                            // Clear input after sorting to release objects
                            // See https://github.com/jquery/sizzle/pull/225
                            sortInput = null;

                            return results;
                        };

                        /**
                         * Utility function for retrieving the text value of an array of DOM nodes
                         * @param {Array|Element} elem
                         */
                        getText = Sizzle.getText = function( elem ) {
                            var node,
                                ret = "",
                                i = 0,
                                nodeType = elem.nodeType;

                            if ( !nodeType ) {
                                // If no nodeType, this is expected to be an array
                                while ( (node = elem[i++]) ) {
                                    // Do not traverse comment nodes
                                    ret += getText( node );
                                }
                            } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
                                // Use textContent for elements
                                // innerText usage removed for consistency of new lines (jQuery #11153)
                                if ( typeof elem.textContent === "string" ) {
                                    return elem.textContent;
                                } else {
                                    // Traverse its children
                                    for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                                        ret += getText( elem );
                                    }
                                }
                            } else if ( nodeType === 3 || nodeType === 4 ) {
                                return elem.nodeValue;
                            }
                            // Do not include comment or processing instruction nodes

                            return ret;
                        };

                        Expr = Sizzle.selectors = {

                            // Can be adjusted by the user
                            cacheLength: 50,

                            createPseudo: markFunction,

                            match: matchExpr,

                            attrHandle: {},

                            find: {},

                            relative: {
                                ">": { dir: "parentNode", first: true },
                                " ": { dir: "parentNode" },
                                "+": { dir: "previousSibling", first: true },
                                "~": { dir: "previousSibling" }
                            },

                            preFilter: {
                                "ATTR": function( match ) {
                                    match[1] = match[1].replace( runescape, funescape );

                                    // Move the given value to match[3] whether quoted or unquoted
                                    match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

                                    if ( match[2] === "~=" ) {
                                        match[3] = " " + match[3] + " ";
                                    }

                                    return match.slice( 0, 4 );
                                },

                                "CHILD": function( match ) {
                                    /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
                                    match[1] = match[1].toLowerCase();

                                    if ( match[1].slice( 0, 3 ) === "nth" ) {
                                        // nth-* requires argument
                                        if ( !match[3] ) {
                                            Sizzle.error( match[0] );
                                        }

                                        // numeric x and y parameters for Expr.filter.CHILD
                                        // remember that false/true cast respectively to 0/1
                                        match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
                                        match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

                                        // other types prohibit arguments
                                    } else if ( match[3] ) {
                                        Sizzle.error( match[0] );
                                    }

                                    return match;
                                },

                                "PSEUDO": function( match ) {
                                    var excess,
                                        unquoted = !match[6] && match[2];

                                    if ( matchExpr["CHILD"].test( match[0] ) ) {
                                        return null;
                                    }

                                    // Accept quoted arguments as-is
                                    if ( match[3] ) {
                                        match[2] = match[4] || match[5] || "";

                                        // Strip excess characters from unquoted arguments
                                    } else if ( unquoted && rpseudo.test( unquoted ) &&
                                        // Get excess from tokenize (recursively)
                                        (excess = tokenize( unquoted, true )) &&
                                        // advance to the next closing parenthesis
                                        (excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

                                        // excess is a negative index
                                        match[0] = match[0].slice( 0, excess );
                                        match[2] = unquoted.slice( 0, excess );
                                    }

                                    // Return only captures needed by the pseudo filter method (type and argument)
                                    return match.slice( 0, 3 );
                                }
                            },

                            filter: {

                                "TAG": function( nodeNameSelector ) {
                                    var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
                                    return nodeNameSelector === "*" ?
                                        function() { return true; } :
                                        function( elem ) {
                                            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                                        };
                                },

                                "CLASS": function( className ) {
                                    var pattern = classCache[ className + " " ];

                                    return pattern ||
                                        (pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
                                        classCache( className, function( elem ) {
                                            return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
                                        });
                                },

                                "ATTR": function( name, operator, check ) {
                                    return function( elem ) {
                                        var result = Sizzle.attr( elem, name );

                                        if ( result == null ) {
                                            return operator === "!=";
                                        }
                                        if ( !operator ) {
                                            return true;
                                        }

                                        result += "";

                                        return operator === "=" ? result === check :
                                            operator === "!=" ? result !== check :
                                                operator === "^=" ? check && result.indexOf( check ) === 0 :
                                                    operator === "*=" ? check && result.indexOf( check ) > -1 :
                                                        operator === "$=" ? check && result.slice( -check.length ) === check :
                                                            operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
                                                                operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
                                                                    false;
                                    };
                                },

                                "CHILD": function( type, what, argument, first, last ) {
                                    var simple = type.slice( 0, 3 ) !== "nth",
                                        forward = type.slice( -4 ) !== "last",
                                        ofType = what === "of-type";

                                    return first === 1 && last === 0 ?

                                        // Shortcut for :nth-*(n)
                                        function( elem ) {
                                            return !!elem.parentNode;
                                        } :

                                        function( elem, context, xml ) {
                                            var cache, uniqueCache, outerCache, node, nodeIndex, start,
                                                dir = simple !== forward ? "nextSibling" : "previousSibling",
                                                parent = elem.parentNode,
                                                name = ofType && elem.nodeName.toLowerCase(),
                                                useCache = !xml && !ofType,
                                                diff = false;

                                            if ( parent ) {

                                                // :(first|last|only)-(child|of-type)
                                                if ( simple ) {
                                                    while ( dir ) {
                                                        node = elem;
                                                        while ( (node = node[ dir ]) ) {
                                                            if ( ofType ?
                                                                node.nodeName.toLowerCase() === name :
                                                                node.nodeType === 1 ) {

                                                                return false;
                                                            }
                                                        }
                                                        // Reverse direction for :only-* (if we haven't yet done so)
                                                        start = dir = type === "only" && !start && "nextSibling";
                                                    }
                                                    return true;
                                                }

                                                start = [ forward ? parent.firstChild : parent.lastChild ];

                                                // non-xml :nth-child(...) stores cache data on `parent`
                                                if ( forward && useCache ) {

                                                    // Seek `elem` from a previously-cached index

                                                    // ...in a gzip-friendly way
                                                    node = parent;
                                                    outerCache = node[ expando ] || (node[ expando ] = {});

                                                    // Support: IE <9 only
                                                    // Defend against cloned attroperties (jQuery gh-1709)
                                                    uniqueCache = outerCache[ node.uniqueID ] ||
                                                        (outerCache[ node.uniqueID ] = {});

                                                    cache = uniqueCache[ type ] || [];
                                                    nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
                                                    diff = nodeIndex && cache[ 2 ];
                                                    node = nodeIndex && parent.childNodes[ nodeIndex ];

                                                    while ( (node = ++nodeIndex && node && node[ dir ] ||

                                                        // Fallback to seeking `elem` from the start
                                                        (diff = nodeIndex = 0) || start.pop()) ) {

                                                        // When found, cache indexes on `parent` and break
                                                        if ( node.nodeType === 1 && ++diff && node === elem ) {
                                                            uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
                                                            break;
                                                        }
                                                    }

                                                } else {
                                                    // Use previously-cached element index if available
                                                    if ( useCache ) {
                                                        // ...in a gzip-friendly way
                                                        node = elem;
                                                        outerCache = node[ expando ] || (node[ expando ] = {});

                                                        // Support: IE <9 only
                                                        // Defend against cloned attroperties (jQuery gh-1709)
                                                        uniqueCache = outerCache[ node.uniqueID ] ||
                                                            (outerCache[ node.uniqueID ] = {});

                                                        cache = uniqueCache[ type ] || [];
                                                        nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
                                                        diff = nodeIndex;
                                                    }

                                                    // xml :nth-child(...)
                                                    // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                                    if ( diff === false ) {
                                                        // Use the same loop as above to seek `elem` from the start
                                                        while ( (node = ++nodeIndex && node && node[ dir ] ||
                                                            (diff = nodeIndex = 0) || start.pop()) ) {

                                                            if ( ( ofType ?
                                                                node.nodeName.toLowerCase() === name :
                                                                node.nodeType === 1 ) &&
                                                                ++diff ) {

                                                                // Cache the index of each encountered element
                                                                if ( useCache ) {
                                                                    outerCache = node[ expando ] || (node[ expando ] = {});

                                                                    // Support: IE <9 only
                                                                    // Defend against cloned attroperties (jQuery gh-1709)
                                                                    uniqueCache = outerCache[ node.uniqueID ] ||
                                                                        (outerCache[ node.uniqueID ] = {});

                                                                    uniqueCache[ type ] = [ dirruns, diff ];
                                                                }

                                                                if ( node === elem ) {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                // Incorporate the offset, then check against cycle size
                                                diff -= last;
                                                return diff === first || ( diff % first === 0 && diff / first >= 0 );
                                            }
                                        };
                                },

                                "PSEUDO": function( pseudo, argument ) {
                                    // pseudo-class names are case-insensitive
                                    // http://www.w3.org/TR/selectors/#pseudo-classes
                                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                                    // Remember that setFilters inherits from pseudos
                                    var args,
                                        fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
                                            Sizzle.error( "unsupported pseudo: " + pseudo );

                                    // The user may use createPseudo to indicate that
                                    // arguments are needed to create the filter function
                                    // just as Sizzle does
                                    if ( fn[ expando ] ) {
                                        return fn( argument );
                                    }

                                    // But maintain support for old signatures
                                    if ( fn.length > 1 ) {
                                        args = [ pseudo, pseudo, "", argument ];
                                        return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
                                            markFunction(function( seed, matches ) {
                                                var idx,
                                                    matched = fn( seed, argument ),
                                                    i = matched.length;
                                                while ( i-- ) {
                                                    idx = indexOf( seed, matched[i] );
                                                    seed[ idx ] = !( matches[ idx ] = matched[i] );
                                                }
                                            }) :
                                            function( elem ) {
                                                return fn( elem, 0, args );
                                            };
                                    }

                                    return fn;
                                }
                            },

                            pseudos: {
                                // Potentially complex pseudos
                                "not": markFunction(function( selector ) {
                                    // Trim the selector passed to compile
                                    // to avoid treating leading and trailing
                                    // spaces as combinators
                                    var input = [],
                                        results = [],
                                        matcher = compile( selector.replace( rtrim, "$1" ) );

                                    return matcher[ expando ] ?
                                        markFunction(function( seed, matches, context, xml ) {
                                            var elem,
                                                unmatched = matcher( seed, null, xml, [] ),
                                                i = seed.length;

                                            // Match elements unmatched by `matcher`
                                            while ( i-- ) {
                                                if ( (elem = unmatched[i]) ) {
                                                    seed[i] = !(matches[i] = elem);
                                                }
                                            }
                                        }) :
                                        function( elem, context, xml ) {
                                            input[0] = elem;
                                            matcher( input, null, xml, results );
                                            // Don't keep the element (issue #299)
                                            input[0] = null;
                                            return !results.pop();
                                        };
                                }),

                                "has": markFunction(function( selector ) {
                                    return function( elem ) {
                                        return Sizzle( selector, elem ).length > 0;
                                    };
                                }),

                                "contains": markFunction(function( text ) {
                                    text = text.replace( runescape, funescape );
                                    return function( elem ) {
                                        return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
                                    };
                                }),

                                // "Whether an element is represented by a :lang() selector
                                // is based solely on the element's language value
                                // being equal to the identifier C,
                                // or beginning with the identifier C immediately followed by "-".
                                // The matching of C against the element's language value is performed case-insensitively.
                                // The identifier C does not have to be a valid language name."
                                // http://www.w3.org/TR/selectors/#lang-pseudo
                                "lang": markFunction( function( lang ) {
                                    // lang value must be a valid identifier
                                    if ( !ridentifier.test(lang || "") ) {
                                        Sizzle.error( "unsupported lang: " + lang );
                                    }
                                    lang = lang.replace( runescape, funescape ).toLowerCase();
                                    return function( elem ) {
                                        var elemLang;
                                        do {
                                            if ( (elemLang = documentIsHTML ?
                                                elem.lang :
                                                elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

                                                elemLang = elemLang.toLowerCase();
                                                return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
                                            }
                                        } while ( (elem = elem.parentNode) && elem.nodeType === 1 );
                                        return false;
                                    };
                                }),

                                // Miscellaneous
                                "target": function( elem ) {
                                    var hash = window.location && window.location.hash;
                                    return hash && hash.slice( 1 ) === elem.id;
                                },

                                "root": function( elem ) {
                                    return elem === docElem;
                                },

                                "focus": function( elem ) {
                                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                                },

                                // Boolean properties
                                "enabled": createDisabledPseudo( false ),
                                "disabled": createDisabledPseudo( true ),

                                "checked": function( elem ) {
                                    // In CSS3, :checked should return both checked and selected elements
                                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                                    var nodeName = elem.nodeName.toLowerCase();
                                    return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
                                },

                                "selected": function( elem ) {
                                    // Accessing this property makes selected-by-default
                                    // options in Safari work properly
                                    if ( elem.parentNode ) {
                                        elem.parentNode.selectedIndex;
                                    }

                                    return elem.selected === true;
                                },

                                // Contents
                                "empty": function( elem ) {
                                    // http://www.w3.org/TR/selectors/#empty-pseudo
                                    // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                                    //   but not by others (comment: 8; processing instruction: 7; etc.)
                                    // nodeType < 6 works because attributes (2) do not appear as children
                                    for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                                        if ( elem.nodeType < 6 ) {
                                            return false;
                                        }
                                    }
                                    return true;
                                },

                                "parent": function( elem ) {
                                    return !Expr.pseudos["empty"]( elem );
                                },

                                // Element/input types
                                "header": function( elem ) {
                                    return rheader.test( elem.nodeName );
                                },

                                "input": function( elem ) {
                                    return rinputs.test( elem.nodeName );
                                },

                                "button": function( elem ) {
                                    var name = elem.nodeName.toLowerCase();
                                    return name === "input" && elem.type === "button" || name === "button";
                                },

                                "text": function( elem ) {
                                    var attr;
                                    return elem.nodeName.toLowerCase() === "input" &&
                                        elem.type === "text" &&

                                        // Support: IE<8
                                        // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                                        ( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
                                },

                                // Position-in-collection
                                "first": createPositionalPseudo(function() {
                                    return [ 0 ];
                                }),

                                "last": createPositionalPseudo(function( matchIndexes, length ) {
                                    return [ length - 1 ];
                                }),

                                "eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
                                    return [ argument < 0 ? argument + length : argument ];
                                }),

                                "even": createPositionalPseudo(function( matchIndexes, length ) {
                                    var i = 0;
                                    for ( ; i < length; i += 2 ) {
                                        matchIndexes.push( i );
                                    }
                                    return matchIndexes;
                                }),

                                "odd": createPositionalPseudo(function( matchIndexes, length ) {
                                    var i = 1;
                                    for ( ; i < length; i += 2 ) {
                                        matchIndexes.push( i );
                                    }
                                    return matchIndexes;
                                }),

                                "lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
                                    var i = argument < 0 ?
                                        argument + length :
                                        argument > length ?
                                            length :
                                            argument;
                                    for ( ; --i >= 0; ) {
                                        matchIndexes.push( i );
                                    }
                                    return matchIndexes;
                                }),

                                "gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
                                    var i = argument < 0 ? argument + length : argument;
                                    for ( ; ++i < length; ) {
                                        matchIndexes.push( i );
                                    }
                                    return matchIndexes;
                                })
                            }
                        };

                        Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
                        for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
                            Expr.pseudos[ i ] = createInputPseudo( i );
                        }
                        for ( i in { submit: true, reset: true } ) {
                            Expr.pseudos[ i ] = createButtonPseudo( i );
                        }

// Easy API for creating new setFilters
                        function setFilters() {}
                        setFilters.prototype = Expr.filters = Expr.pseudos;
                        Expr.setFilters = new setFilters();

                        tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
                            var matched, match, tokens, type,
                                soFar, groups, preFilters,
                                cached = tokenCache[ selector + " " ];

                            if ( cached ) {
                                return parseOnly ? 0 : cached.slice( 0 );
                            }

                            soFar = selector;
                            groups = [];
                            preFilters = Expr.preFilter;

                            while ( soFar ) {

                                // Comma and first run
                                if ( !matched || (match = rcomma.exec( soFar )) ) {
                                    if ( match ) {
                                        // Don't consume trailing commas as valid
                                        soFar = soFar.slice( match[0].length ) || soFar;
                                    }
                                    groups.push( (tokens = []) );
                                }

                                matched = false;

                                // Combinators
                                if ( (match = rcombinators.exec( soFar )) ) {
                                    matched = match.shift();
                                    tokens.push({
                                        value: matched,
                                        // Cast descendant combinators to space
                                        type: match[0].replace( rtrim, " " )
                                    });
                                    soFar = soFar.slice( matched.length );
                                }

                                // Filters
                                for ( type in Expr.filter ) {
                                    if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
                                        (match = preFilters[ type ]( match ))) ) {
                                        matched = match.shift();
                                        tokens.push({
                                            value: matched,
                                            type: type,
                                            matches: match
                                        });
                                        soFar = soFar.slice( matched.length );
                                    }
                                }

                                if ( !matched ) {
                                    break;
                                }
                            }

                            // Return the length of the invalid excess
                            // if we're just parsing
                            // Otherwise, throw an error or return tokens
                            return parseOnly ?
                                soFar.length :
                                soFar ?
                                    Sizzle.error( selector ) :
                                    // Cache the tokens
                                    tokenCache( selector, groups ).slice( 0 );
                        };

                        function toSelector( tokens ) {
                            var i = 0,
                                len = tokens.length,
                                selector = "";
                            for ( ; i < len; i++ ) {
                                selector += tokens[i].value;
                            }
                            return selector;
                        }

                        function addCombinator( matcher, combinator, base ) {
                            var dir = combinator.dir,
                                skip = combinator.next,
                                key = skip || dir,
                                checkNonElements = base && key === "parentNode",
                                doneName = done++;

                            return combinator.first ?
                                // Check against closest ancestor/preceding element
                                function( elem, context, xml ) {
                                    while ( (elem = elem[ dir ]) ) {
                                        if ( elem.nodeType === 1 || checkNonElements ) {
                                            return matcher( elem, context, xml );
                                        }
                                    }
                                    return false;
                                } :

                                // Check against all ancestor/preceding elements
                                function( elem, context, xml ) {
                                    var oldCache, uniqueCache, outerCache,
                                        newCache = [ dirruns, doneName ];

                                    // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                                    if ( xml ) {
                                        while ( (elem = elem[ dir ]) ) {
                                            if ( elem.nodeType === 1 || checkNonElements ) {
                                                if ( matcher( elem, context, xml ) ) {
                                                    return true;
                                                }
                                            }
                                        }
                                    } else {
                                        while ( (elem = elem[ dir ]) ) {
                                            if ( elem.nodeType === 1 || checkNonElements ) {
                                                outerCache = elem[ expando ] || (elem[ expando ] = {});

                                                // Support: IE <9 only
                                                // Defend against cloned attroperties (jQuery gh-1709)
                                                uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

                                                if ( skip && skip === elem.nodeName.toLowerCase() ) {
                                                    elem = elem[ dir ] || elem;
                                                } else if ( (oldCache = uniqueCache[ key ]) &&
                                                    oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

                                                    // Assign to newCache so results back-propagate to previous elements
                                                    return (newCache[ 2 ] = oldCache[ 2 ]);
                                                } else {
                                                    // Reuse newcache so results back-propagate to previous elements
                                                    uniqueCache[ key ] = newCache;

                                                    // A match means we're done; a fail means we have to keep checking
                                                    if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
                                                        return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return false;
                                };
                        }

                        function elementMatcher( matchers ) {
                            return matchers.length > 1 ?
                                function( elem, context, xml ) {
                                    var i = matchers.length;
                                    while ( i-- ) {
                                        if ( !matchers[i]( elem, context, xml ) ) {
                                            return false;
                                        }
                                    }
                                    return true;
                                } :
                                matchers[0];
                        }

                        function multipleContexts( selector, contexts, results ) {
                            var i = 0,
                                len = contexts.length;
                            for ( ; i < len; i++ ) {
                                Sizzle( selector, contexts[i], results );
                            }
                            return results;
                        }

                        function condense( unmatched, map, filter, context, xml ) {
                            var elem,
                                newUnmatched = [],
                                i = 0,
                                len = unmatched.length,
                                mapped = map != null;

                            for ( ; i < len; i++ ) {
                                if ( (elem = unmatched[i]) ) {
                                    if ( !filter || filter( elem, context, xml ) ) {
                                        newUnmatched.push( elem );
                                        if ( mapped ) {
                                            map.push( i );
                                        }
                                    }
                                }
                            }

                            return newUnmatched;
                        }

                        function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
                            if ( postFilter && !postFilter[ expando ] ) {
                                postFilter = setMatcher( postFilter );
                            }
                            if ( postFinder && !postFinder[ expando ] ) {
                                postFinder = setMatcher( postFinder, postSelector );
                            }
                            return markFunction(function( seed, results, context, xml ) {
                                var temp, i, elem,
                                    preMap = [],
                                    postMap = [],
                                    preexisting = results.length,

                                    // Get initial elements from seed or context
                                    elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

                                    // Prefilter to get matcher input, preserving a map for seed-results synchronization
                                    matcherIn = preFilter && ( seed || !selector ) ?
                                        condense( elems, preMap, preFilter, context, xml ) :
                                        elems,

                                    matcherOut = matcher ?
                                        // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                                        postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

                                            // ...intermediate processing is necessary
                                            [] :

                                            // ...otherwise use results directly
                                            results :
                                        matcherIn;

                                // Find primary matches
                                if ( matcher ) {
                                    matcher( matcherIn, matcherOut, context, xml );
                                }

                                // Apply postFilter
                                if ( postFilter ) {
                                    temp = condense( matcherOut, postMap );
                                    postFilter( temp, [], context, xml );

                                    // Un-match failing elements by moving them back to matcherIn
                                    i = temp.length;
                                    while ( i-- ) {
                                        if ( (elem = temp[i]) ) {
                                            matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
                                        }
                                    }
                                }

                                if ( seed ) {
                                    if ( postFinder || preFilter ) {
                                        if ( postFinder ) {
                                            // Get the final matcherOut by condensing this intermediate into postFinder contexts
                                            temp = [];
                                            i = matcherOut.length;
                                            while ( i-- ) {
                                                if ( (elem = matcherOut[i]) ) {
                                                    // Restore matcherIn since elem is not yet a final match
                                                    temp.push( (matcherIn[i] = elem) );
                                                }
                                            }
                                            postFinder( null, (matcherOut = []), temp, xml );
                                        }

                                        // Move matched elements from seed to results to keep them synchronized
                                        i = matcherOut.length;
                                        while ( i-- ) {
                                            if ( (elem = matcherOut[i]) &&
                                                (temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

                                                seed[temp] = !(results[temp] = elem);
                                            }
                                        }
                                    }

                                    // Add elements to results, through postFinder if defined
                                } else {
                                    matcherOut = condense(
                                        matcherOut === results ?
                                            matcherOut.splice( preexisting, matcherOut.length ) :
                                            matcherOut
                                    );
                                    if ( postFinder ) {
                                        postFinder( null, results, matcherOut, xml );
                                    } else {
                                        push.apply( results, matcherOut );
                                    }
                                }
                            });
                        }

                        function matcherFromTokens( tokens ) {
                            var checkContext, matcher, j,
                                len = tokens.length,
                                leadingRelative = Expr.relative[ tokens[0].type ],
                                implicitRelative = leadingRelative || Expr.relative[" "],
                                i = leadingRelative ? 1 : 0,

                                // The foundational matcher ensures that elements are reachable from top-level context(s)
                                matchContext = addCombinator( function( elem ) {
                                    return elem === checkContext;
                                }, implicitRelative, true ),
                                matchAnyContext = addCombinator( function( elem ) {
                                    return indexOf( checkContext, elem ) > -1;
                                }, implicitRelative, true ),
                                matchers = [ function( elem, context, xml ) {
                                    var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
                                        (checkContext = context).nodeType ?
                                            matchContext( elem, context, xml ) :
                                            matchAnyContext( elem, context, xml ) );
                                    // Avoid hanging onto element (issue #299)
                                    checkContext = null;
                                    return ret;
                                } ];

                            for ( ; i < len; i++ ) {
                                if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
                                    matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
                                } else {
                                    matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

                                    // Return special upon seeing a positional matcher
                                    if ( matcher[ expando ] ) {
                                        // Find the next relative operator (if any) for proper handling
                                        j = ++i;
                                        for ( ; j < len; j++ ) {
                                            if ( Expr.relative[ tokens[j].type ] ) {
                                                break;
                                            }
                                        }
                                        return setMatcher(
                                            i > 1 && elementMatcher( matchers ),
                                            i > 1 && toSelector(
                                            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                                            tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
                                            ).replace( rtrim, "$1" ),
                                            matcher,
                                            i < j && matcherFromTokens( tokens.slice( i, j ) ),
                                            j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
                                            j < len && toSelector( tokens )
                                        );
                                    }
                                    matchers.push( matcher );
                                }
                            }

                            return elementMatcher( matchers );
                        }

                        function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
                            var bySet = setMatchers.length > 0,
                                byElement = elementMatchers.length > 0,
                                superMatcher = function( seed, context, xml, results, outermost ) {
                                    var elem, j, matcher,
                                        matchedCount = 0,
                                        i = "0",
                                        unmatched = seed && [],
                                        setMatched = [],
                                        contextBackup = outermostContext,
                                        // We must always have either seed elements or outermost context
                                        elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
                                        // Use integer dirruns iff this is the outermost matcher
                                        dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
                                        len = elems.length;

                                    if ( outermost ) {
                                        outermostContext = context === document || context || outermost;
                                    }

                                    // Add elements passing elementMatchers directly to results
                                    // Support: IE<9, Safari
                                    // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                                    for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
                                        if ( byElement && elem ) {
                                            j = 0;
                                            if ( !context && elem.ownerDocument !== document ) {
                                                setDocument( elem );
                                                xml = !documentIsHTML;
                                            }
                                            while ( (matcher = elementMatchers[j++]) ) {
                                                if ( matcher( elem, context || document, xml) ) {
                                                    results.push( elem );
                                                    break;
                                                }
                                            }
                                            if ( outermost ) {
                                                dirruns = dirrunsUnique;
                                            }
                                        }

                                        // Track unmatched elements for set filters
                                        if ( bySet ) {
                                            // They will have gone through all possible matchers
                                            if ( (elem = !matcher && elem) ) {
                                                matchedCount--;
                                            }

                                            // Lengthen the array for every element, matched or not
                                            if ( seed ) {
                                                unmatched.push( elem );
                                            }
                                        }
                                    }

                                    // `i` is now the count of elements visited above, and adding it to `matchedCount`
                                    // makes the latter nonnegative.
                                    matchedCount += i;

                                    // Apply set filters to unmatched elements
                                    // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                                    // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                                    // no element matchers and no seed.
                                    // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                                    // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                                    // numerically zero.
                                    if ( bySet && i !== matchedCount ) {
                                        j = 0;
                                        while ( (matcher = setMatchers[j++]) ) {
                                            matcher( unmatched, setMatched, context, xml );
                                        }

                                        if ( seed ) {
                                            // Reintegrate element matches to eliminate the need for sorting
                                            if ( matchedCount > 0 ) {
                                                while ( i-- ) {
                                                    if ( !(unmatched[i] || setMatched[i]) ) {
                                                        setMatched[i] = pop.call( results );
                                                    }
                                                }
                                            }

                                            // Discard index placeholder values to get only actual matches
                                            setMatched = condense( setMatched );
                                        }

                                        // Add matches to results
                                        push.apply( results, setMatched );

                                        // Seedless set matches succeeding multiple successful matchers stipulate sorting
                                        if ( outermost && !seed && setMatched.length > 0 &&
                                            ( matchedCount + setMatchers.length ) > 1 ) {

                                            Sizzle.uniqueSort( results );
                                        }
                                    }

                                    // Override manipulation of globals by nested matchers
                                    if ( outermost ) {
                                        dirruns = dirrunsUnique;
                                        outermostContext = contextBackup;
                                    }

                                    return unmatched;
                                };

                            return bySet ?
                                markFunction( superMatcher ) :
                                superMatcher;
                        }

                        compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
                            var i,
                                setMatchers = [],
                                elementMatchers = [],
                                cached = compilerCache[ selector + " " ];

                            if ( !cached ) {
                                // Generate a function of recursive functions that can be used to check each element
                                if ( !match ) {
                                    match = tokenize( selector );
                                }
                                i = match.length;
                                while ( i-- ) {
                                    cached = matcherFromTokens( match[i] );
                                    if ( cached[ expando ] ) {
                                        setMatchers.push( cached );
                                    } else {
                                        elementMatchers.push( cached );
                                    }
                                }

                                // Cache the compiled function
                                cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

                                // Save selector and tokenization
                                cached.selector = selector;
                            }
                            return cached;
                        };

                        /**
                         * A low-level selection function that works with Sizzle's compiled
                         *  selector functions
                         * @param {String|Function} selector A selector or a pre-compiled
                         *  selector function built with Sizzle.compile
                         * @param {Element} context
                         * @param {Array} [results]
                         * @param {Array} [seed] A set of elements to match against
                         */
                        select = Sizzle.select = function( selector, context, results, seed ) {
                            var i, tokens, token, type, find,
                                compiled = typeof selector === "function" && selector,
                                match = !seed && tokenize( (selector = compiled.selector || selector) );

                            results = results || [];

                            // Try to minimize operations if there is only one selector in the list and no seed
                            // (the latter of which guarantees us context)
                            if ( match.length === 1 ) {

                                // Reduce context if the leading compound selector is an ID
                                tokens = match[0] = match[0].slice( 0 );
                                if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                                    context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

                                    context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
                                    if ( !context ) {
                                        return results;

                                        // Precompiled matchers will still verify ancestry, so step up a level
                                    } else if ( compiled ) {
                                        context = context.parentNode;
                                    }

                                    selector = selector.slice( tokens.shift().value.length );
                                }

                                // Fetch a seed set for right-to-left matching
                                i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
                                while ( i-- ) {
                                    token = tokens[i];

                                    // Abort if we hit a combinator
                                    if ( Expr.relative[ (type = token.type) ] ) {
                                        break;
                                    }
                                    if ( (find = Expr.find[ type ]) ) {
                                        // Search, expanding context for leading sibling combinators
                                        if ( (seed = find(
                                            token.matches[0].replace( runescape, funescape ),
                                            rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
                                        )) ) {

                                            // If seed is empty or no tokens remain, we can return early
                                            tokens.splice( i, 1 );
                                            selector = seed.length && toSelector( tokens );
                                            if ( !selector ) {
                                                push.apply( results, seed );
                                                return results;
                                            }

                                            break;
                                        }
                                    }
                                }
                            }

                            // Compile and execute a filtering function if one is not provided
                            // Provide `match` to avoid retokenization if we modified the selector above
                            ( compiled || compile( selector, match ) )(
                                seed,
                                context,
                                !documentIsHTML,
                                results,
                                !context || rsibling.test( selector ) && testContext( context.parentNode ) || context
                            );
                            return results;
                        };

// One-time assignments

// Sort stability
                        support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
                        support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
                        setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
                        support.sortDetached = assert(function( el ) {
                            // Should return 1, but returns 4 (following)
                            return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
                        });

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
                        if ( !assert(function( el ) {
                            el.innerHTML = "<a href='#'></a>";
                            return el.firstChild.getAttribute("href") === "#" ;
                        }) ) {
                            addHandle( "type|href|height|width", function( elem, name, isXML ) {
                                if ( !isXML ) {
                                    return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
                                }
                            });
                        }

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
                        if ( !support.attributes || !assert(function( el ) {
                            el.innerHTML = "<input/>";
                            el.firstChild.setAttribute( "value", "" );
                            return el.firstChild.getAttribute( "value" ) === "";
                        }) ) {
                            addHandle( "value", function( elem, name, isXML ) {
                                if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
                                    return elem.defaultValue;
                                }
                            });
                        }

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
                        if ( !assert(function( el ) {
                            return el.getAttribute("disabled") == null;
                        }) ) {
                            addHandle( booleans, function( elem, name, isXML ) {
                                var val;
                                if ( !isXML ) {
                                    return elem[ name ] === true ? name.toLowerCase() :
                                        (val = elem.getAttributeNode( name )) && val.specified ?
                                            val.value :
                                            null;
                                }
                            });
                        }

                        return Sizzle;

                    })( window );



                jQuery.find = Sizzle;
                jQuery.expr = Sizzle.selectors;

// Deprecated
                jQuery.expr[ ":" ] = jQuery.expr.pseudos;
                jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
                jQuery.text = Sizzle.getText;
                jQuery.isXMLDoc = Sizzle.isXML;
                jQuery.contains = Sizzle.contains;
                jQuery.escapeSelector = Sizzle.escape;




                var dir = function( elem, dir, until ) {
                    var matched = [],
                        truncate = until !== undefined;

                    while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
                        if ( elem.nodeType === 1 ) {
                            if ( truncate && jQuery( elem ).is( until ) ) {
                                break;
                            }
                            matched.push( elem );
                        }
                    }
                    return matched;
                };


                var siblings = function( n, elem ) {
                    var matched = [];

                    for ( ; n; n = n.nextSibling ) {
                        if ( n.nodeType === 1 && n !== elem ) {
                            matched.push( n );
                        }
                    }

                    return matched;
                };


                var rneedsContext = jQuery.expr.match.needsContext;



                function nodeName( elem, name ) {

                    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

                };
                var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
                function winnow( elements, qualifier, not ) {
                    if ( isFunction( qualifier ) ) {
                        return jQuery.grep( elements, function( elem, i ) {
                            return !!qualifier.call( elem, i, elem ) !== not;
                        } );
                    }

                    // Single element
                    if ( qualifier.nodeType ) {
                        return jQuery.grep( elements, function( elem ) {
                            return ( elem === qualifier ) !== not;
                        } );
                    }

                    // Arraylike of elements (jQuery, arguments, Array)
                    if ( typeof qualifier !== "string" ) {
                        return jQuery.grep( elements, function( elem ) {
                            return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
                        } );
                    }

                    // Filtered directly for both simple and complex selectors
                    return jQuery.filter( qualifier, elements, not );
                }

                jQuery.filter = function( expr, elems, not ) {
                    var elem = elems[ 0 ];

                    if ( not ) {
                        expr = ":not(" + expr + ")";
                    }

                    if ( elems.length === 1 && elem.nodeType === 1 ) {
                        return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
                    }

                    return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
                        return elem.nodeType === 1;
                    } ) );
                };

                jQuery.fn.extend( {
                    find: function( selector ) {
                        var i, ret,
                            len = this.length,
                            self = this;

                        if ( typeof selector !== "string" ) {
                            return this.pushStack( jQuery( selector ).filter( function() {
                                for ( i = 0; i < len; i++ ) {
                                    if ( jQuery.contains( self[ i ], this ) ) {
                                        return true;
                                    }
                                }
                            } ) );
                        }

                        ret = this.pushStack( [] );

                        for ( i = 0; i < len; i++ ) {
                            jQuery.find( selector, self[ i ], ret );
                        }

                        return len > 1 ? jQuery.uniqueSort( ret ) : ret;
                    },
                    filter: function( selector ) {
                        return this.pushStack( winnow( this, selector || [], false ) );
                    },
                    not: function( selector ) {
                        return this.pushStack( winnow( this, selector || [], true ) );
                    },
                    is: function( selector ) {
                        return !!winnow(
                            this,

                            // If this is a positional/relative selector, check membership in the returned set
                            // so $("p:first").is("p:last") won't return true for a doc with two "p".
                            typeof selector === "string" && rneedsContext.test( selector ) ?
                                jQuery( selector ) :
                                selector || [],
                            false
                        ).length;
                    }
                } );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
                var rootjQuery,

                    // A simple way to check for HTML strings
                    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
                    // Strict HTML recognition (#11290: must start with <)
                    // Shortcut simple #id case for speed
                    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

                    init = jQuery.fn.init = function( selector, context, root ) {
                        var match, elem;

                        // HANDLE: $(""), $(null), $(undefined), $(false)
                        if ( !selector ) {
                            return this;
                        }

                        // Method init() accepts an alternate rootjQuery
                        // so migrate can support jQuery.sub (gh-2101)
                        root = root || rootjQuery;

                        // Handle HTML strings
                        if ( typeof selector === "string" ) {
                            if ( selector[ 0 ] === "<" &&
                                selector[ selector.length - 1 ] === ">" &&
                                selector.length >= 3 ) {

                                // Assume that strings that start and end with <> are HTML and skip the regex check
                                match = [ null, selector, null ];

                            } else {
                                match = rquickExpr.exec( selector );
                            }

                            // Match html or make sure no context is specified for #id
                            if ( match && ( match[ 1 ] || !context ) ) {

                                // HANDLE: $(html) -> $(array)
                                if ( match[ 1 ] ) {
                                    context = context instanceof jQuery ? context[ 0 ] : context;

                                    // Option to run scripts is true for back-compat
                                    // Intentionally let the error be thrown if parseHTML is not present
                                    jQuery.merge( this, jQuery.parseHTML(
                                        match[ 1 ],
                                        context && context.nodeType ? context.ownerDocument || context : document,
                                        true
                                    ) );

                                    // HANDLE: $(html, props)
                                    if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
                                        for ( match in context ) {

                                            // Properties of context are called as methods if possible
                                            if ( isFunction( this[ match ] ) ) {
                                                this[ match ]( context[ match ] );

                                                // ...and otherwise set as attributes
                                            } else {
                                                this.attr( match, context[ match ] );
                                            }
                                        }
                                    }

                                    return this;

                                    // HANDLE: $(#id)
                                } else {
                                    elem = document.getElementById( match[ 2 ] );

                                    if ( elem ) {

                                        // Inject the element directly into the jQuery object
                                        this[ 0 ] = elem;
                                        this.length = 1;
                                    }
                                    return this;
                                }

                                // HANDLE: $(expr, $(...))
                            } else if ( !context || context.jquery ) {
                                return ( context || root ).find( selector );

                                // HANDLE: $(expr, context)
                                // (which is just equivalent to: $(context).find(expr)
                            } else {
                                return this.constructor( context ).find( selector );
                            }

                            // HANDLE: $(DOMElement)
                        } else if ( selector.nodeType ) {
                            this[ 0 ] = selector;
                            this.length = 1;
                            return this;

                            // HANDLE: $(function)
                            // Shortcut for document ready
                        } else if ( isFunction( selector ) ) {
                            return root.ready !== undefined ?
                                root.ready( selector ) :

                                // Execute immediately if ready is not present
                                selector( jQuery );
                        }

                        return jQuery.makeArray( selector, this );
                    };

// Give the init function the jQuery prototype for later instantiation
                init.prototype = jQuery.fn;

// Initialize central reference
                rootjQuery = jQuery( document );


                var rparentsprev = /^(?:parents|prev(?:Until|All))/,

                    // Methods guaranteed to produce a unique set when starting from a unique set
                    guaranteedUnique = {
                        children: true,
                        contents: true,
                        next: true,
                        prev: true
                    };

                jQuery.fn.extend( {
                    has: function( target ) {
                        var targets = jQuery( target, this ),
                            l = targets.length;

                        return this.filter( function() {
                            var i = 0;
                            for ( ; i < l; i++ ) {
                                if ( jQuery.contains( this, targets[ i ] ) ) {
                                    return true;
                                }
                            }
                        } );
                    },

                    closest: function( selectors, context ) {
                        var cur,
                            i = 0,
                            l = this.length,
                            matched = [],
                            targets = typeof selectors !== "string" && jQuery( selectors );

                        // Positional selectors never match, since there's no _selection_ context
                        if ( !rneedsContext.test( selectors ) ) {
                            for ( ; i < l; i++ ) {
                                for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

                                    // Always skip document fragments
                                    if ( cur.nodeType < 11 && ( targets ?
                                        targets.index( cur ) > -1 :

                                        // Don't pass non-elements to Sizzle
                                        cur.nodeType === 1 &&
                                        jQuery.find.matchesSelector( cur, selectors ) ) ) {

                                        matched.push( cur );
                                        break;
                                    }
                                }
                            }
                        }

                        return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
                    },

                    // Determine the position of an element within the set
                    index: function( elem ) {

                        // No argument, return index in parent
                        if ( !elem ) {
                            return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
                        }

                        // Index in selector
                        if ( typeof elem === "string" ) {
                            return indexOf.call( jQuery( elem ), this[ 0 ] );
                        }

                        // Locate the position of the desired element
                        return indexOf.call( this,

                            // If it receives a jQuery object, the first element is used
                            elem.jquery ? elem[ 0 ] : elem
                        );
                    },

                    add: function( selector, context ) {
                        return this.pushStack(
                            jQuery.uniqueSort(
                                jQuery.merge( this.get(), jQuery( selector, context ) )
                            )
                        );
                    },

                    addBack: function( selector ) {
                        return this.add( selector == null ?
                            this.prevObject : this.prevObject.filter( selector )
                        );
                    }
                } );

                function sibling( cur, dir ) {
                    while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
                    return cur;
                }

                jQuery.each( {
                    parent: function( elem ) {
                        var parent = elem.parentNode;
                        return parent && parent.nodeType !== 11 ? parent : null;
                    },
                    parents: function( elem ) {
                        return dir( elem, "parentNode" );
                    },
                    parentsUntil: function( elem, i, until ) {
                        return dir( elem, "parentNode", until );
                    },
                    next: function( elem ) {
                        return sibling( elem, "nextSibling" );
                    },
                    prev: function( elem ) {
                        return sibling( elem, "previousSibling" );
                    },
                    nextAll: function( elem ) {
                        return dir( elem, "nextSibling" );
                    },
                    prevAll: function( elem ) {
                        return dir( elem, "previousSibling" );
                    },
                    nextUntil: function( elem, i, until ) {
                        return dir( elem, "nextSibling", until );
                    },
                    prevUntil: function( elem, i, until ) {
                        return dir( elem, "previousSibling", until );
                    },
                    siblings: function( elem ) {
                        return siblings( ( elem.parentNode || {} ).firstChild, elem );
                    },
                    children: function( elem ) {
                        return siblings( elem.firstChild );
                    },
                    contents: function( elem ) {
                        if ( typeof elem.contentDocument !== "undefined" ) {
                            return elem.contentDocument;
                        }

                        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
                        // Treat the template element as a regular one in browsers that
                        // don't support it.
                        if ( nodeName( elem, "template" ) ) {
                            elem = elem.content || elem;
                        }

                        return jQuery.merge( [], elem.childNodes );
                    }
                }, function( name, fn ) {
                    jQuery.fn[ name ] = function( until, selector ) {
                        var matched = jQuery.map( this, fn, until );

                        if ( name.slice( -5 ) !== "Until" ) {
                            selector = until;
                        }

                        if ( selector && typeof selector === "string" ) {
                            matched = jQuery.filter( selector, matched );
                        }

                        if ( this.length > 1 ) {

                            // Remove duplicates
                            if ( !guaranteedUnique[ name ] ) {
                                jQuery.uniqueSort( matched );
                            }

                            // Reverse order for parents* and prev-derivatives
                            if ( rparentsprev.test( name ) ) {
                                matched.reverse();
                            }
                        }

                        return this.pushStack( matched );
                    };
                } );
                var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
                function createOptions( options ) {
                    var object = {};
                    jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
                        object[ flag ] = true;
                    } );
                    return object;
                }

                /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
                jQuery.Callbacks = function( options ) {

                    // Convert options from String-formatted to Object-formatted if needed
                    // (we check in cache first)
                    options = typeof options === "string" ?
                        createOptions( options ) :
                        jQuery.extend( {}, options );

                    var // Flag to know if list is currently firing
                        firing,

                        // Last fire value for non-forgettable lists
                        memory,

                        // Flag to know if list was already fired
                        fired,

                        // Flag to prevent firing
                        locked,

                        // Actual callback list
                        list = [],

                        // Queue of execution data for repeatable lists
                        queue = [],

                        // Index of currently firing callback (modified by add/remove as needed)
                        firingIndex = -1,

                        // Fire callbacks
                        fire = function() {

                            // Enforce single-firing
                            locked = locked || options.once;

                            // Execute callbacks for all pending executions,
                            // respecting firingIndex overrides and runtime changes
                            fired = firing = true;
                            for ( ; queue.length; firingIndex = -1 ) {
                                memory = queue.shift();
                                while ( ++firingIndex < list.length ) {

                                    // Run callback and check for early termination
                                    if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
                                        options.stopOnFalse ) {

                                        // Jump to end and forget the data so .add doesn't re-fire
                                        firingIndex = list.length;
                                        memory = false;
                                    }
                                }
                            }

                            // Forget the data if we're done with it
                            if ( !options.memory ) {
                                memory = false;
                            }

                            firing = false;

                            // Clean up if we're done firing for good
                            if ( locked ) {

                                // Keep an empty list if we have data for future add calls
                                if ( memory ) {
                                    list = [];

                                    // Otherwise, this object is spent
                                } else {
                                    list = "";
                                }
                            }
                        },

                        // Actual Callbacks object
                        self = {

                            // Add a callback or a collection of callbacks to the list
                            add: function() {
                                if ( list ) {

                                    // If we have memory from a past run, we should fire after adding
                                    if ( memory && !firing ) {
                                        firingIndex = list.length - 1;
                                        queue.push( memory );
                                    }

                                    ( function add( args ) {
                                        jQuery.each( args, function( _, arg ) {
                                            if ( isFunction( arg ) ) {
                                                if ( !options.unique || !self.has( arg ) ) {
                                                    list.push( arg );
                                                }
                                            } else if ( arg && arg.length && toType( arg ) !== "string" ) {

                                                // Inspect recursively
                                                add( arg );
                                            }
                                        } );
                                    } )( arguments );

                                    if ( memory && !firing ) {
                                        fire();
                                    }
                                }
                                return this;
                            },

                            // Remove a callback from the list
                            remove: function() {
                                jQuery.each( arguments, function( _, arg ) {
                                    var index;
                                    while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                                        list.splice( index, 1 );

                                        // Handle firing indexes
                                        if ( index <= firingIndex ) {
                                            firingIndex--;
                                        }
                                    }
                                } );
                                return this;
                            },

                            // Check if a given callback is in the list.
                            // If no argument is given, return whether or not list has callbacks attached.
                            has: function( fn ) {
                                return fn ?
                                    jQuery.inArray( fn, list ) > -1 :
                                    list.length > 0;
                            },

                            // Remove all callbacks from the list
                            empty: function() {
                                if ( list ) {
                                    list = [];
                                }
                                return this;
                            },

                            // Disable .fire and .add
                            // Abort any current/pending executions
                            // Clear all callbacks and values
                            disable: function() {
                                locked = queue = [];
                                list = memory = "";
                                return this;
                            },
                            disabled: function() {
                                return !list;
                            },

                            // Disable .fire
                            // Also disable .add unless we have memory (since it would have no effect)
                            // Abort any pending executions
                            lock: function() {
                                locked = queue = [];
                                if ( !memory && !firing ) {
                                    list = memory = "";
                                }
                                return this;
                            },
                            locked: function() {
                                return !!locked;
                            },

                            // Call all callbacks with the given context and arguments
                            fireWith: function( context, args ) {
                                if ( !locked ) {
                                    args = args || [];
                                    args = [ context, args.slice ? args.slice() : args ];
                                    queue.push( args );
                                    if ( !firing ) {
                                        fire();
                                    }
                                }
                                return this;
                            },

                            // Call all the callbacks with the given arguments
                            fire: function() {
                                self.fireWith( this, arguments );
                                return this;
                            },

                            // To know if the callbacks have already been called at least once
                            fired: function() {
                                return !!fired;
                            }
                        };

                    return self;
                };


                function Identity( v ) {
                    return v;
                }
                function Thrower( ex ) {
                    throw ex;
                }

                function adoptValue( value, resolve, reject, noValue ) {
                    var method;

                    try {

                        // Check for promise aspect first to privilege synchronous behavior
                        if ( value && isFunction( ( method = value.promise ) ) ) {
                            method.call( value ).done( resolve ).fail( reject );

                            // Other thenables
                        } else if ( value && isFunction( ( method = value.then ) ) ) {
                            method.call( value, resolve, reject );

                            // Other non-thenables
                        } else {

                            // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
                            // * false: [ value ].slice( 0 ) => resolve( value )
                            // * true: [ value ].slice( 1 ) => resolve()
                            resolve.apply( undefined, [ value ].slice( noValue ) );
                        }

                        // For Promises/A+, convert exceptions into rejections
                        // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
                        // Deferred#then to conditionally suppress rejection.
                    } catch ( value ) {

                        // Support: Android 4.0 only
                        // Strict mode functions invoked without .call/.apply get global-object context
                        reject.apply( undefined, [ value ] );
                    }
                }

                jQuery.extend( {

                    Deferred: function( func ) {
                        var tuples = [

                                // action, add listener, callbacks,
                                // ... .then handlers, argument index, [final state]
                                [ "notify", "progress", jQuery.Callbacks( "memory" ),
                                    jQuery.Callbacks( "memory" ), 2 ],
                                [ "resolve", "done", jQuery.Callbacks( "once memory" ),
                                    jQuery.Callbacks( "once memory" ), 0, "resolved" ],
                                [ "reject", "fail", jQuery.Callbacks( "once memory" ),
                                    jQuery.Callbacks( "once memory" ), 1, "rejected" ]
                            ],
                            state = "pending",
                            promise = {
                                state: function() {
                                    return state;
                                },
                                always: function() {
                                    deferred.done( arguments ).fail( arguments );
                                    return this;
                                },
                                "catch": function( fn ) {
                                    return promise.then( null, fn );
                                },

                                // Keep pipe for back-compat
                                pipe: function( /* fnDone, fnFail, fnProgress */ ) {
                                    var fns = arguments;

                                    return jQuery.Deferred( function( newDefer ) {
                                        jQuery.each( tuples, function( i, tuple ) {

                                            // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                                            var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

                                            // deferred.progress(function() { bind to newDefer or newDefer.notify })
                                            // deferred.done(function() { bind to newDefer or newDefer.resolve })
                                            // deferred.fail(function() { bind to newDefer or newDefer.reject })
                                            deferred[ tuple[ 1 ] ]( function() {
                                                var returned = fn && fn.apply( this, arguments );
                                                if ( returned && isFunction( returned.promise ) ) {
                                                    returned.promise()
                                                        .progress( newDefer.notify )
                                                        .done( newDefer.resolve )
                                                        .fail( newDefer.reject );
                                                } else {
                                                    newDefer[ tuple[ 0 ] + "With" ](
                                                        this,
                                                        fn ? [ returned ] : arguments
                                                    );
                                                }
                                            } );
                                        } );
                                        fns = null;
                                    } ).promise();
                                },
                                then: function( onFulfilled, onRejected, onProgress ) {
                                    var maxDepth = 0;
                                    function resolve( depth, deferred, handler, special ) {
                                        return function() {
                                            var that = this,
                                                args = arguments,
                                                mightThrow = function() {
                                                    var returned, then;

                                                    // Support: Promises/A+ section 2.3.3.3.3
                                                    // https://promisesaplus.com/#point-59
                                                    // Ignore double-resolution attempts
                                                    if ( depth < maxDepth ) {
                                                        return;
                                                    }

                                                    returned = handler.apply( that, args );

                                                    // Support: Promises/A+ section 2.3.1
                                                    // https://promisesaplus.com/#point-48
                                                    if ( returned === deferred.promise() ) {
                                                        throw new TypeError( "Thenable self-resolution" );
                                                    }

                                                    // Support: Promises/A+ sections 2.3.3.1, 3.5
                                                    // https://promisesaplus.com/#point-54
                                                    // https://promisesaplus.com/#point-75
                                                    // Retrieve `then` only once
                                                    then = returned &&

                                                        // Support: Promises/A+ section 2.3.4
                                                        // https://promisesaplus.com/#point-64
                                                        // Only check objects and functions for thenability
                                                        ( typeof returned === "object" ||
                                                            typeof returned === "function" ) &&
                                                        returned.then;

                                                    // Handle a returned thenable
                                                    if ( isFunction( then ) ) {

                                                        // Special processors (notify) just wait for resolution
                                                        if ( special ) {
                                                            then.call(
                                                                returned,
                                                                resolve( maxDepth, deferred, Identity, special ),
                                                                resolve( maxDepth, deferred, Thrower, special )
                                                            );

                                                            // Normal processors (resolve) also hook into progress
                                                        } else {

                                                            // ...and disregard older resolution values
                                                            maxDepth++;

                                                            then.call(
                                                                returned,
                                                                resolve( maxDepth, deferred, Identity, special ),
                                                                resolve( maxDepth, deferred, Thrower, special ),
                                                                resolve( maxDepth, deferred, Identity,
                                                                    deferred.notifyWith )
                                                            );
                                                        }

                                                        // Handle all other returned values
                                                    } else {

                                                        // Only substitute handlers pass on context
                                                        // and multiple values (non-spec behavior)
                                                        if ( handler !== Identity ) {
                                                            that = undefined;
                                                            args = [ returned ];
                                                        }

                                                        // Process the value(s)
                                                        // Default process is resolve
                                                        ( special || deferred.resolveWith )( that, args );
                                                    }
                                                },

                                                // Only normal processors (resolve) catch and reject exceptions
                                                process = special ?
                                                    mightThrow :
                                                    function() {
                                                        try {
                                                            mightThrow();
                                                        } catch ( e ) {

                                                            if ( jQuery.Deferred.exceptionHook ) {
                                                                jQuery.Deferred.exceptionHook( e,
                                                                    process.stackTrace );
                                                            }

                                                            // Support: Promises/A+ section 2.3.3.3.4.1
                                                            // https://promisesaplus.com/#point-61
                                                            // Ignore post-resolution exceptions
                                                            if ( depth + 1 >= maxDepth ) {

                                                                // Only substitute handlers pass on context
                                                                // and multiple values (non-spec behavior)
                                                                if ( handler !== Thrower ) {
                                                                    that = undefined;
                                                                    args = [ e ];
                                                                }

                                                                deferred.rejectWith( that, args );
                                                            }
                                                        }
                                                    };

                                            // Support: Promises/A+ section 2.3.3.3.1
                                            // https://promisesaplus.com/#point-57
                                            // Re-resolve promises immediately to dodge false rejection from
                                            // subsequent errors
                                            if ( depth ) {
                                                process();
                                            } else {

                                                // Call an optional hook to record the stack, in case of exception
                                                // since it's otherwise lost when execution goes async
                                                if ( jQuery.Deferred.getStackHook ) {
                                                    process.stackTrace = jQuery.Deferred.getStackHook();
                                                }
                                                window.setTimeout( process );
                                            }
                                        };
                                    }

                                    return jQuery.Deferred( function( newDefer ) {

                                        // progress_handlers.add( ... )
                                        tuples[ 0 ][ 3 ].add(
                                            resolve(
                                                0,
                                                newDefer,
                                                isFunction( onProgress ) ?
                                                    onProgress :
                                                    Identity,
                                                newDefer.notifyWith
                                            )
                                        );

                                        // fulfilled_handlers.add( ... )
                                        tuples[ 1 ][ 3 ].add(
                                            resolve(
                                                0,
                                                newDefer,
                                                isFunction( onFulfilled ) ?
                                                    onFulfilled :
                                                    Identity
                                            )
                                        );

                                        // rejected_handlers.add( ... )
                                        tuples[ 2 ][ 3 ].add(
                                            resolve(
                                                0,
                                                newDefer,
                                                isFunction( onRejected ) ?
                                                    onRejected :
                                                    Thrower
                                            )
                                        );
                                    } ).promise();
                                },

                                // Get a promise for this deferred
                                // If obj is provided, the promise aspect is added to the object
                                promise: function( obj ) {
                                    return obj != null ? jQuery.extend( obj, promise ) : promise;
                                }
                            },
                            deferred = {};

                        // Add list-specific methods
                        jQuery.each( tuples, function( i, tuple ) {
                            var list = tuple[ 2 ],
                                stateString = tuple[ 5 ];

                            // promise.progress = list.add
                            // promise.done = list.add
                            // promise.fail = list.add
                            promise[ tuple[ 1 ] ] = list.add;

                            // Handle state
                            if ( stateString ) {
                                list.add(
                                    function() {

                                        // state = "resolved" (i.e., fulfilled)
                                        // state = "rejected"
                                        state = stateString;
                                    },

                                    // rejected_callbacks.disable
                                    // fulfilled_callbacks.disable
                                    tuples[ 3 - i ][ 2 ].disable,

                                    // rejected_handlers.disable
                                    // fulfilled_handlers.disable
                                    tuples[ 3 - i ][ 3 ].disable,

                                    // progress_callbacks.lock
                                    tuples[ 0 ][ 2 ].lock,

                                    // progress_handlers.lock
                                    tuples[ 0 ][ 3 ].lock
                                );
                            }

                            // progress_handlers.fire
                            // fulfilled_handlers.fire
                            // rejected_handlers.fire
                            list.add( tuple[ 3 ].fire );

                            // deferred.notify = function() { deferred.notifyWith(...) }
                            // deferred.resolve = function() { deferred.resolveWith(...) }
                            // deferred.reject = function() { deferred.rejectWith(...) }
                            deferred[ tuple[ 0 ] ] = function() {
                                deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
                                return this;
                            };

                            // deferred.notifyWith = list.fireWith
                            // deferred.resolveWith = list.fireWith
                            // deferred.rejectWith = list.fireWith
                            deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
                        } );

                        // Make the deferred a promise
                        promise.promise( deferred );

                        // Call given func if any
                        if ( func ) {
                            func.call( deferred, deferred );
                        }

                        // All done!
                        return deferred;
                    },

                    // Deferred helper
                    when: function( singleValue ) {
                        var

                            // count of uncompleted subordinates
                            remaining = arguments.length,

                            // count of unprocessed arguments
                            i = remaining,

                            // subordinate fulfillment data
                            resolveContexts = Array( i ),
                            resolveValues = slice.call( arguments ),

                            // the master Deferred
                            master = jQuery.Deferred(),

                            // subordinate callback factory
                            updateFunc = function( i ) {
                                return function( value ) {
                                    resolveContexts[ i ] = this;
                                    resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
                                    if ( !( --remaining ) ) {
                                        master.resolveWith( resolveContexts, resolveValues );
                                    }
                                };
                            };

                        // Single- and empty arguments are adopted like Promise.resolve
                        if ( remaining <= 1 ) {
                            adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
                                !remaining );

                            // Use .then() to unwrap secondary thenables (cf. gh-3000)
                            if ( master.state() === "pending" ||
                                isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

                                return master.then();
                            }
                        }

                        // Multiple arguments are aggregated like Promise.all array elements
                        while ( i-- ) {
                            adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
                        }

                        return master.promise();
                    }
                } );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
                var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

                jQuery.Deferred.exceptionHook = function( error, stack ) {

                    // Support: IE 8 - 9 only
                    // Console exists when dev tools are open, which can happen at any time
                    if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
                        window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
                    }
                };




                jQuery.readyException = function( error ) {
                    window.setTimeout( function() {
                        throw error;
                    } );
                };




// The deferred used on DOM ready
                var readyList = jQuery.Deferred();

                jQuery.fn.ready = function( fn ) {

                    readyList
                        .then( fn )

                        // Wrap jQuery.readyException in a function so that the lookup
                        // happens at the time of error handling instead of callback
                        // registration.
                        .catch( function( error ) {
                            jQuery.readyException( error );
                        } );

                    return this;
                };

                jQuery.extend( {

                    // Is the DOM ready to be used? Set to true once it occurs.
                    isReady: false,

                    // A counter to track how many items to wait for before
                    // the ready event fires. See #6781
                    readyWait: 1,

                    // Handle when the DOM is ready
                    ready: function( wait ) {

                        // Abort if there are pending holds or we're already ready
                        if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
                            return;
                        }

                        // Remember that the DOM is ready
                        jQuery.isReady = true;

                        // If a normal DOM Ready event fired, decrement, and wait if need be
                        if ( wait !== true && --jQuery.readyWait > 0 ) {
                            return;
                        }

                        // If there are functions bound, to execute
                        readyList.resolveWith( document, [ jQuery ] );
                    }
                } );

                jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
                function completed() {
                    document.removeEventListener( "DOMContentLoaded", completed );
                    window.removeEventListener( "load", completed );
                    jQuery.ready();
                }

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
                if ( document.readyState === "complete" ||
                    ( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

                    // Handle it asynchronously to allow scripts the opportunity to delay ready
                    window.setTimeout( jQuery.ready );

                } else {

                    // Use the handy event callback
                    document.addEventListener( "DOMContentLoaded", completed );

                    // A fallback to window.onload, that will always work
                    window.addEventListener( "load", completed );
                }




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
                var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
                    var i = 0,
                        len = elems.length,
                        bulk = key == null;

                    // Sets many values
                    if ( toType( key ) === "object" ) {
                        chainable = true;
                        for ( i in key ) {
                            access( elems, fn, i, key[ i ], true, emptyGet, raw );
                        }

                        // Sets one value
                    } else if ( value !== undefined ) {
                        chainable = true;

                        if ( !isFunction( value ) ) {
                            raw = true;
                        }

                        if ( bulk ) {

                            // Bulk operations run against the entire set
                            if ( raw ) {
                                fn.call( elems, value );
                                fn = null;

                                // ...except when executing function values
                            } else {
                                bulk = fn;
                                fn = function( elem, key, value ) {
                                    return bulk.call( jQuery( elem ), value );
                                };
                            }
                        }

                        if ( fn ) {
                            for ( ; i < len; i++ ) {
                                fn(
                                    elems[ i ], key, raw ?
                                        value :
                                        value.call( elems[ i ], i, fn( elems[ i ], key ) )
                                );
                            }
                        }
                    }

                    if ( chainable ) {
                        return elems;
                    }

                    // Gets
                    if ( bulk ) {
                        return fn.call( elems );
                    }

                    return len ? fn( elems[ 0 ], key ) : emptyGet;
                };


// Matches dashed string for camelizing
                var rmsPrefix = /^-ms-/,
                    rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
                function fcamelCase( all, letter ) {
                    return letter.toUpperCase();
                }

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
                function camelCase( string ) {
                    return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
                }
                var acceptData = function( owner ) {

                    // Accepts only:
                    //  - Node
                    //    - Node.ELEMENT_NODE
                    //    - Node.DOCUMENT_NODE
                    //  - Object
                    //    - Any
                    return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
                };




                function Data() {
                    this.expando = jQuery.expando + Data.uid++;
                }

                Data.uid = 1;

                Data.prototype = {

                    cache: function( owner ) {

                        // Check if the owner object already has a cache
                        var value = owner[ this.expando ];

                        // If not, create one
                        if ( !value ) {
                            value = {};

                            // We can accept data for non-element nodes in modern browsers,
                            // but we should not, see #8335.
                            // Always return an empty object.
                            if ( acceptData( owner ) ) {

                                // If it is a node unlikely to be stringify-ed or looped over
                                // use plain assignment
                                if ( owner.nodeType ) {
                                    owner[ this.expando ] = value;

                                    // Otherwise secure it in a non-enumerable property
                                    // configurable must be true to allow the property to be
                                    // deleted when data is removed
                                } else {
                                    Object.defineProperty( owner, this.expando, {
                                        value: value,
                                        configurable: true
                                    } );
                                }
                            }
                        }

                        return value;
                    },
                    set: function( owner, data, value ) {
                        var prop,
                            cache = this.cache( owner );

                        // Handle: [ owner, key, value ] args
                        // Always use camelCase key (gh-2257)
                        if ( typeof data === "string" ) {
                            cache[ camelCase( data ) ] = value;

                            // Handle: [ owner, { properties } ] args
                        } else {

                            // Copy the properties one-by-one to the cache object
                            for ( prop in data ) {
                                cache[ camelCase( prop ) ] = data[ prop ];
                            }
                        }
                        return cache;
                    },
                    get: function( owner, key ) {
                        return key === undefined ?
                            this.cache( owner ) :

                            // Always use camelCase key (gh-2257)
                            owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
                    },
                    access: function( owner, key, value ) {

                        // In cases where either:
                        //
                        //   1. No key was specified
                        //   2. A string key was specified, but no value provided
                        //
                        // Take the "read" path and allow the get method to determine
                        // which value to return, respectively either:
                        //
                        //   1. The entire cache object
                        //   2. The data stored at the key
                        //
                        if ( key === undefined ||
                            ( ( key && typeof key === "string" ) && value === undefined ) ) {

                            return this.get( owner, key );
                        }

                        // When the key is not a string, or both a key and value
                        // are specified, set or extend (existing objects) with either:
                        //
                        //   1. An object of properties
                        //   2. A key and value
                        //
                        this.set( owner, key, value );

                        // Since the "set" path can have two possible entry points
                        // return the expected data based on which path was taken[*]
                        return value !== undefined ? value : key;
                    },
                    remove: function( owner, key ) {
                        var i,
                            cache = owner[ this.expando ];

                        if ( cache === undefined ) {
                            return;
                        }

                        if ( key !== undefined ) {

                            // Support array or space separated string of keys
                            if ( Array.isArray( key ) ) {

                                // If key is an array of keys...
                                // We always set camelCase keys, so remove that.
                                key = key.map( camelCase );
                            } else {
                                key = camelCase( key );

                                // If a key with the spaces exists, use it.
                                // Otherwise, create an array by matching non-whitespace
                                key = key in cache ?
                                    [ key ] :
                                    ( key.match( rnothtmlwhite ) || [] );
                            }

                            i = key.length;

                            while ( i-- ) {
                                delete cache[ key[ i ] ];
                            }
                        }

                        // Remove the expando if there's no more data
                        if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

                            // Support: Chrome <=35 - 45
                            // Webkit & Blink performance suffers when deleting properties
                            // from DOM nodes, so set to undefined instead
                            // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                            if ( owner.nodeType ) {
                                owner[ this.expando ] = undefined;
                            } else {
                                delete owner[ this.expando ];
                            }
                        }
                    },
                    hasData: function( owner ) {
                        var cache = owner[ this.expando ];
                        return cache !== undefined && !jQuery.isEmptyObject( cache );
                    }
                };
                var dataPriv = new Data();

                var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

                var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
                    rmultiDash = /[A-Z]/g;

                function getData( data ) {
                    if ( data === "true" ) {
                        return true;
                    }

                    if ( data === "false" ) {
                        return false;
                    }

                    if ( data === "null" ) {
                        return null;
                    }

                    // Only convert to a number if it doesn't change the string
                    if ( data === +data + "" ) {
                        return +data;
                    }

                    if ( rbrace.test( data ) ) {
                        return JSON.parse( data );
                    }

                    return data;
                }

                function dataAttr( elem, key, data ) {
                    var name;

                    // If nothing was found internally, try to fetch any
                    // data from the HTML5 data-* attribute
                    if ( data === undefined && elem.nodeType === 1 ) {
                        name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
                        data = elem.getAttribute( name );

                        if ( typeof data === "string" ) {
                            try {
                                data = getData( data );
                            } catch ( e ) {}

                            // Make sure we set the data so it isn't changed later
                            dataUser.set( elem, key, data );
                        } else {
                            data = undefined;
                        }
                    }
                    return data;
                }

                jQuery.extend( {
                    hasData: function( elem ) {
                        return dataUser.hasData( elem ) || dataPriv.hasData( elem );
                    },

                    data: function( elem, name, data ) {
                        return dataUser.access( elem, name, data );
                    },

                    removeData: function( elem, name ) {
                        dataUser.remove( elem, name );
                    },

                    // TODO: Now that all calls to _data and _removeData have been replaced
                    // with direct calls to dataPriv methods, these can be deprecated.
                    _data: function( elem, name, data ) {
                        return dataPriv.access( elem, name, data );
                    },

                    _removeData: function( elem, name ) {
                        dataPriv.remove( elem, name );
                    }
                } );

                jQuery.fn.extend( {
                    data: function( key, value ) {
                        var i, name, data,
                            elem = this[ 0 ],
                            attrs = elem && elem.attributes;

                        // Gets all values
                        if ( key === undefined ) {
                            if ( this.length ) {
                                data = dataUser.get( elem );

                                if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
                                    i = attrs.length;
                                    while ( i-- ) {

                                        // Support: IE 11 only
                                        // The attrs elements can be null (#14894)
                                        if ( attrs[ i ] ) {
                                            name = attrs[ i ].name;
                                            if ( name.indexOf( "data-" ) === 0 ) {
                                                name = camelCase( name.slice( 5 ) );
                                                dataAttr( elem, name, data[ name ] );
                                            }
                                        }
                                    }
                                    dataPriv.set( elem, "hasDataAttrs", true );
                                }
                            }

                            return data;
                        }

                        // Sets multiple values
                        if ( typeof key === "object" ) {
                            return this.each( function() {
                                dataUser.set( this, key );
                            } );
                        }

                        return access( this, function( value ) {
                            var data;

                            // The calling jQuery object (element matches) is not empty
                            // (and therefore has an element appears at this[ 0 ]) and the
                            // `value` parameter was not undefined. An empty jQuery object
                            // will result in `undefined` for elem = this[ 0 ] which will
                            // throw an exception if an attempt to read a data cache is made.
                            if ( elem && value === undefined ) {

                                // Attempt to get data from the cache
                                // The key will always be camelCased in Data
                                data = dataUser.get( elem, key );
                                if ( data !== undefined ) {
                                    return data;
                                }

                                // Attempt to "discover" the data in
                                // HTML5 custom data-* attrs
                                data = dataAttr( elem, key );
                                if ( data !== undefined ) {
                                    return data;
                                }

                                // We tried really hard, but the data doesn't exist.
                                return;
                            }

                            // Set the data...
                            this.each( function() {

                                // We always store the camelCased key
                                dataUser.set( this, key, value );
                            } );
                        }, null, value, arguments.length > 1, null, true );
                    },

                    removeData: function( key ) {
                        return this.each( function() {
                            dataUser.remove( this, key );
                        } );
                    }
                } );


                jQuery.extend( {
                    queue: function( elem, type, data ) {
                        var queue;

                        if ( elem ) {
                            type = ( type || "fx" ) + "queue";
                            queue = dataPriv.get( elem, type );

                            // Speed up dequeue by getting out quickly if this is just a lookup
                            if ( data ) {
                                if ( !queue || Array.isArray( data ) ) {
                                    queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
                                } else {
                                    queue.push( data );
                                }
                            }
                            return queue || [];
                        }
                    },

                    dequeue: function( elem, type ) {
                        type = type || "fx";

                        var queue = jQuery.queue( elem, type ),
                            startLength = queue.length,
                            fn = queue.shift(),
                            hooks = jQuery._queueHooks( elem, type ),
                            next = function() {
                                jQuery.dequeue( elem, type );
                            };

                        // If the fx queue is dequeued, always remove the progress sentinel
                        if ( fn === "inprogress" ) {
                            fn = queue.shift();
                            startLength--;
                        }

                        if ( fn ) {

                            // Add a progress sentinel to prevent the fx queue from being
                            // automatically dequeued
                            if ( type === "fx" ) {
                                queue.unshift( "inprogress" );
                            }

                            // Clear up the last queue stop function
                            delete hooks.stop;
                            fn.call( elem, next, hooks );
                        }

                        if ( !startLength && hooks ) {
                            hooks.empty.fire();
                        }
                    },

                    // Not public - generate a queueHooks object, or return the current one
                    _queueHooks: function( elem, type ) {
                        var key = type + "queueHooks";
                        return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
                            empty: jQuery.Callbacks( "once memory" ).add( function() {
                                dataPriv.remove( elem, [ type + "queue", key ] );
                            } )
                        } );
                    }
                } );

                jQuery.fn.extend( {
                    queue: function( type, data ) {
                        var setter = 2;

                        if ( typeof type !== "string" ) {
                            data = type;
                            type = "fx";
                            setter--;
                        }

                        if ( arguments.length < setter ) {
                            return jQuery.queue( this[ 0 ], type );
                        }

                        return data === undefined ?
                            this :
                            this.each( function() {
                                var queue = jQuery.queue( this, type, data );

                                // Ensure a hooks for this queue
                                jQuery._queueHooks( this, type );

                                if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
                                    jQuery.dequeue( this, type );
                                }
                            } );
                    },
                    dequeue: function( type ) {
                        return this.each( function() {
                            jQuery.dequeue( this, type );
                        } );
                    },
                    clearQueue: function( type ) {
                        return this.queue( type || "fx", [] );
                    },

                    // Get a promise resolved when queues of a certain type
                    // are emptied (fx is the type by default)
                    promise: function( type, obj ) {
                        var tmp,
                            count = 1,
                            defer = jQuery.Deferred(),
                            elements = this,
                            i = this.length,
                            resolve = function() {
                                if ( !( --count ) ) {
                                    defer.resolveWith( elements, [ elements ] );
                                }
                            };

                        if ( typeof type !== "string" ) {
                            obj = type;
                            type = undefined;
                        }
                        type = type || "fx";

                        while ( i-- ) {
                            tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
                            if ( tmp && tmp.empty ) {
                                count++;
                                tmp.empty.add( resolve );
                            }
                        }
                        resolve();
                        return defer.promise( obj );
                    }
                } );
                var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

                var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


                var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

                var documentElement = document.documentElement;



                var isAttached = function( elem ) {
                        return jQuery.contains( elem.ownerDocument, elem );
                    },
                    composed = { composed: true };

                // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
                // Check attachment across shadow DOM boundaries when possible (gh-3504)
                // Support: iOS 10.0-10.2 only
                // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
                // leading to errors. We need to check for `getRootNode`.
                if ( documentElement.getRootNode ) {
                    isAttached = function( elem ) {
                        return jQuery.contains( elem.ownerDocument, elem ) ||
                            elem.getRootNode( composed ) === elem.ownerDocument;
                    };
                }
                var isHiddenWithinTree = function( elem, el ) {

                    // isHiddenWithinTree might be called from jQuery#filter function;
                    // in that case, element will be second argument
                    elem = el || elem;

                    // Inline style trumps all
                    return elem.style.display === "none" ||
                        elem.style.display === "" &&

                        // Otherwise, check computed style
                        // Support: Firefox <=43 - 45
                        // Disconnected elements can have computed display: none, so first confirm that elem is
                        // in the document.
                        isAttached( elem ) &&

                        jQuery.css( elem, "display" ) === "none";
                };

                var swap = function( elem, options, callback, args ) {
                    var ret, name,
                        old = {};

                    // Remember the old values, and insert the new ones
                    for ( name in options ) {
                        old[ name ] = elem.style[ name ];
                        elem.style[ name ] = options[ name ];
                    }

                    ret = callback.apply( elem, args || [] );

                    // Revert the old values
                    for ( name in options ) {
                        elem.style[ name ] = old[ name ];
                    }

                    return ret;
                };




                function adjustCSS( elem, prop, valueParts, tween ) {
                    var adjusted, scale,
                        maxIterations = 20,
                        currentValue = tween ?
                            function() {
                                return tween.cur();
                            } :
                            function() {
                                return jQuery.css( elem, prop, "" );
                            },
                        initial = currentValue(),
                        unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

                        // Starting value computation is required for potential unit mismatches
                        initialInUnit = elem.nodeType &&
                            ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
                            rcssNum.exec( jQuery.css( elem, prop ) );

                    if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

                        // Support: Firefox <=54
                        // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
                        initial = initial / 2;

                        // Trust units reported by jQuery.css
                        unit = unit || initialInUnit[ 3 ];

                        // Iteratively approximate from a nonzero starting point
                        initialInUnit = +initial || 1;

                        while ( maxIterations-- ) {

                            // Evaluate and update our best guess (doubling guesses that zero out).
                            // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
                            jQuery.style( elem, prop, initialInUnit + unit );
                            if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
                                maxIterations = 0;
                            }
                            initialInUnit = initialInUnit / scale;

                        }

                        initialInUnit = initialInUnit * 2;
                        jQuery.style( elem, prop, initialInUnit + unit );

                        // Make sure we update the tween properties later on
                        valueParts = valueParts || [];
                    }

                    if ( valueParts ) {
                        initialInUnit = +initialInUnit || +initial || 0;

                        // Apply relative offset (+=/-=) if specified
                        adjusted = valueParts[ 1 ] ?
                            initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
                            +valueParts[ 2 ];
                        if ( tween ) {
                            tween.unit = unit;
                            tween.start = initialInUnit;
                            tween.end = adjusted;
                        }
                    }
                    return adjusted;
                }


                var defaultDisplayMap = {};

                function getDefaultDisplay( elem ) {
                    var temp,
                        doc = elem.ownerDocument,
                        nodeName = elem.nodeName,
                        display = defaultDisplayMap[ nodeName ];

                    if ( display ) {
                        return display;
                    }

                    temp = doc.body.appendChild( doc.createElement( nodeName ) );
                    display = jQuery.css( temp, "display" );

                    temp.parentNode.removeChild( temp );

                    if ( display === "none" ) {
                        display = "block";
                    }
                    defaultDisplayMap[ nodeName ] = display;

                    return display;
                }

                function showHide( elements, show ) {
                    var display, elem,
                        values = [],
                        index = 0,
                        length = elements.length;

                    // Determine new display value for elements that need to change
                    for ( ; index < length; index++ ) {
                        elem = elements[ index ];
                        if ( !elem.style ) {
                            continue;
                        }

                        display = elem.style.display;
                        if ( show ) {

                            // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                            // check is required in this first loop unless we have a nonempty display value (either
                            // inline or about-to-be-restored)
                            if ( display === "none" ) {
                                values[ index ] = dataPriv.get( elem, "display" ) || null;
                                if ( !values[ index ] ) {
                                    elem.style.display = "";
                                }
                            }
                            if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
                                values[ index ] = getDefaultDisplay( elem );
                            }
                        } else {
                            if ( display !== "none" ) {
                                values[ index ] = "none";

                                // Remember what we're overwriting
                                dataPriv.set( elem, "display", display );
                            }
                        }
                    }

                    // Set the display of the elements in a second loop to avoid constant reflow
                    for ( index = 0; index < length; index++ ) {
                        if ( values[ index ] != null ) {
                            elements[ index ].style.display = values[ index ];
                        }
                    }

                    return elements;
                }

                jQuery.fn.extend( {
                    show: function() {
                        return showHide( this, true );
                    },
                    hide: function() {
                        return showHide( this );
                    },
                    toggle: function( state ) {
                        if ( typeof state === "boolean" ) {
                            return state ? this.show() : this.hide();
                        }

                        return this.each( function() {
                            if ( isHiddenWithinTree( this ) ) {
                                jQuery( this ).show();
                            } else {
                                jQuery( this ).hide();
                            }
                        } );
                    }
                } );
                var rcheckableType = ( /^(?:checkbox|radio)$/i );

                var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

                var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
                var wrapMap = {

                    // Support: IE <=9 only
                    option: [ 1, "<select multiple='multiple'>", "</select>" ],

                    // XHTML parsers do not magically insert elements in the
                    // same way that tag soup parsers do. So we cannot shorten
                    // this by omitting <tbody> or other required elements.
                    thead: [ 1, "<table>", "</table>" ],
                    col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
                    tr: [ 2, "<table><tbody>", "</tbody></table>" ],
                    td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

                    _default: [ 0, "", "" ]
                };

// Support: IE <=9 only
                wrapMap.optgroup = wrapMap.option;

                wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
                wrapMap.th = wrapMap.td;


                function getAll( context, tag ) {

                    // Support: IE <=9 - 11 only
                    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
                    var ret;

                    if ( typeof context.getElementsByTagName !== "undefined" ) {
                        ret = context.getElementsByTagName( tag || "*" );

                    } else if ( typeof context.querySelectorAll !== "undefined" ) {
                        ret = context.querySelectorAll( tag || "*" );

                    } else {
                        ret = [];
                    }

                    if ( tag === undefined || tag && nodeName( context, tag ) ) {
                        return jQuery.merge( [ context ], ret );
                    }

                    return ret;
                }


// Mark scripts as having already been evaluated
                function setGlobalEval( elems, refElements ) {
                    var i = 0,
                        l = elems.length;

                    for ( ; i < l; i++ ) {
                        dataPriv.set(
                            elems[ i ],
                            "globalEval",
                            !refElements || dataPriv.get( refElements[ i ], "globalEval" )
                        );
                    }
                }


                var rhtml = /<|&#?\w+;/;

                function buildFragment( elems, context, scripts, selection, ignored ) {
                    var elem, tmp, tag, wrap, attached, j,
                        fragment = context.createDocumentFragment(),
                        nodes = [],
                        i = 0,
                        l = elems.length;

                    for ( ; i < l; i++ ) {
                        elem = elems[ i ];

                        if ( elem || elem === 0 ) {

                            // Add nodes directly
                            if ( toType( elem ) === "object" ) {

                                // Support: Android <=4.0 only, PhantomJS 1 only
                                // push.apply(_, arraylike) throws on ancient WebKit
                                jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

                                // Convert non-html into a text node
                            } else if ( !rhtml.test( elem ) ) {
                                nodes.push( context.createTextNode( elem ) );

                                // Convert html into DOM nodes
                            } else {
                                tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

                                // Deserialize a standard representation
                                tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
                                wrap = wrapMap[ tag ] || wrapMap._default;
                                tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

                                // Descend through wrappers to the right content
                                j = wrap[ 0 ];
                                while ( j-- ) {
                                    tmp = tmp.lastChild;
                                }

                                // Support: Android <=4.0 only, PhantomJS 1 only
                                // push.apply(_, arraylike) throws on ancient WebKit
                                jQuery.merge( nodes, tmp.childNodes );

                                // Remember the top-level container
                                tmp = fragment.firstChild;

                                // Ensure the created nodes are orphaned (#12392)
                                tmp.textContent = "";
                            }
                        }
                    }

                    // Remove wrapper from fragment
                    fragment.textContent = "";

                    i = 0;
                    while ( ( elem = nodes[ i++ ] ) ) {

                        // Skip elements already in the context collection (trac-4087)
                        if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
                            if ( ignored ) {
                                ignored.push( elem );
                            }
                            continue;
                        }

                        attached = isAttached( elem );

                        // Append to fragment
                        tmp = getAll( fragment.appendChild( elem ), "script" );

                        // Preserve script evaluation history
                        if ( attached ) {
                            setGlobalEval( tmp );
                        }

                        // Capture executables
                        if ( scripts ) {
                            j = 0;
                            while ( ( elem = tmp[ j++ ] ) ) {
                                if ( rscriptType.test( elem.type || "" ) ) {
                                    scripts.push( elem );
                                }
                            }
                        }
                    }

                    return fragment;
                }


                ( function() {
                    var fragment = document.createDocumentFragment(),
                        div = fragment.appendChild( document.createElement( "div" ) ),
                        input = document.createElement( "input" );

                    // Support: Android 4.0 - 4.3 only
                    // Check state lost if the name is set (#11217)
                    // Support: Windows Web Apps (WWA)
                    // `name` and `type` must use .setAttribute for WWA (#14901)
                    input.setAttribute( "type", "radio" );
                    input.setAttribute( "checked", "checked" );
                    input.setAttribute( "name", "t" );

                    div.appendChild( input );

                    // Support: Android <=4.1 only
                    // Older WebKit doesn't clone checked state correctly in fragments
                    support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

                    // Support: IE <=11 only
                    // Make sure textarea (and checkbox) defaultValue is properly cloned
                    div.innerHTML = "<textarea>x</textarea>";
                    support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
                } )();


                var
                    rkeyEvent = /^key/,
                    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
                    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

                function returnTrue() {
                    return true;
                }

                function returnFalse() {
                    return false;
                }

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
                function expectSync( elem, type ) {
                    return ( elem === safeActiveElement() ) === ( type === "focus" );
                }

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
                function safeActiveElement() {
                    try {
                        return document.activeElement;
                    } catch ( err ) { }
                }

                function on( elem, types, selector, data, fn, one ) {
                    var origFn, type;

                    // Types can be a map of types/handlers
                    if ( typeof types === "object" ) {

                        // ( types-Object, selector, data )
                        if ( typeof selector !== "string" ) {

                            // ( types-Object, data )
                            data = data || selector;
                            selector = undefined;
                        }
                        for ( type in types ) {
                            on( elem, type, selector, data, types[ type ], one );
                        }
                        return elem;
                    }

                    if ( data == null && fn == null ) {

                        // ( types, fn )
                        fn = selector;
                        data = selector = undefined;
                    } else if ( fn == null ) {
                        if ( typeof selector === "string" ) {

                            // ( types, selector, fn )
                            fn = data;
                            data = undefined;
                        } else {

                            // ( types, data, fn )
                            fn = data;
                            data = selector;
                            selector = undefined;
                        }
                    }
                    if ( fn === false ) {
                        fn = returnFalse;
                    } else if ( !fn ) {
                        return elem;
                    }

                    if ( one === 1 ) {
                        origFn = fn;
                        fn = function( event ) {

                            // Can use an empty set, since event contains the info
                            jQuery().off( event );
                            return origFn.apply( this, arguments );
                        };

                        // Use same guid so caller can remove using origFn
                        fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
                    }
                    return elem.each( function() {
                        jQuery.event.add( this, types, fn, data, selector );
                    } );
                }

                /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
                jQuery.event = {

                    global: {},

                    add: function( elem, types, handler, data, selector ) {

                        var handleObjIn, eventHandle, tmp,
                            events, t, handleObj,
                            special, handlers, type, namespaces, origType,
                            elemData = dataPriv.get( elem );

                        // Don't attach events to noData or text/comment nodes (but allow plain objects)
                        if ( !elemData ) {
                            return;
                        }

                        // Caller can pass in an object of custom data in lieu of the handler
                        if ( handler.handler ) {
                            handleObjIn = handler;
                            handler = handleObjIn.handler;
                            selector = handleObjIn.selector;
                        }

                        // Ensure that invalid selectors throw exceptions at attach time
                        // Evaluate against documentElement in case elem is a non-element node (e.g., document)
                        if ( selector ) {
                            jQuery.find.matchesSelector( documentElement, selector );
                        }

                        // Make sure that the handler has a unique ID, used to find/remove it later
                        if ( !handler.guid ) {
                            handler.guid = jQuery.guid++;
                        }

                        // Init the element's event structure and main handler, if this is the first
                        if ( !( events = elemData.events ) ) {
                            events = elemData.events = {};
                        }
                        if ( !( eventHandle = elemData.handle ) ) {
                            eventHandle = elemData.handle = function( e ) {

                                // Discard the second event of a jQuery.event.trigger() and
                                // when an event is called after a page has unloaded
                                return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
                                    jQuery.event.dispatch.apply( elem, arguments ) : undefined;
                            };
                        }

                        // Handle multiple events separated by a space
                        types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
                        t = types.length;
                        while ( t-- ) {
                            tmp = rtypenamespace.exec( types[ t ] ) || [];
                            type = origType = tmp[ 1 ];
                            namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

                            // There *must* be a type, no attaching namespace-only handlers
                            if ( !type ) {
                                continue;
                            }

                            // If event changes its type, use the special event handlers for the changed type
                            special = jQuery.event.special[ type ] || {};

                            // If selector defined, determine special event api type, otherwise given type
                            type = ( selector ? special.delegateType : special.bindType ) || type;

                            // Update special based on newly reset type
                            special = jQuery.event.special[ type ] || {};

                            // handleObj is passed to all event handlers
                            handleObj = jQuery.extend( {
                                type: type,
                                origType: origType,
                                data: data,
                                handler: handler,
                                guid: handler.guid,
                                selector: selector,
                                needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
                                namespace: namespaces.join( "." )
                            }, handleObjIn );

                            // Init the event handler queue if we're the first
                            if ( !( handlers = events[ type ] ) ) {
                                handlers = events[ type ] = [];
                                handlers.delegateCount = 0;

                                // Only use addEventListener if the special events handler returns false
                                if ( !special.setup ||
                                    special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

                                    if ( elem.addEventListener ) {
                                        elem.addEventListener( type, eventHandle );
                                    }
                                }
                            }

                            if ( special.add ) {
                                special.add.call( elem, handleObj );

                                if ( !handleObj.handler.guid ) {
                                    handleObj.handler.guid = handler.guid;
                                }
                            }

                            // Add to the element's handler list, delegates in front
                            if ( selector ) {
                                handlers.splice( handlers.delegateCount++, 0, handleObj );
                            } else {
                                handlers.push( handleObj );
                            }

                            // Keep track of which events have ever been used, for event optimization
                            jQuery.event.global[ type ] = true;
                        }

                    },

                    // Detach an event or set of events from an element
                    remove: function( elem, types, handler, selector, mappedTypes ) {

                        var j, origCount, tmp,
                            events, t, handleObj,
                            special, handlers, type, namespaces, origType,
                            elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

                        if ( !elemData || !( events = elemData.events ) ) {
                            return;
                        }

                        // Once for each type.namespace in types; type may be omitted
                        types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
                        t = types.length;
                        while ( t-- ) {
                            tmp = rtypenamespace.exec( types[ t ] ) || [];
                            type = origType = tmp[ 1 ];
                            namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

                            // Unbind all events (on this namespace, if provided) for the element
                            if ( !type ) {
                                for ( type in events ) {
                                    jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
                                }
                                continue;
                            }

                            special = jQuery.event.special[ type ] || {};
                            type = ( selector ? special.delegateType : special.bindType ) || type;
                            handlers = events[ type ] || [];
                            tmp = tmp[ 2 ] &&
                                new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

                            // Remove matching events
                            origCount = j = handlers.length;
                            while ( j-- ) {
                                handleObj = handlers[ j ];

                                if ( ( mappedTypes || origType === handleObj.origType ) &&
                                    ( !handler || handler.guid === handleObj.guid ) &&
                                    ( !tmp || tmp.test( handleObj.namespace ) ) &&
                                    ( !selector || selector === handleObj.selector ||
                                        selector === "**" && handleObj.selector ) ) {
                                    handlers.splice( j, 1 );

                                    if ( handleObj.selector ) {
                                        handlers.delegateCount--;
                                    }
                                    if ( special.remove ) {
                                        special.remove.call( elem, handleObj );
                                    }
                                }
                            }

                            // Remove generic event handler if we removed something and no more handlers exist
                            // (avoids potential for endless recursion during removal of special event handlers)
                            if ( origCount && !handlers.length ) {
                                if ( !special.teardown ||
                                    special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

                                    jQuery.removeEvent( elem, type, elemData.handle );
                                }

                                delete events[ type ];
                            }
                        }

                        // Remove data and the expando if it's no longer used
                        if ( jQuery.isEmptyObject( events ) ) {
                            dataPriv.remove( elem, "handle events" );
                        }
                    },

                    dispatch: function( nativeEvent ) {

                        // Make a writable jQuery.Event from the native event object
                        var event = jQuery.event.fix( nativeEvent );

                        var i, j, ret, matched, handleObj, handlerQueue,
                            args = new Array( arguments.length ),
                            handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
                            special = jQuery.event.special[ event.type ] || {};

                        // Use the fix-ed jQuery.Event rather than the (read-only) native event
                        args[ 0 ] = event;

                        for ( i = 1; i < arguments.length; i++ ) {
                            args[ i ] = arguments[ i ];
                        }

                        event.delegateTarget = this;

                        // Call the preDispatch hook for the mapped type, and let it bail if desired
                        if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
                            return;
                        }

                        // Determine handlers
                        handlerQueue = jQuery.event.handlers.call( this, event, handlers );

                        // Run delegates first; they may want to stop propagation beneath us
                        i = 0;
                        while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
                            event.currentTarget = matched.elem;

                            j = 0;
                            while ( ( handleObj = matched.handlers[ j++ ] ) &&
                            !event.isImmediatePropagationStopped() ) {

                                // If the event is namespaced, then each handler is only invoked if it is
                                // specially universal or its namespaces are a superset of the event's.
                                if ( !event.rnamespace || handleObj.namespace === false ||
                                    event.rnamespace.test( handleObj.namespace ) ) {

                                    event.handleObj = handleObj;
                                    event.data = handleObj.data;

                                    ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
                                        handleObj.handler ).apply( matched.elem, args );

                                    if ( ret !== undefined ) {
                                        if ( ( event.result = ret ) === false ) {
                                            event.preventDefault();
                                            event.stopPropagation();
                                        }
                                    }
                                }
                            }
                        }

                        // Call the postDispatch hook for the mapped type
                        if ( special.postDispatch ) {
                            special.postDispatch.call( this, event );
                        }

                        return event.result;
                    },

                    handlers: function( event, handlers ) {
                        var i, handleObj, sel, matchedHandlers, matchedSelectors,
                            handlerQueue = [],
                            delegateCount = handlers.delegateCount,
                            cur = event.target;

                        // Find delegate handlers
                        if ( delegateCount &&

                            // Support: IE <=9
                            // Black-hole SVG <use> instance trees (trac-13180)
                            cur.nodeType &&

                            // Support: Firefox <=42
                            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
                            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
                            // Support: IE 11 only
                            // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
                            !( event.type === "click" && event.button >= 1 ) ) {

                            for ( ; cur !== this; cur = cur.parentNode || this ) {

                                // Don't check non-elements (#13208)
                                // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                                if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
                                    matchedHandlers = [];
                                    matchedSelectors = {};
                                    for ( i = 0; i < delegateCount; i++ ) {
                                        handleObj = handlers[ i ];

                                        // Don't conflict with Object.prototype properties (#13203)
                                        sel = handleObj.selector + " ";

                                        if ( matchedSelectors[ sel ] === undefined ) {
                                            matchedSelectors[ sel ] = handleObj.needsContext ?
                                                jQuery( sel, this ).index( cur ) > -1 :
                                                jQuery.find( sel, this, null, [ cur ] ).length;
                                        }
                                        if ( matchedSelectors[ sel ] ) {
                                            matchedHandlers.push( handleObj );
                                        }
                                    }
                                    if ( matchedHandlers.length ) {
                                        handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
                                    }
                                }
                            }
                        }

                        // Add the remaining (directly-bound) handlers
                        cur = this;
                        if ( delegateCount < handlers.length ) {
                            handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
                        }

                        return handlerQueue;
                    },

                    addProp: function( name, hook ) {
                        Object.defineProperty( jQuery.Event.prototype, name, {
                            enumerable: true,
                            configurable: true,

                            get: isFunction( hook ) ?
                                function() {
                                    if ( this.originalEvent ) {
                                        return hook( this.originalEvent );
                                    }
                                } :
                                function() {
                                    if ( this.originalEvent ) {
                                        return this.originalEvent[ name ];
                                    }
                                },

                            set: function( value ) {
                                Object.defineProperty( this, name, {
                                    enumerable: true,
                                    configurable: true,
                                    writable: true,
                                    value: value
                                } );
                            }
                        } );
                    },

                    fix: function( originalEvent ) {
                        return originalEvent[ jQuery.expando ] ?
                            originalEvent :
                            new jQuery.Event( originalEvent );
                    },

                    special: {
                        load: {

                            // Prevent triggered image.load events from bubbling to window.load
                            noBubble: true
                        },
                        click: {

                            // Utilize native event to ensure correct state for checkable inputs
                            setup: function( data ) {

                                // For mutual compressibility with _default, replace `this` access with a local var.
                                // `|| data` is dead code meant only to preserve the variable through minification.
                                var el = this || data;

                                // Claim the first handler
                                if ( rcheckableType.test( el.type ) &&
                                    el.click && nodeName( el, "input" ) ) {

                                    // dataPriv.set( el, "click", ... )
                                    leverageNative( el, "click", returnTrue );
                                }

                                // Return false to allow normal processing in the caller
                                return false;
                            },
                            trigger: function( data ) {

                                // For mutual compressibility with _default, replace `this` access with a local var.
                                // `|| data` is dead code meant only to preserve the variable through minification.
                                var el = this || data;

                                // Force setup before triggering a click
                                if ( rcheckableType.test( el.type ) &&
                                    el.click && nodeName( el, "input" ) ) {

                                    leverageNative( el, "click" );
                                }

                                // Return non-false to allow normal event-path propagation
                                return true;
                            },

                            // For cross-browser consistency, suppress native .click() on links
                            // Also prevent it if we're currently inside a leveraged native-event stack
                            _default: function( event ) {
                                var target = event.target;
                                return rcheckableType.test( target.type ) &&
                                    target.click && nodeName( target, "input" ) &&
                                    dataPriv.get( target, "click" ) ||
                                    nodeName( target, "a" );
                            }
                        },

                        beforeunload: {
                            postDispatch: function( event ) {

                                // Support: Firefox 20+
                                // Firefox doesn't alert if the returnValue field is not set.
                                if ( event.result !== undefined && event.originalEvent ) {
                                    event.originalEvent.returnValue = event.result;
                                }
                            }
                        }
                    }
                };

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
                function leverageNative( el, type, expectSync ) {

                    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
                    if ( !expectSync ) {
                        if ( dataPriv.get( el, type ) === undefined ) {
                            jQuery.event.add( el, type, returnTrue );
                        }
                        return;
                    }

                    // Register the controller as a special universal handler for all event namespaces
                    dataPriv.set( el, type, false );
                    jQuery.event.add( el, type, {
                        namespace: false,
                        handler: function( event ) {
                            var notAsync, result,
                                saved = dataPriv.get( this, type );

                            if ( ( event.isTrigger & 1 ) && this[ type ] ) {

                                // Interrupt processing of the outer synthetic .trigger()ed event
                                // Saved data should be false in such cases, but might be a leftover capture object
                                // from an async native handler (gh-4350)
                                if ( !saved.length ) {

                                    // Store arguments for use when handling the inner native event
                                    // There will always be at least one argument (an event object), so this array
                                    // will not be confused with a leftover capture object.
                                    saved = slice.call( arguments );
                                    dataPriv.set( this, type, saved );

                                    // Trigger the native event and capture its result
                                    // Support: IE <=9 - 11+
                                    // focus() and blur() are asynchronous
                                    notAsync = expectSync( this, type );
                                    this[ type ]();
                                    result = dataPriv.get( this, type );
                                    if ( saved !== result || notAsync ) {
                                        dataPriv.set( this, type, false );
                                    } else {
                                        result = {};
                                    }
                                    if ( saved !== result ) {

                                        // Cancel the outer synthetic event
                                        event.stopImmediatePropagation();
                                        event.preventDefault();
                                        return result.value;
                                    }

                                    // If this is an inner synthetic event for an event with a bubbling surrogate
                                    // (focus or blur), assume that the surrogate already propagated from triggering the
                                    // native event and prevent that from happening again here.
                                    // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                                    // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                                    // less bad than duplication.
                                } else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
                                    event.stopPropagation();
                                }

                                // If this is a native event triggered above, everything is now in order
                                // Fire an inner synthetic event with the original arguments
                            } else if ( saved.length ) {

                                // ...and capture the result
                                dataPriv.set( this, type, {
                                    value: jQuery.event.trigger(

                                        // Support: IE <=9 - 11+
                                        // Extend with the prototype to reset the above stopImmediatePropagation()
                                        jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
                                        saved.slice( 1 ),
                                        this
                                    )
                                } );

                                // Abort handling of the native event
                                event.stopImmediatePropagation();
                            }
                        }
                    } );
                }

                jQuery.removeEvent = function( elem, type, handle ) {

                    // This "if" is needed for plain objects
                    if ( elem.removeEventListener ) {
                        elem.removeEventListener( type, handle );
                    }
                };

                jQuery.Event = function( src, props ) {

                    // Allow instantiation without the 'new' keyword
                    if ( !( this instanceof jQuery.Event ) ) {
                        return new jQuery.Event( src, props );
                    }

                    // Event object
                    if ( src && src.type ) {
                        this.originalEvent = src;
                        this.type = src.type;

                        // Events bubbling up the document may have been marked as prevented
                        // by a handler lower down the tree; reflect the correct value.
                        this.isDefaultPrevented = src.defaultPrevented ||
                        src.defaultPrevented === undefined &&

                        // Support: Android <=2.3 only
                        src.returnValue === false ?
                            returnTrue :
                            returnFalse;

                        // Create target properties
                        // Support: Safari <=6 - 7 only
                        // Target should not be a text node (#504, #13143)
                        this.target = ( src.target && src.target.nodeType === 3 ) ?
                            src.target.parentNode :
                            src.target;

                        this.currentTarget = src.currentTarget;
                        this.relatedTarget = src.relatedTarget;

                        // Event type
                    } else {
                        this.type = src;
                    }

                    // Put explicitly provided properties onto the event object
                    if ( props ) {
                        jQuery.extend( this, props );
                    }

                    // Create a timestamp if incoming event doesn't have one
                    this.timeStamp = src && src.timeStamp || Date.now();

                    // Mark it as fixed
                    this[ jQuery.expando ] = true;
                };

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
                jQuery.Event.prototype = {
                    constructor: jQuery.Event,
                    isDefaultPrevented: returnFalse,
                    isPropagationStopped: returnFalse,
                    isImmediatePropagationStopped: returnFalse,
                    isSimulated: false,

                    preventDefault: function() {
                        var e = this.originalEvent;

                        this.isDefaultPrevented = returnTrue;

                        if ( e && !this.isSimulated ) {
                            e.preventDefault();
                        }
                    },
                    stopPropagation: function() {
                        var e = this.originalEvent;

                        this.isPropagationStopped = returnTrue;

                        if ( e && !this.isSimulated ) {
                            e.stopPropagation();
                        }
                    },
                    stopImmediatePropagation: function() {
                        var e = this.originalEvent;

                        this.isImmediatePropagationStopped = returnTrue;

                        if ( e && !this.isSimulated ) {
                            e.stopImmediatePropagation();
                        }

                        this.stopPropagation();
                    }
                };

// Includes all common event props including KeyEvent and MouseEvent specific props
                jQuery.each( {
                    altKey: true,
                    bubbles: true,
                    cancelable: true,
                    changedTouches: true,
                    ctrlKey: true,
                    detail: true,
                    eventPhase: true,
                    metaKey: true,
                    pageX: true,
                    pageY: true,
                    shiftKey: true,
                    view: true,
                    "char": true,
                    code: true,
                    charCode: true,
                    key: true,
                    keyCode: true,
                    button: true,
                    buttons: true,
                    clientX: true,
                    clientY: true,
                    offsetX: true,
                    offsetY: true,
                    pointerId: true,
                    pointerType: true,
                    screenX: true,
                    screenY: true,
                    targetTouches: true,
                    toElement: true,
                    touches: true,

                    which: function( event ) {
                        var button = event.button;

                        // Add which for key events
                        if ( event.which == null && rkeyEvent.test( event.type ) ) {
                            return event.charCode != null ? event.charCode : event.keyCode;
                        }

                        // Add which for click: 1 === left; 2 === middle; 3 === right
                        if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
                            if ( button & 1 ) {
                                return 1;
                            }

                            if ( button & 2 ) {
                                return 3;
                            }

                            if ( button & 4 ) {
                                return 2;
                            }

                            return 0;
                        }

                        return event.which;
                    }
                }, jQuery.event.addProp );

                jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
                    jQuery.event.special[ type ] = {

                        // Utilize native event if possible so blur/focus sequence is correct
                        setup: function() {

                            // Claim the first handler
                            // dataPriv.set( this, "focus", ... )
                            // dataPriv.set( this, "blur", ... )
                            leverageNative( this, type, expectSync );

                            // Return false to allow normal processing in the caller
                            return false;
                        },
                        trigger: function() {

                            // Force setup before trigger
                            leverageNative( this, type );

                            // Return non-false to allow normal event-path propagation
                            return true;
                        },

                        delegateType: delegateType
                    };
                } );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
                jQuery.each( {
                    mouseenter: "mouseover",
                    mouseleave: "mouseout",
                    pointerenter: "pointerover",
                    pointerleave: "pointerout"
                }, function( orig, fix ) {
                    jQuery.event.special[ orig ] = {
                        delegateType: fix,
                        bindType: fix,

                        handle: function( event ) {
                            var ret,
                                target = this,
                                related = event.relatedTarget,
                                handleObj = event.handleObj;

                            // For mouseenter/leave call the handler if related is outside the target.
                            // NB: No relatedTarget if the mouse left/entered the browser window
                            if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
                                event.type = handleObj.origType;
                                ret = handleObj.handler.apply( this, arguments );
                                event.type = fix;
                            }
                            return ret;
                        }
                    };
                } );

                jQuery.fn.extend( {

                    on: function( types, selector, data, fn ) {
                        return on( this, types, selector, data, fn );
                    },
                    one: function( types, selector, data, fn ) {
                        return on( this, types, selector, data, fn, 1 );
                    },
                    off: function( types, selector, fn ) {
                        var handleObj, type;
                        if ( types && types.preventDefault && types.handleObj ) {

                            // ( event )  dispatched jQuery.Event
                            handleObj = types.handleObj;
                            jQuery( types.delegateTarget ).off(
                                handleObj.namespace ?
                                    handleObj.origType + "." + handleObj.namespace :
                                    handleObj.origType,
                                handleObj.selector,
                                handleObj.handler
                            );
                            return this;
                        }
                        if ( typeof types === "object" ) {

                            // ( types-object [, selector] )
                            for ( type in types ) {
                                this.off( type, selector, types[ type ] );
                            }
                            return this;
                        }
                        if ( selector === false || typeof selector === "function" ) {

                            // ( types [, fn] )
                            fn = selector;
                            selector = undefined;
                        }
                        if ( fn === false ) {
                            fn = returnFalse;
                        }
                        return this.each( function() {
                            jQuery.event.remove( this, types, fn, selector );
                        } );
                    }
                } );


                var

                    /* eslint-disable max-len */

                    // See https://github.com/eslint/eslint/issues/3229
                    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

                    /* eslint-enable */

                    // Support: IE <=10 - 11, Edge 12 - 13 only
                    // In IE/Edge using regex groups here causes severe slowdowns.
                    // See https://connect.microsoft.com/IE/feedback/details/1736512/
                    rnoInnerhtml = /<script|<style|<link/i,

                    // checked="checked" or checked
                    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
                    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
                function manipulationTarget( elem, content ) {
                    if ( nodeName( elem, "table" ) &&
                        nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

                        return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
                    }

                    return elem;
                }

// Replace/restore the type attribute of script elements for safe DOM manipulation
                function disableScript( elem ) {
                    elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
                    return elem;
                }
                function restoreScript( elem ) {
                    if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
                        elem.type = elem.type.slice( 5 );
                    } else {
                        elem.removeAttribute( "type" );
                    }

                    return elem;
                }

                function cloneCopyEvent( src, dest ) {
                    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

                    if ( dest.nodeType !== 1 ) {
                        return;
                    }

                    // 1. Copy private data: events, handlers, etc.
                    if ( dataPriv.hasData( src ) ) {
                        pdataOld = dataPriv.access( src );
                        pdataCur = dataPriv.set( dest, pdataOld );
                        events = pdataOld.events;

                        if ( events ) {
                            delete pdataCur.handle;
                            pdataCur.events = {};

                            for ( type in events ) {
                                for ( i = 0, l = events[ type ].length; i < l; i++ ) {
                                    jQuery.event.add( dest, type, events[ type ][ i ] );
                                }
                            }
                        }
                    }

                    // 2. Copy user data
                    if ( dataUser.hasData( src ) ) {
                        udataOld = dataUser.access( src );
                        udataCur = jQuery.extend( {}, udataOld );

                        dataUser.set( dest, udataCur );
                    }
                }

// Fix IE bugs, see support tests
                function fixInput( src, dest ) {
                    var nodeName = dest.nodeName.toLowerCase();

                    // Fails to persist the checked state of a cloned checkbox or radio button.
                    if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
                        dest.checked = src.checked;

                        // Fails to return the selected option to the default selected state when cloning options
                    } else if ( nodeName === "input" || nodeName === "textarea" ) {
                        dest.defaultValue = src.defaultValue;
                    }
                }

                function domManip( collection, args, callback, ignored ) {

                    // Flatten any nested arrays
                    args = concat.apply( [], args );

                    var fragment, first, scripts, hasScripts, node, doc,
                        i = 0,
                        l = collection.length,
                        iNoClone = l - 1,
                        value = args[ 0 ],
                        valueIsFunction = isFunction( value );

                    // We can't cloneNode fragments that contain checked, in WebKit
                    if ( valueIsFunction ||
                        ( l > 1 && typeof value === "string" &&
                            !support.checkClone && rchecked.test( value ) ) ) {
                        return collection.each( function( index ) {
                            var self = collection.eq( index );
                            if ( valueIsFunction ) {
                                args[ 0 ] = value.call( this, index, self.html() );
                            }
                            domManip( self, args, callback, ignored );
                        } );
                    }

                    if ( l ) {
                        fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
                        first = fragment.firstChild;

                        if ( fragment.childNodes.length === 1 ) {
                            fragment = first;
                        }

                        // Require either new content or an interest in ignored elements to invoke the callback
                        if ( first || ignored ) {
                            scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
                            hasScripts = scripts.length;

                            // Use the original fragment for the last item
                            // instead of the first because it can end up
                            // being emptied incorrectly in certain situations (#8070).
                            for ( ; i < l; i++ ) {
                                node = fragment;

                                if ( i !== iNoClone ) {
                                    node = jQuery.clone( node, true, true );

                                    // Keep references to cloned scripts for later restoration
                                    if ( hasScripts ) {

                                        // Support: Android <=4.0 only, PhantomJS 1 only
                                        // push.apply(_, arraylike) throws on ancient WebKit
                                        jQuery.merge( scripts, getAll( node, "script" ) );
                                    }
                                }

                                callback.call( collection[ i ], node, i );
                            }

                            if ( hasScripts ) {
                                doc = scripts[ scripts.length - 1 ].ownerDocument;

                                // Reenable scripts
                                jQuery.map( scripts, restoreScript );

                                // Evaluate executable scripts on first document insertion
                                for ( i = 0; i < hasScripts; i++ ) {
                                    node = scripts[ i ];
                                    if ( rscriptType.test( node.type || "" ) &&
                                        !dataPriv.access( node, "globalEval" ) &&
                                        jQuery.contains( doc, node ) ) {

                                        if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

                                            // Optional AJAX dependency, but won't run scripts if not present
                                            if ( jQuery._evalUrl && !node.noModule ) {
                                                jQuery._evalUrl( node.src, {
                                                    nonce: node.nonce || node.getAttribute( "nonce" )
                                                } );
                                            }
                                        } else {
                                            DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
                                        }
                                    }
                                }
                            }
                        }
                    }

                    return collection;
                }

                function remove( elem, selector, keepData ) {
                    var node,
                        nodes = selector ? jQuery.filter( selector, elem ) : elem,
                        i = 0;

                    for ( ; ( node = nodes[ i ] ) != null; i++ ) {
                        if ( !keepData && node.nodeType === 1 ) {
                            jQuery.cleanData( getAll( node ) );
                        }

                        if ( node.parentNode ) {
                            if ( keepData && isAttached( node ) ) {
                                setGlobalEval( getAll( node, "script" ) );
                            }
                            node.parentNode.removeChild( node );
                        }
                    }

                    return elem;
                }

                jQuery.extend( {
                    htmlPrefilter: function( html ) {
                        return html.replace( rxhtmlTag, "<$1></$2>" );
                    },

                    clone: function( elem, dataAndEvents, deepDataAndEvents ) {
                        var i, l, srcElements, destElements,
                            clone = elem.cloneNode( true ),
                            inPage = isAttached( elem );

                        // Fix IE cloning issues
                        if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
                            !jQuery.isXMLDoc( elem ) ) {

                            // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
                            destElements = getAll( clone );
                            srcElements = getAll( elem );

                            for ( i = 0, l = srcElements.length; i < l; i++ ) {
                                fixInput( srcElements[ i ], destElements[ i ] );
                            }
                        }

                        // Copy the events from the original to the clone
                        if ( dataAndEvents ) {
                            if ( deepDataAndEvents ) {
                                srcElements = srcElements || getAll( elem );
                                destElements = destElements || getAll( clone );

                                for ( i = 0, l = srcElements.length; i < l; i++ ) {
                                    cloneCopyEvent( srcElements[ i ], destElements[ i ] );
                                }
                            } else {
                                cloneCopyEvent( elem, clone );
                            }
                        }

                        // Preserve script evaluation history
                        destElements = getAll( clone, "script" );
                        if ( destElements.length > 0 ) {
                            setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
                        }

                        // Return the cloned set
                        return clone;
                    },

                    cleanData: function( elems ) {
                        var data, elem, type,
                            special = jQuery.event.special,
                            i = 0;

                        for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
                            if ( acceptData( elem ) ) {
                                if ( ( data = elem[ dataPriv.expando ] ) ) {
                                    if ( data.events ) {
                                        for ( type in data.events ) {
                                            if ( special[ type ] ) {
                                                jQuery.event.remove( elem, type );

                                                // This is a shortcut to avoid jQuery.event.remove's overhead
                                            } else {
                                                jQuery.removeEvent( elem, type, data.handle );
                                            }
                                        }
                                    }

                                    // Support: Chrome <=35 - 45+
                                    // Assign undefined instead of using delete, see Data#remove
                                    elem[ dataPriv.expando ] = undefined;
                                }
                                if ( elem[ dataUser.expando ] ) {

                                    // Support: Chrome <=35 - 45+
                                    // Assign undefined instead of using delete, see Data#remove
                                    elem[ dataUser.expando ] = undefined;
                                }
                            }
                        }
                    }
                } );

                jQuery.fn.extend( {
                    detach: function( selector ) {
                        return remove( this, selector, true );
                    },

                    remove: function( selector ) {
                        return remove( this, selector );
                    },

                    text: function( value ) {
                        return access( this, function( value ) {
                            return value === undefined ?
                                jQuery.text( this ) :
                                this.empty().each( function() {
                                    if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                                        this.textContent = value;
                                    }
                                } );
                        }, null, value, arguments.length );
                    },

                    append: function() {
                        return domManip( this, arguments, function( elem ) {
                            if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                                var target = manipulationTarget( this, elem );
                                target.appendChild( elem );
                            }
                        } );
                    },

                    prepend: function() {
                        return domManip( this, arguments, function( elem ) {
                            if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                                var target = manipulationTarget( this, elem );
                                target.insertBefore( elem, target.firstChild );
                            }
                        } );
                    },

                    before: function() {
                        return domManip( this, arguments, function( elem ) {
                            if ( this.parentNode ) {
                                this.parentNode.insertBefore( elem, this );
                            }
                        } );
                    },

                    after: function() {
                        return domManip( this, arguments, function( elem ) {
                            if ( this.parentNode ) {
                                this.parentNode.insertBefore( elem, this.nextSibling );
                            }
                        } );
                    },

                    empty: function() {
                        var elem,
                            i = 0;

                        for ( ; ( elem = this[ i ] ) != null; i++ ) {
                            if ( elem.nodeType === 1 ) {

                                // Prevent memory leaks
                                jQuery.cleanData( getAll( elem, false ) );

                                // Remove any remaining nodes
                                elem.textContent = "";
                            }
                        }

                        return this;
                    },

                    clone: function( dataAndEvents, deepDataAndEvents ) {
                        dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
                        deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

                        return this.map( function() {
                            return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
                        } );
                    },

                    html: function( value ) {
                        return access( this, function( value ) {
                            var elem = this[ 0 ] || {},
                                i = 0,
                                l = this.length;

                            if ( value === undefined && elem.nodeType === 1 ) {
                                return elem.innerHTML;
                            }

                            // See if we can take a shortcut and just use innerHTML
                            if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
                                !wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

                                value = jQuery.htmlPrefilter( value );

                                try {
                                    for ( ; i < l; i++ ) {
                                        elem = this[ i ] || {};

                                        // Remove element nodes and prevent memory leaks
                                        if ( elem.nodeType === 1 ) {
                                            jQuery.cleanData( getAll( elem, false ) );
                                            elem.innerHTML = value;
                                        }
                                    }

                                    elem = 0;

                                    // If using innerHTML throws an exception, use the fallback method
                                } catch ( e ) {}
                            }

                            if ( elem ) {
                                this.empty().append( value );
                            }
                        }, null, value, arguments.length );
                    },

                    replaceWith: function() {
                        var ignored = [];

                        // Make the changes, replacing each non-ignored context element with the new content
                        return domManip( this, arguments, function( elem ) {
                            var parent = this.parentNode;

                            if ( jQuery.inArray( this, ignored ) < 0 ) {
                                jQuery.cleanData( getAll( this ) );
                                if ( parent ) {
                                    parent.replaceChild( elem, this );
                                }
                            }

                            // Force callback invocation
                        }, ignored );
                    }
                } );

                jQuery.each( {
                    appendTo: "append",
                    prependTo: "prepend",
                    insertBefore: "before",
                    insertAfter: "after",
                    replaceAll: "replaceWith"
                }, function( name, original ) {
                    jQuery.fn[ name ] = function( selector ) {
                        var elems,
                            ret = [],
                            insert = jQuery( selector ),
                            last = insert.length - 1,
                            i = 0;

                        for ( ; i <= last; i++ ) {
                            elems = i === last ? this : this.clone( true );
                            jQuery( insert[ i ] )[ original ]( elems );

                            // Support: Android <=4.0 only, PhantomJS 1 only
                            // .get() because push.apply(_, arraylike) throws on ancient WebKit
                            push.apply( ret, elems.get() );
                        }

                        return this.pushStack( ret );
                    };
                } );
                var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

                var getStyles = function( elem ) {

                    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
                    // IE throws on elements created in popups
                    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
                    var view = elem.ownerDocument.defaultView;

                    if ( !view || !view.opener ) {
                        view = window;
                    }

                    return view.getComputedStyle( elem );
                };

                var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



                ( function() {

                    // Executing both pixelPosition & boxSizingReliable tests require only one layout
                    // so they're executed at the same time to save the second computation.
                    function computeStyleTests() {

                        // This is a singleton, we need to execute it only once
                        if ( !div ) {
                            return;
                        }

                        container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
                            "margin-top:1px;padding:0;border:0";
                        div.style.cssText =
                            "position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
                            "margin:auto;border:1px;padding:1px;" +
                            "width:60%;top:1%";
                        documentElement.appendChild( container ).appendChild( div );

                        var divStyle = window.getComputedStyle( div );
                        pixelPositionVal = divStyle.top !== "1%";

                        // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
                        reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

                        // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
                        // Some styles come back with percentage values, even though they shouldn't
                        div.style.right = "60%";
                        pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

                        // Support: IE 9 - 11 only
                        // Detect misreporting of content dimensions for box-sizing:border-box elements
                        boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

                        // Support: IE 9 only
                        // Detect overflow:scroll screwiness (gh-3699)
                        // Support: Chrome <=64
                        // Don't get tricked when zoom affects offsetWidth (gh-4029)
                        div.style.position = "absolute";
                        scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

                        documentElement.removeChild( container );

                        // Nullify the div so it wouldn't be stored in the memory and
                        // it will also be a sign that checks already performed
                        div = null;
                    }

                    function roundPixelMeasures( measure ) {
                        return Math.round( parseFloat( measure ) );
                    }

                    var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
                        reliableMarginLeftVal,
                        container = document.createElement( "div" ),
                        div = document.createElement( "div" );

                    // Finish early in limited (non-browser) environments
                    if ( !div.style ) {
                        return;
                    }

                    // Support: IE <=9 - 11 only
                    // Style of cloned element affects source element cloned (#8908)
                    div.style.backgroundClip = "content-box";
                    div.cloneNode( true ).style.backgroundClip = "";
                    support.clearCloneStyle = div.style.backgroundClip === "content-box";

                    jQuery.extend( support, {
                        boxSizingReliable: function() {
                            computeStyleTests();
                            return boxSizingReliableVal;
                        },
                        pixelBoxStyles: function() {
                            computeStyleTests();
                            return pixelBoxStylesVal;
                        },
                        pixelPosition: function() {
                            computeStyleTests();
                            return pixelPositionVal;
                        },
                        reliableMarginLeft: function() {
                            computeStyleTests();
                            return reliableMarginLeftVal;
                        },
                        scrollboxSize: function() {
                            computeStyleTests();
                            return scrollboxSizeVal;
                        }
                    } );
                } )();


                function curCSS( elem, name, computed ) {
                    var width, minWidth, maxWidth, ret,

                        // Support: Firefox 51+
                        // Retrieving style before computed somehow
                        // fixes an issue with getting wrong values
                        // on detached elements
                        style = elem.style;

                    computed = computed || getStyles( elem );

                    // getPropertyValue is needed for:
                    //   .css('filter') (IE 9 only, #12537)
                    //   .css('--customProperty) (#3144)
                    if ( computed ) {
                        ret = computed.getPropertyValue( name ) || computed[ name ];

                        if ( ret === "" && !isAttached( elem ) ) {
                            ret = jQuery.style( elem, name );
                        }

                        // A tribute to the "awesome hack by Dean Edwards"
                        // Android Browser returns percentage for some values,
                        // but width seems to be reliably pixels.
                        // This is against the CSSOM draft spec:
                        // https://drafts.csswg.org/cssom/#resolved-values
                        if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

                            // Remember the original values
                            width = style.width;
                            minWidth = style.minWidth;
                            maxWidth = style.maxWidth;

                            // Put in the new values to get a computed value out
                            style.minWidth = style.maxWidth = style.width = ret;
                            ret = computed.width;

                            // Revert the changed values
                            style.width = width;
                            style.minWidth = minWidth;
                            style.maxWidth = maxWidth;
                        }
                    }

                    return ret !== undefined ?

                        // Support: IE <=9 - 11 only
                        // IE returns zIndex value as an integer.
                        ret + "" :
                        ret;
                }


                function addGetHookIf( conditionFn, hookFn ) {

                    // Define the hook, we'll check on the first run if it's really needed.
                    return {
                        get: function() {
                            if ( conditionFn() ) {

                                // Hook not needed (or it's not possible to use it due
                                // to missing dependency), remove it.
                                delete this.get;
                                return;
                            }

                            // Hook needed; redefine it so that the support test is not executed again.
                            return ( this.get = hookFn ).apply( this, arguments );
                        }
                    };
                }


                var cssPrefixes = [ "Webkit", "Moz", "ms" ],
                    emptyStyle = document.createElement( "div" ).style,
                    vendorProps = {};

// Return a vendor-prefixed property or undefined
                function vendorPropName( name ) {

                    // Check for vendor prefixed names
                    var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
                        i = cssPrefixes.length;

                    while ( i-- ) {
                        name = cssPrefixes[ i ] + capName;
                        if ( name in emptyStyle ) {
                            return name;
                        }
                    }
                }

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
                function finalPropName( name ) {
                    var final = jQuery.cssProps[ name ] || vendorProps[ name ];

                    if ( final ) {
                        return final;
                    }
                    if ( name in emptyStyle ) {
                        return name;
                    }
                    return vendorProps[ name ] = vendorPropName( name ) || name;
                }


                var

                    // Swappable if display is none or starts with table
                    // except "table", "table-cell", or "table-caption"
                    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
                    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
                    rcustomProp = /^--/,
                    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
                    cssNormalTransform = {
                        letterSpacing: "0",
                        fontWeight: "400"
                    };

                function setPositiveNumber( elem, value, subtract ) {

                    // Any relative (+/-) values have already been
                    // normalized at this point
                    var matches = rcssNum.exec( value );
                    return matches ?

                        // Guard against undefined "subtract", e.g., when used as in cssHooks
                        Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
                        value;
                }

                function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
                    var i = dimension === "width" ? 1 : 0,
                        extra = 0,
                        delta = 0;

                    // Adjustment may not be necessary
                    if ( box === ( isBorderBox ? "border" : "content" ) ) {
                        return 0;
                    }

                    for ( ; i < 4; i += 2 ) {

                        // Both box models exclude margin
                        if ( box === "margin" ) {
                            delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
                        }

                        // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
                        if ( !isBorderBox ) {

                            // Add padding
                            delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

                            // For "border" or "margin", add border
                            if ( box !== "padding" ) {
                                delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

                                // But still keep track of it otherwise
                            } else {
                                extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
                            }

                            // If we get here with a border-box (content + padding + border), we're seeking "content" or
                            // "padding" or "margin"
                        } else {

                            // For "content", subtract padding
                            if ( box === "content" ) {
                                delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
                            }

                            // For "content" or "padding", subtract border
                            if ( box !== "margin" ) {
                                delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
                            }
                        }
                    }

                    // Account for positive content-box scroll gutter when requested by providing computedVal
                    if ( !isBorderBox && computedVal >= 0 ) {

                        // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
                        // Assuming integer scroll gutter, subtract the rest and round down
                        delta += Math.max( 0, Math.ceil(
                            elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
                            computedVal -
                            delta -
                            extra -
                            0.5

                            // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
                            // Use an explicit zero to avoid NaN (gh-3964)
                        ) ) || 0;
                    }

                    return delta;
                }

                function getWidthOrHeight( elem, dimension, extra ) {

                    // Start with computed style
                    var styles = getStyles( elem ),

                        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
                        // Fake content-box until we know it's needed to know the true value.
                        boxSizingNeeded = !support.boxSizingReliable() || extra,
                        isBorderBox = boxSizingNeeded &&
                            jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
                        valueIsBorderBox = isBorderBox,

                        val = curCSS( elem, dimension, styles ),
                        offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

                    // Support: Firefox <=54
                    // Return a confounding non-pixel value or feign ignorance, as appropriate.
                    if ( rnumnonpx.test( val ) ) {
                        if ( !extra ) {
                            return val;
                        }
                        val = "auto";
                    }


                    // Fall back to offsetWidth/offsetHeight when value is "auto"
                    // This happens for inline elements with no explicit setting (gh-3571)
                    // Support: Android <=4.1 - 4.3 only
                    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
                    // Support: IE 9-11 only
                    // Also use offsetWidth/offsetHeight for when box sizing is unreliable
                    // We use getClientRects() to check for hidden/disconnected.
                    // In those cases, the computed value can be trusted to be border-box
                    if ( ( !support.boxSizingReliable() && isBorderBox ||
                        val === "auto" ||
                        !parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&
                        elem.getClientRects().length ) {

                        isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

                        // Where available, offsetWidth/offsetHeight approximate border box dimensions.
                        // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
                        // retrieved value as a content box dimension.
                        valueIsBorderBox = offsetProp in elem;
                        if ( valueIsBorderBox ) {
                            val = elem[ offsetProp ];
                        }
                    }

                    // Normalize "" and auto
                    val = parseFloat( val ) || 0;

                    // Adjust for the element's box model
                    return ( val +
                        boxModelAdjustment(
                            elem,
                            dimension,
                            extra || ( isBorderBox ? "border" : "content" ),
                            valueIsBorderBox,
                            styles,

                            // Provide the current computed size to request scroll gutter calculation (gh-3589)
                            val
                        )
                    ) + "px";
                }

                jQuery.extend( {

                    // Add in style property hooks for overriding the default
                    // behavior of getting and setting a style property
                    cssHooks: {
                        opacity: {
                            get: function( elem, computed ) {
                                if ( computed ) {

                                    // We should always get a number back from opacity
                                    var ret = curCSS( elem, "opacity" );
                                    return ret === "" ? "1" : ret;
                                }
                            }
                        }
                    },

                    // Don't automatically add "px" to these possibly-unitless properties
                    cssNumber: {
                        "animationIterationCount": true,
                        "columnCount": true,
                        "fillOpacity": true,
                        "flexGrow": true,
                        "flexShrink": true,
                        "fontWeight": true,
                        "gridArea": true,
                        "gridColumn": true,
                        "gridColumnEnd": true,
                        "gridColumnStart": true,
                        "gridRow": true,
                        "gridRowEnd": true,
                        "gridRowStart": true,
                        "lineHeight": true,
                        "opacity": true,
                        "order": true,
                        "orphans": true,
                        "widows": true,
                        "zIndex": true,
                        "zoom": true
                    },

                    // Add in properties whose names you wish to fix before
                    // setting or getting the value
                    cssProps: {},

                    // Get and set the style property on a DOM Node
                    style: function( elem, name, value, extra ) {

                        // Don't set styles on text and comment nodes
                        if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
                            return;
                        }

                        // Make sure that we're working with the right name
                        var ret, type, hooks,
                            origName = camelCase( name ),
                            isCustomProp = rcustomProp.test( name ),
                            style = elem.style;

                        // Make sure that we're working with the right name. We don't
                        // want to query the value if it is a CSS custom property
                        // since they are user-defined.
                        if ( !isCustomProp ) {
                            name = finalPropName( origName );
                        }

                        // Gets hook for the prefixed version, then unprefixed version
                        hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

                        // Check if we're setting a value
                        if ( value !== undefined ) {
                            type = typeof value;

                            // Convert "+=" or "-=" to relative numbers (#7345)
                            if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
                                value = adjustCSS( elem, name, ret );

                                // Fixes bug #9237
                                type = "number";
                            }

                            // Make sure that null and NaN values aren't set (#7116)
                            if ( value == null || value !== value ) {
                                return;
                            }

                            // If a number was passed in, add the unit (except for certain CSS properties)
                            // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
                            // "px" to a few hardcoded values.
                            if ( type === "number" && !isCustomProp ) {
                                value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
                            }

                            // background-* props affect original clone's values
                            if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
                                style[ name ] = "inherit";
                            }

                            // If a hook was provided, use that value, otherwise just set the specified value
                            if ( !hooks || !( "set" in hooks ) ||
                                ( value = hooks.set( elem, value, extra ) ) !== undefined ) {

                                if ( isCustomProp ) {
                                    style.setProperty( name, value );
                                } else {
                                    style[ name ] = value;
                                }
                            }

                        } else {

                            // If a hook was provided get the non-computed value from there
                            if ( hooks && "get" in hooks &&
                                ( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

                                return ret;
                            }

                            // Otherwise just get the value from the style object
                            return style[ name ];
                        }
                    },

                    css: function( elem, name, extra, styles ) {
                        var val, num, hooks,
                            origName = camelCase( name ),
                            isCustomProp = rcustomProp.test( name );

                        // Make sure that we're working with the right name. We don't
                        // want to modify the value if it is a CSS custom property
                        // since they are user-defined.
                        if ( !isCustomProp ) {
                            name = finalPropName( origName );
                        }

                        // Try prefixed name followed by the unprefixed name
                        hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

                        // If a hook was provided get the computed value from there
                        if ( hooks && "get" in hooks ) {
                            val = hooks.get( elem, true, extra );
                        }

                        // Otherwise, if a way to get the computed value exists, use that
                        if ( val === undefined ) {
                            val = curCSS( elem, name, styles );
                        }

                        // Convert "normal" to computed value
                        if ( val === "normal" && name in cssNormalTransform ) {
                            val = cssNormalTransform[ name ];
                        }

                        // Make numeric if forced or a qualifier was provided and val looks numeric
                        if ( extra === "" || extra ) {
                            num = parseFloat( val );
                            return extra === true || isFinite( num ) ? num || 0 : val;
                        }

                        return val;
                    }
                } );

                jQuery.each( [ "height", "width" ], function( i, dimension ) {
                    jQuery.cssHooks[ dimension ] = {
                        get: function( elem, computed, extra ) {
                            if ( computed ) {

                                // Certain elements can have dimension info if we invisibly show them
                                // but it must have a current display style that would benefit
                                return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

                                // Support: Safari 8+
                                // Table columns in Safari have non-zero offsetWidth & zero
                                // getBoundingClientRect().width unless display is changed.
                                // Support: IE <=11 only
                                // Running getBoundingClientRect on a disconnected node
                                // in IE throws an error.
                                ( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
                                    swap( elem, cssShow, function() {
                                        return getWidthOrHeight( elem, dimension, extra );
                                    } ) :
                                    getWidthOrHeight( elem, dimension, extra );
                            }
                        },

                        set: function( elem, value, extra ) {
                            var matches,
                                styles = getStyles( elem ),

                                // Only read styles.position if the test has a chance to fail
                                // to avoid forcing a reflow.
                                scrollboxSizeBuggy = !support.scrollboxSize() &&
                                    styles.position === "absolute",

                                // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
                                boxSizingNeeded = scrollboxSizeBuggy || extra,
                                isBorderBox = boxSizingNeeded &&
                                    jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
                                subtract = extra ?
                                    boxModelAdjustment(
                                        elem,
                                        dimension,
                                        extra,
                                        isBorderBox,
                                        styles
                                    ) :
                                    0;

                            // Account for unreliable border-box dimensions by comparing offset* to computed and
                            // faking a content-box to get border and padding (gh-3699)
                            if ( isBorderBox && scrollboxSizeBuggy ) {
                                subtract -= Math.ceil(
                                    elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
                                    parseFloat( styles[ dimension ] ) -
                                    boxModelAdjustment( elem, dimension, "border", false, styles ) -
                                    0.5
                                );
                            }

                            // Convert to pixels if value adjustment is needed
                            if ( subtract && ( matches = rcssNum.exec( value ) ) &&
                                ( matches[ 3 ] || "px" ) !== "px" ) {

                                elem.style[ dimension ] = value;
                                value = jQuery.css( elem, dimension );
                            }

                            return setPositiveNumber( elem, value, subtract );
                        }
                    };
                } );

                jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
                    function( elem, computed ) {
                        if ( computed ) {
                            return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
                                elem.getBoundingClientRect().left -
                                swap( elem, { marginLeft: 0 }, function() {
                                    return elem.getBoundingClientRect().left;
                                } )
                            ) + "px";
                        }
                    }
                );

// These hooks are used by animate to expand properties
                jQuery.each( {
                    margin: "",
                    padding: "",
                    border: "Width"
                }, function( prefix, suffix ) {
                    jQuery.cssHooks[ prefix + suffix ] = {
                        expand: function( value ) {
                            var i = 0,
                                expanded = {},

                                // Assumes a single number if not a string
                                parts = typeof value === "string" ? value.split( " " ) : [ value ];

                            for ( ; i < 4; i++ ) {
                                expanded[ prefix + cssExpand[ i ] + suffix ] =
                                    parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
                            }

                            return expanded;
                        }
                    };

                    if ( prefix !== "margin" ) {
                        jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
                    }
                } );

                jQuery.fn.extend( {
                    css: function( name, value ) {
                        return access( this, function( elem, name, value ) {
                            var styles, len,
                                map = {},
                                i = 0;

                            if ( Array.isArray( name ) ) {
                                styles = getStyles( elem );
                                len = name.length;

                                for ( ; i < len; i++ ) {
                                    map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
                                }

                                return map;
                            }

                            return value !== undefined ?
                                jQuery.style( elem, name, value ) :
                                jQuery.css( elem, name );
                        }, name, value, arguments.length > 1 );
                    }
                } );


                function Tween( elem, options, prop, end, easing ) {
                    return new Tween.prototype.init( elem, options, prop, end, easing );
                }
                jQuery.Tween = Tween;

                Tween.prototype = {
                    constructor: Tween,
                    init: function( elem, options, prop, end, easing, unit ) {
                        this.elem = elem;
                        this.prop = prop;
                        this.easing = easing || jQuery.easing._default;
                        this.options = options;
                        this.start = this.now = this.cur();
                        this.end = end;
                        this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
                    },
                    cur: function() {
                        var hooks = Tween.propHooks[ this.prop ];

                        return hooks && hooks.get ?
                            hooks.get( this ) :
                            Tween.propHooks._default.get( this );
                    },
                    run: function( percent ) {
                        var eased,
                            hooks = Tween.propHooks[ this.prop ];

                        if ( this.options.duration ) {
                            this.pos = eased = jQuery.easing[ this.easing ](
                                percent, this.options.duration * percent, 0, 1, this.options.duration
                            );
                        } else {
                            this.pos = eased = percent;
                        }
                        this.now = ( this.end - this.start ) * eased + this.start;

                        if ( this.options.step ) {
                            this.options.step.call( this.elem, this.now, this );
                        }

                        if ( hooks && hooks.set ) {
                            hooks.set( this );
                        } else {
                            Tween.propHooks._default.set( this );
                        }
                        return this;
                    }
                };

                Tween.prototype.init.prototype = Tween.prototype;

                Tween.propHooks = {
                    _default: {
                        get: function( tween ) {
                            var result;

                            // Use a property on the element directly when it is not a DOM element,
                            // or when there is no matching style property that exists.
                            if ( tween.elem.nodeType !== 1 ||
                                tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
                                return tween.elem[ tween.prop ];
                            }

                            // Passing an empty string as a 3rd parameter to .css will automatically
                            // attempt a parseFloat and fallback to a string if the parse fails.
                            // Simple values such as "10px" are parsed to Float;
                            // complex values such as "rotate(1rad)" are returned as-is.
                            result = jQuery.css( tween.elem, tween.prop, "" );

                            // Empty strings, null, undefined and "auto" are converted to 0.
                            return !result || result === "auto" ? 0 : result;
                        },
                        set: function( tween ) {

                            // Use step hook for back compat.
                            // Use cssHook if its there.
                            // Use .style if available and use plain properties where available.
                            if ( jQuery.fx.step[ tween.prop ] ) {
                                jQuery.fx.step[ tween.prop ]( tween );
                            } else if ( tween.elem.nodeType === 1 && (
                                jQuery.cssHooks[ tween.prop ] ||
                                tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
                                jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
                            } else {
                                tween.elem[ tween.prop ] = tween.now;
                            }
                        }
                    }
                };

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
                Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
                    set: function( tween ) {
                        if ( tween.elem.nodeType && tween.elem.parentNode ) {
                            tween.elem[ tween.prop ] = tween.now;
                        }
                    }
                };

                jQuery.easing = {
                    linear: function( p ) {
                        return p;
                    },
                    swing: function( p ) {
                        return 0.5 - Math.cos( p * Math.PI ) / 2;
                    },
                    _default: "swing"
                };

                jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
                jQuery.fx.step = {};




                var
                    fxNow, inProgress,
                    rfxtypes = /^(?:toggle|show|hide)$/,
                    rrun = /queueHooks$/;

                function schedule() {
                    if ( inProgress ) {
                        if ( document.hidden === false && window.requestAnimationFrame ) {
                            window.requestAnimationFrame( schedule );
                        } else {
                            window.setTimeout( schedule, jQuery.fx.interval );
                        }

                        jQuery.fx.tick();
                    }
                }

// Animations created synchronously will run synchronously
                function createFxNow() {
                    window.setTimeout( function() {
                        fxNow = undefined;
                    } );
                    return ( fxNow = Date.now() );
                }

// Generate parameters to create a standard animation
                function genFx( type, includeWidth ) {
                    var which,
                        i = 0,
                        attrs = { height: type };

                    // If we include width, step value is 1 to do all cssExpand values,
                    // otherwise step value is 2 to skip over Left and Right
                    includeWidth = includeWidth ? 1 : 0;
                    for ( ; i < 4; i += 2 - includeWidth ) {
                        which = cssExpand[ i ];
                        attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
                    }

                    if ( includeWidth ) {
                        attrs.opacity = attrs.width = type;
                    }

                    return attrs;
                }

                function createTween( value, prop, animation ) {
                    var tween,
                        collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
                        index = 0,
                        length = collection.length;
                    for ( ; index < length; index++ ) {
                        if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

                            // We're done with this property
                            return tween;
                        }
                    }
                }

                function defaultPrefilter( elem, props, opts ) {
                    var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
                        isBox = "width" in props || "height" in props,
                        anim = this,
                        orig = {},
                        style = elem.style,
                        hidden = elem.nodeType && isHiddenWithinTree( elem ),
                        dataShow = dataPriv.get( elem, "fxshow" );

                    // Queue-skipping animations hijack the fx hooks
                    if ( !opts.queue ) {
                        hooks = jQuery._queueHooks( elem, "fx" );
                        if ( hooks.unqueued == null ) {
                            hooks.unqueued = 0;
                            oldfire = hooks.empty.fire;
                            hooks.empty.fire = function() {
                                if ( !hooks.unqueued ) {
                                    oldfire();
                                }
                            };
                        }
                        hooks.unqueued++;

                        anim.always( function() {

                            // Ensure the complete handler is called before this completes
                            anim.always( function() {
                                hooks.unqueued--;
                                if ( !jQuery.queue( elem, "fx" ).length ) {
                                    hooks.empty.fire();
                                }
                            } );
                        } );
                    }

                    // Detect show/hide animations
                    for ( prop in props ) {
                        value = props[ prop ];
                        if ( rfxtypes.test( value ) ) {
                            delete props[ prop ];
                            toggle = toggle || value === "toggle";
                            if ( value === ( hidden ? "hide" : "show" ) ) {

                                // Pretend to be hidden if this is a "show" and
                                // there is still data from a stopped show/hide
                                if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
                                    hidden = true;

                                    // Ignore all other no-op show/hide data
                                } else {
                                    continue;
                                }
                            }
                            orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
                        }
                    }

                    // Bail out if this is a no-op like .hide().hide()
                    propTween = !jQuery.isEmptyObject( props );
                    if ( !propTween && jQuery.isEmptyObject( orig ) ) {
                        return;
                    }

                    // Restrict "overflow" and "display" styles during box animations
                    if ( isBox && elem.nodeType === 1 ) {

                        // Support: IE <=9 - 11, Edge 12 - 15
                        // Record all 3 overflow attributes because IE does not infer the shorthand
                        // from identically-valued overflowX and overflowY and Edge just mirrors
                        // the overflowX value there.
                        opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

                        // Identify a display type, preferring old show/hide data over the CSS cascade
                        restoreDisplay = dataShow && dataShow.display;
                        if ( restoreDisplay == null ) {
                            restoreDisplay = dataPriv.get( elem, "display" );
                        }
                        display = jQuery.css( elem, "display" );
                        if ( display === "none" ) {
                            if ( restoreDisplay ) {
                                display = restoreDisplay;
                            } else {

                                // Get nonempty value(s) by temporarily forcing visibility
                                showHide( [ elem ], true );
                                restoreDisplay = elem.style.display || restoreDisplay;
                                display = jQuery.css( elem, "display" );
                                showHide( [ elem ] );
                            }
                        }

                        // Animate inline elements as inline-block
                        if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
                            if ( jQuery.css( elem, "float" ) === "none" ) {

                                // Restore the original display value at the end of pure show/hide animations
                                if ( !propTween ) {
                                    anim.done( function() {
                                        style.display = restoreDisplay;
                                    } );
                                    if ( restoreDisplay == null ) {
                                        display = style.display;
                                        restoreDisplay = display === "none" ? "" : display;
                                    }
                                }
                                style.display = "inline-block";
                            }
                        }
                    }

                    if ( opts.overflow ) {
                        style.overflow = "hidden";
                        anim.always( function() {
                            style.overflow = opts.overflow[ 0 ];
                            style.overflowX = opts.overflow[ 1 ];
                            style.overflowY = opts.overflow[ 2 ];
                        } );
                    }

                    // Implement show/hide animations
                    propTween = false;
                    for ( prop in orig ) {

                        // General show/hide setup for this element animation
                        if ( !propTween ) {
                            if ( dataShow ) {
                                if ( "hidden" in dataShow ) {
                                    hidden = dataShow.hidden;
                                }
                            } else {
                                dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
                            }

                            // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                            if ( toggle ) {
                                dataShow.hidden = !hidden;
                            }

                            // Show elements before animating them
                            if ( hidden ) {
                                showHide( [ elem ], true );
                            }

                            /* eslint-disable no-loop-func */

                            anim.done( function() {

                                /* eslint-enable no-loop-func */

                                // The final step of a "hide" animation is actually hiding the element
                                if ( !hidden ) {
                                    showHide( [ elem ] );
                                }
                                dataPriv.remove( elem, "fxshow" );
                                for ( prop in orig ) {
                                    jQuery.style( elem, prop, orig[ prop ] );
                                }
                            } );
                        }

                        // Per-property setup
                        propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
                        if ( !( prop in dataShow ) ) {
                            dataShow[ prop ] = propTween.start;
                            if ( hidden ) {
                                propTween.end = propTween.start;
                                propTween.start = 0;
                            }
                        }
                    }
                }

                function propFilter( props, specialEasing ) {
                    var index, name, easing, value, hooks;

                    // camelCase, specialEasing and expand cssHook pass
                    for ( index in props ) {
                        name = camelCase( index );
                        easing = specialEasing[ name ];
                        value = props[ index ];
                        if ( Array.isArray( value ) ) {
                            easing = value[ 1 ];
                            value = props[ index ] = value[ 0 ];
                        }

                        if ( index !== name ) {
                            props[ name ] = value;
                            delete props[ index ];
                        }

                        hooks = jQuery.cssHooks[ name ];
                        if ( hooks && "expand" in hooks ) {
                            value = hooks.expand( value );
                            delete props[ name ];

                            // Not quite $.extend, this won't overwrite existing keys.
                            // Reusing 'index' because we have the correct "name"
                            for ( index in value ) {
                                if ( !( index in props ) ) {
                                    props[ index ] = value[ index ];
                                    specialEasing[ index ] = easing;
                                }
                            }
                        } else {
                            specialEasing[ name ] = easing;
                        }
                    }
                }

                function Animation( elem, properties, options ) {
                    var result,
                        stopped,
                        index = 0,
                        length = Animation.prefilters.length,
                        deferred = jQuery.Deferred().always( function() {

                            // Don't match elem in the :animated selector
                            delete tick.elem;
                        } ),
                        tick = function() {
                            if ( stopped ) {
                                return false;
                            }
                            var currentTime = fxNow || createFxNow(),
                                remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

                                // Support: Android 2.3 only
                                // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
                                temp = remaining / animation.duration || 0,
                                percent = 1 - temp,
                                index = 0,
                                length = animation.tweens.length;

                            for ( ; index < length; index++ ) {
                                animation.tweens[ index ].run( percent );
                            }

                            deferred.notifyWith( elem, [ animation, percent, remaining ] );

                            // If there's more to do, yield
                            if ( percent < 1 && length ) {
                                return remaining;
                            }

                            // If this was an empty animation, synthesize a final progress notification
                            if ( !length ) {
                                deferred.notifyWith( elem, [ animation, 1, 0 ] );
                            }

                            // Resolve the animation and report its conclusion
                            deferred.resolveWith( elem, [ animation ] );
                            return false;
                        },
                        animation = deferred.promise( {
                            elem: elem,
                            props: jQuery.extend( {}, properties ),
                            opts: jQuery.extend( true, {
                                specialEasing: {},
                                easing: jQuery.easing._default
                            }, options ),
                            originalProperties: properties,
                            originalOptions: options,
                            startTime: fxNow || createFxNow(),
                            duration: options.duration,
                            tweens: [],
                            createTween: function( prop, end ) {
                                var tween = jQuery.Tween( elem, animation.opts, prop, end,
                                    animation.opts.specialEasing[ prop ] || animation.opts.easing );
                                animation.tweens.push( tween );
                                return tween;
                            },
                            stop: function( gotoEnd ) {
                                var index = 0,

                                    // If we are going to the end, we want to run all the tweens
                                    // otherwise we skip this part
                                    length = gotoEnd ? animation.tweens.length : 0;
                                if ( stopped ) {
                                    return this;
                                }
                                stopped = true;
                                for ( ; index < length; index++ ) {
                                    animation.tweens[ index ].run( 1 );
                                }

                                // Resolve when we played the last frame; otherwise, reject
                                if ( gotoEnd ) {
                                    deferred.notifyWith( elem, [ animation, 1, 0 ] );
                                    deferred.resolveWith( elem, [ animation, gotoEnd ] );
                                } else {
                                    deferred.rejectWith( elem, [ animation, gotoEnd ] );
                                }
                                return this;
                            }
                        } ),
                        props = animation.props;

                    propFilter( props, animation.opts.specialEasing );

                    for ( ; index < length; index++ ) {
                        result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
                        if ( result ) {
                            if ( isFunction( result.stop ) ) {
                                jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
                                    result.stop.bind( result );
                            }
                            return result;
                        }
                    }

                    jQuery.map( props, createTween, animation );

                    if ( isFunction( animation.opts.start ) ) {
                        animation.opts.start.call( elem, animation );
                    }

                    // Attach callbacks from options
                    animation
                        .progress( animation.opts.progress )
                        .done( animation.opts.done, animation.opts.complete )
                        .fail( animation.opts.fail )
                        .always( animation.opts.always );

                    jQuery.fx.timer(
                        jQuery.extend( tick, {
                            elem: elem,
                            anim: animation,
                            queue: animation.opts.queue
                        } )
                    );

                    return animation;
                }

                jQuery.Animation = jQuery.extend( Animation, {

                    tweeners: {
                        "*": [ function( prop, value ) {
                            var tween = this.createTween( prop, value );
                            adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
                            return tween;
                        } ]
                    },

                    tweener: function( props, callback ) {
                        if ( isFunction( props ) ) {
                            callback = props;
                            props = [ "*" ];
                        } else {
                            props = props.match( rnothtmlwhite );
                        }

                        var prop,
                            index = 0,
                            length = props.length;

                        for ( ; index < length; index++ ) {
                            prop = props[ index ];
                            Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
                            Animation.tweeners[ prop ].unshift( callback );
                        }
                    },

                    prefilters: [ defaultPrefilter ],

                    prefilter: function( callback, prepend ) {
                        if ( prepend ) {
                            Animation.prefilters.unshift( callback );
                        } else {
                            Animation.prefilters.push( callback );
                        }
                    }
                } );

                jQuery.speed = function( speed, easing, fn ) {
                    var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
                        complete: fn || !fn && easing ||
                            isFunction( speed ) && speed,
                        duration: speed,
                        easing: fn && easing || easing && !isFunction( easing ) && easing
                    };

                    // Go to the end state if fx are off
                    if ( jQuery.fx.off ) {
                        opt.duration = 0;

                    } else {
                        if ( typeof opt.duration !== "number" ) {
                            if ( opt.duration in jQuery.fx.speeds ) {
                                opt.duration = jQuery.fx.speeds[ opt.duration ];

                            } else {
                                opt.duration = jQuery.fx.speeds._default;
                            }
                        }
                    }

                    // Normalize opt.queue - true/undefined/null -> "fx"
                    if ( opt.queue == null || opt.queue === true ) {
                        opt.queue = "fx";
                    }

                    // Queueing
                    opt.old = opt.complete;

                    opt.complete = function() {
                        if ( isFunction( opt.old ) ) {
                            opt.old.call( this );
                        }

                        if ( opt.queue ) {
                            jQuery.dequeue( this, opt.queue );
                        }
                    };

                    return opt;
                };

                jQuery.fn.extend( {
                    fadeTo: function( speed, to, easing, callback ) {

                        // Show any hidden elements after setting opacity to 0
                        return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

                            // Animate to the value specified
                            .end().animate( { opacity: to }, speed, easing, callback );
                    },
                    animate: function( prop, speed, easing, callback ) {
                        var empty = jQuery.isEmptyObject( prop ),
                            optall = jQuery.speed( speed, easing, callback ),
                            doAnimation = function() {

                                // Operate on a copy of prop so per-property easing won't be lost
                                var anim = Animation( this, jQuery.extend( {}, prop ), optall );

                                // Empty animations, or finishing resolves immediately
                                if ( empty || dataPriv.get( this, "finish" ) ) {
                                    anim.stop( true );
                                }
                            };
                        doAnimation.finish = doAnimation;

                        return empty || optall.queue === false ?
                            this.each( doAnimation ) :
                            this.queue( optall.queue, doAnimation );
                    },
                    stop: function( type, clearQueue, gotoEnd ) {
                        var stopQueue = function( hooks ) {
                            var stop = hooks.stop;
                            delete hooks.stop;
                            stop( gotoEnd );
                        };

                        if ( typeof type !== "string" ) {
                            gotoEnd = clearQueue;
                            clearQueue = type;
                            type = undefined;
                        }
                        if ( clearQueue && type !== false ) {
                            this.queue( type || "fx", [] );
                        }

                        return this.each( function() {
                            var dequeue = true,
                                index = type != null && type + "queueHooks",
                                timers = jQuery.timers,
                                data = dataPriv.get( this );

                            if ( index ) {
                                if ( data[ index ] && data[ index ].stop ) {
                                    stopQueue( data[ index ] );
                                }
                            } else {
                                for ( index in data ) {
                                    if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
                                        stopQueue( data[ index ] );
                                    }
                                }
                            }

                            for ( index = timers.length; index--; ) {
                                if ( timers[ index ].elem === this &&
                                    ( type == null || timers[ index ].queue === type ) ) {

                                    timers[ index ].anim.stop( gotoEnd );
                                    dequeue = false;
                                    timers.splice( index, 1 );
                                }
                            }

                            // Start the next in the queue if the last step wasn't forced.
                            // Timers currently will call their complete callbacks, which
                            // will dequeue but only if they were gotoEnd.
                            if ( dequeue || !gotoEnd ) {
                                jQuery.dequeue( this, type );
                            }
                        } );
                    },
                    finish: function( type ) {
                        if ( type !== false ) {
                            type = type || "fx";
                        }
                        return this.each( function() {
                            var index,
                                data = dataPriv.get( this ),
                                queue = data[ type + "queue" ],
                                hooks = data[ type + "queueHooks" ],
                                timers = jQuery.timers,
                                length = queue ? queue.length : 0;

                            // Enable finishing flag on private data
                            data.finish = true;

                            // Empty the queue first
                            jQuery.queue( this, type, [] );

                            if ( hooks && hooks.stop ) {
                                hooks.stop.call( this, true );
                            }

                            // Look for any active animations, and finish them
                            for ( index = timers.length; index--; ) {
                                if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
                                    timers[ index ].anim.stop( true );
                                    timers.splice( index, 1 );
                                }
                            }

                            // Look for any animations in the old queue and finish them
                            for ( index = 0; index < length; index++ ) {
                                if ( queue[ index ] && queue[ index ].finish ) {
                                    queue[ index ].finish.call( this );
                                }
                            }

                            // Turn off finishing flag
                            delete data.finish;
                        } );
                    }
                } );

                jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
                    var cssFn = jQuery.fn[ name ];
                    jQuery.fn[ name ] = function( speed, easing, callback ) {
                        return speed == null || typeof speed === "boolean" ?
                            cssFn.apply( this, arguments ) :
                            this.animate( genFx( name, true ), speed, easing, callback );
                    };
                } );

// Generate shortcuts for custom animations
                jQuery.each( {
                    slideDown: genFx( "show" ),
                    slideUp: genFx( "hide" ),
                    slideToggle: genFx( "toggle" ),
                    fadeIn: { opacity: "show" },
                    fadeOut: { opacity: "hide" },
                    fadeToggle: { opacity: "toggle" }
                }, function( name, props ) {
                    jQuery.fn[ name ] = function( speed, easing, callback ) {
                        return this.animate( props, speed, easing, callback );
                    };
                } );

                jQuery.timers = [];
                jQuery.fx.tick = function() {
                    var timer,
                        i = 0,
                        timers = jQuery.timers;

                    fxNow = Date.now();

                    for ( ; i < timers.length; i++ ) {
                        timer = timers[ i ];

                        // Run the timer and safely remove it when done (allowing for external removal)
                        if ( !timer() && timers[ i ] === timer ) {
                            timers.splice( i--, 1 );
                        }
                    }

                    if ( !timers.length ) {
                        jQuery.fx.stop();
                    }
                    fxNow = undefined;
                };

                jQuery.fx.timer = function( timer ) {
                    jQuery.timers.push( timer );
                    jQuery.fx.start();
                };

                jQuery.fx.interval = 13;
                jQuery.fx.start = function() {
                    if ( inProgress ) {
                        return;
                    }

                    inProgress = true;
                    schedule();
                };

                jQuery.fx.stop = function() {
                    inProgress = null;
                };

                jQuery.fx.speeds = {
                    slow: 600,
                    fast: 200,

                    // Default speed
                    _default: 400
                };


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
                jQuery.fn.delay = function( time, type ) {
                    time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
                    type = type || "fx";

                    return this.queue( type, function( next, hooks ) {
                        var timeout = window.setTimeout( next, time );
                        hooks.stop = function() {
                            window.clearTimeout( timeout );
                        };
                    } );
                };


                ( function() {
                    var input = document.createElement( "input" ),
                        select = document.createElement( "select" ),
                        opt = select.appendChild( document.createElement( "option" ) );

                    input.type = "checkbox";

                    // Support: Android <=4.3 only
                    // Default value for a checkbox should be "on"
                    support.checkOn = input.value !== "";

                    // Support: IE <=11 only
                    // Must access selectedIndex to make default options select
                    support.optSelected = opt.selected;

                    // Support: IE <=11 only
                    // An input loses its value after becoming a radio
                    input = document.createElement( "input" );
                    input.value = "t";
                    input.type = "radio";
                    support.radioValue = input.value === "t";
                } )();


                var boolHook,
                    attrHandle = jQuery.expr.attrHandle;

                jQuery.fn.extend( {
                    attr: function( name, value ) {
                        return access( this, jQuery.attr, name, value, arguments.length > 1 );
                    },

                    removeAttr: function( name ) {
                        return this.each( function() {
                            jQuery.removeAttr( this, name );
                        } );
                    }
                } );

                jQuery.extend( {
                    attr: function( elem, name, value ) {
                        var ret, hooks,
                            nType = elem.nodeType;

                        // Don't get/set attributes on text, comment and attribute nodes
                        if ( nType === 3 || nType === 8 || nType === 2 ) {
                            return;
                        }

                        // Fallback to prop when attributes are not supported
                        if ( typeof elem.getAttribute === "undefined" ) {
                            return jQuery.prop( elem, name, value );
                        }

                        // Attribute hooks are determined by the lowercase version
                        // Grab necessary hook if one is defined
                        if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
                            hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
                                ( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
                        }

                        if ( value !== undefined ) {
                            if ( value === null ) {
                                jQuery.removeAttr( elem, name );
                                return;
                            }

                            if ( hooks && "set" in hooks &&
                                ( ret = hooks.set( elem, value, name ) ) !== undefined ) {
                                return ret;
                            }

                            elem.setAttribute( name, value + "" );
                            return value;
                        }

                        if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
                            return ret;
                        }

                        ret = jQuery.find.attr( elem, name );

                        // Non-existent attributes return null, we normalize to undefined
                        return ret == null ? undefined : ret;
                    },

                    attrHooks: {
                        type: {
                            set: function( elem, value ) {
                                if ( !support.radioValue && value === "radio" &&
                                    nodeName( elem, "input" ) ) {
                                    var val = elem.value;
                                    elem.setAttribute( "type", value );
                                    if ( val ) {
                                        elem.value = val;
                                    }
                                    return value;
                                }
                            }
                        }
                    },

                    removeAttr: function( elem, value ) {
                        var name,
                            i = 0,

                            // Attribute names can contain non-HTML whitespace characters
                            // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
                            attrNames = value && value.match( rnothtmlwhite );

                        if ( attrNames && elem.nodeType === 1 ) {
                            while ( ( name = attrNames[ i++ ] ) ) {
                                elem.removeAttribute( name );
                            }
                        }
                    }
                } );

// Hooks for boolean attributes
                boolHook = {
                    set: function( elem, value, name ) {
                        if ( value === false ) {

                            // Remove boolean attributes when set to false
                            jQuery.removeAttr( elem, name );
                        } else {
                            elem.setAttribute( name, name );
                        }
                        return name;
                    }
                };

                jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
                    var getter = attrHandle[ name ] || jQuery.find.attr;

                    attrHandle[ name ] = function( elem, name, isXML ) {
                        var ret, handle,
                            lowercaseName = name.toLowerCase();

                        if ( !isXML ) {

                            // Avoid an infinite loop by temporarily removing this function from the getter
                            handle = attrHandle[ lowercaseName ];
                            attrHandle[ lowercaseName ] = ret;
                            ret = getter( elem, name, isXML ) != null ?
                                lowercaseName :
                                null;
                            attrHandle[ lowercaseName ] = handle;
                        }
                        return ret;
                    };
                } );




                var rfocusable = /^(?:input|select|textarea|button)$/i,
                    rclickable = /^(?:a|area)$/i;

                jQuery.fn.extend( {
                    prop: function( name, value ) {
                        return access( this, jQuery.prop, name, value, arguments.length > 1 );
                    },

                    removeProp: function( name ) {
                        return this.each( function() {
                            delete this[ jQuery.propFix[ name ] || name ];
                        } );
                    }
                } );

                jQuery.extend( {
                    prop: function( elem, name, value ) {
                        var ret, hooks,
                            nType = elem.nodeType;

                        // Don't get/set properties on text, comment and attribute nodes
                        if ( nType === 3 || nType === 8 || nType === 2 ) {
                            return;
                        }

                        if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

                            // Fix name and attach hooks
                            name = jQuery.propFix[ name ] || name;
                            hooks = jQuery.propHooks[ name ];
                        }

                        if ( value !== undefined ) {
                            if ( hooks && "set" in hooks &&
                                ( ret = hooks.set( elem, value, name ) ) !== undefined ) {
                                return ret;
                            }

                            return ( elem[ name ] = value );
                        }

                        if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
                            return ret;
                        }

                        return elem[ name ];
                    },

                    propHooks: {
                        tabIndex: {
                            get: function( elem ) {

                                // Support: IE <=9 - 11 only
                                // elem.tabIndex doesn't always return the
                                // correct value when it hasn't been explicitly set
                                // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                                // Use proper attribute retrieval(#12072)
                                var tabindex = jQuery.find.attr( elem, "tabindex" );

                                if ( tabindex ) {
                                    return parseInt( tabindex, 10 );
                                }

                                if (
                                    rfocusable.test( elem.nodeName ) ||
                                    rclickable.test( elem.nodeName ) &&
                                    elem.href
                                ) {
                                    return 0;
                                }

                                return -1;
                            }
                        }
                    },

                    propFix: {
                        "for": "htmlFor",
                        "class": "className"
                    }
                } );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
                if ( !support.optSelected ) {
                    jQuery.propHooks.selected = {
                        get: function( elem ) {

                            /* eslint no-unused-expressions: "off" */

                            var parent = elem.parentNode;
                            if ( parent && parent.parentNode ) {
                                parent.parentNode.selectedIndex;
                            }
                            return null;
                        },
                        set: function( elem ) {

                            /* eslint no-unused-expressions: "off" */

                            var parent = elem.parentNode;
                            if ( parent ) {
                                parent.selectedIndex;

                                if ( parent.parentNode ) {
                                    parent.parentNode.selectedIndex;
                                }
                            }
                        }
                    };
                }

                jQuery.each( [
                    "tabIndex",
                    "readOnly",
                    "maxLength",
                    "cellSpacing",
                    "cellPadding",
                    "rowSpan",
                    "colSpan",
                    "useMap",
                    "frameBorder",
                    "contentEditable"
                ], function() {
                    jQuery.propFix[ this.toLowerCase() ] = this;
                } );




                // Strip and collapse whitespace according to HTML spec
                // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
                function stripAndCollapse( value ) {
                    var tokens = value.match( rnothtmlwhite ) || [];
                    return tokens.join( " " );
                }


                function getClass( elem ) {
                    return elem.getAttribute && elem.getAttribute( "class" ) || "";
                }

                function classesToArray( value ) {
                    if ( Array.isArray( value ) ) {
                        return value;
                    }
                    if ( typeof value === "string" ) {
                        return value.match( rnothtmlwhite ) || [];
                    }
                    return [];
                }

                jQuery.fn.extend( {
                    addClass: function( value ) {
                        var classes, elem, cur, curValue, clazz, j, finalValue,
                            i = 0;

                        if ( isFunction( value ) ) {
                            return this.each( function( j ) {
                                jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
                            } );
                        }

                        classes = classesToArray( value );

                        if ( classes.length ) {
                            while ( ( elem = this[ i++ ] ) ) {
                                curValue = getClass( elem );
                                cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

                                if ( cur ) {
                                    j = 0;
                                    while ( ( clazz = classes[ j++ ] ) ) {
                                        if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
                                            cur += clazz + " ";
                                        }
                                    }

                                    // Only assign if different to avoid unneeded rendering.
                                    finalValue = stripAndCollapse( cur );
                                    if ( curValue !== finalValue ) {
                                        elem.setAttribute( "class", finalValue );
                                    }
                                }
                            }
                        }

                        return this;
                    },

                    removeClass: function( value ) {
                        var classes, elem, cur, curValue, clazz, j, finalValue,
                            i = 0;

                        if ( isFunction( value ) ) {
                            return this.each( function( j ) {
                                jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
                            } );
                        }

                        if ( !arguments.length ) {
                            return this.attr( "class", "" );
                        }

                        classes = classesToArray( value );

                        if ( classes.length ) {
                            while ( ( elem = this[ i++ ] ) ) {
                                curValue = getClass( elem );

                                // This expression is here for better compressibility (see addClass)
                                cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

                                if ( cur ) {
                                    j = 0;
                                    while ( ( clazz = classes[ j++ ] ) ) {

                                        // Remove *all* instances
                                        while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
                                            cur = cur.replace( " " + clazz + " ", " " );
                                        }
                                    }

                                    // Only assign if different to avoid unneeded rendering.
                                    finalValue = stripAndCollapse( cur );
                                    if ( curValue !== finalValue ) {
                                        elem.setAttribute( "class", finalValue );
                                    }
                                }
                            }
                        }

                        return this;
                    },

                    toggleClass: function( value, stateVal ) {
                        var type = typeof value,
                            isValidValue = type === "string" || Array.isArray( value );

                        if ( typeof stateVal === "boolean" && isValidValue ) {
                            return stateVal ? this.addClass( value ) : this.removeClass( value );
                        }

                        if ( isFunction( value ) ) {
                            return this.each( function( i ) {
                                jQuery( this ).toggleClass(
                                    value.call( this, i, getClass( this ), stateVal ),
                                    stateVal
                                );
                            } );
                        }

                        return this.each( function() {
                            var className, i, self, classNames;

                            if ( isValidValue ) {

                                // Toggle individual class names
                                i = 0;
                                self = jQuery( this );
                                classNames = classesToArray( value );

                                while ( ( className = classNames[ i++ ] ) ) {

                                    // Check each className given, space separated list
                                    if ( self.hasClass( className ) ) {
                                        self.removeClass( className );
                                    } else {
                                        self.addClass( className );
                                    }
                                }

                                // Toggle whole class name
                            } else if ( value === undefined || type === "boolean" ) {
                                className = getClass( this );
                                if ( className ) {

                                    // Store className if set
                                    dataPriv.set( this, "__className__", className );
                                }

                                // If the element has a class name or if we're passed `false`,
                                // then remove the whole classname (if there was one, the above saved it).
                                // Otherwise bring back whatever was previously saved (if anything),
                                // falling back to the empty string if nothing was stored.
                                if ( this.setAttribute ) {
                                    this.setAttribute( "class",
                                        className || value === false ?
                                            "" :
                                            dataPriv.get( this, "__className__" ) || ""
                                    );
                                }
                            }
                        } );
                    },

                    hasClass: function( selector ) {
                        var className, elem,
                            i = 0;

                        className = " " + selector + " ";
                        while ( ( elem = this[ i++ ] ) ) {
                            if ( elem.nodeType === 1 &&
                                ( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
                                return true;
                            }
                        }

                        return false;
                    }
                } );




                var rreturn = /\r/g;

                jQuery.fn.extend( {
                    val: function( value ) {
                        var hooks, ret, valueIsFunction,
                            elem = this[ 0 ];

                        if ( !arguments.length ) {
                            if ( elem ) {
                                hooks = jQuery.valHooks[ elem.type ] ||
                                    jQuery.valHooks[ elem.nodeName.toLowerCase() ];

                                if ( hooks &&
                                    "get" in hooks &&
                                    ( ret = hooks.get( elem, "value" ) ) !== undefined
                                ) {
                                    return ret;
                                }

                                ret = elem.value;

                                // Handle most common string cases
                                if ( typeof ret === "string" ) {
                                    return ret.replace( rreturn, "" );
                                }

                                // Handle cases where value is null/undef or number
                                return ret == null ? "" : ret;
                            }

                            return;
                        }

                        valueIsFunction = isFunction( value );

                        return this.each( function( i ) {
                            var val;

                            if ( this.nodeType !== 1 ) {
                                return;
                            }

                            if ( valueIsFunction ) {
                                val = value.call( this, i, jQuery( this ).val() );
                            } else {
                                val = value;
                            }

                            // Treat null/undefined as ""; convert numbers to string
                            if ( val == null ) {
                                val = "";

                            } else if ( typeof val === "number" ) {
                                val += "";

                            } else if ( Array.isArray( val ) ) {
                                val = jQuery.map( val, function( value ) {
                                    return value == null ? "" : value + "";
                                } );
                            }

                            hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

                            // If set returns undefined, fall back to normal setting
                            if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
                                this.value = val;
                            }
                        } );
                    }
                } );

                jQuery.extend( {
                    valHooks: {
                        option: {
                            get: function( elem ) {

                                var val = jQuery.find.attr( elem, "value" );
                                return val != null ?
                                    val :

                                    // Support: IE <=10 - 11 only
                                    // option.text throws exceptions (#14686, #14858)
                                    // Strip and collapse whitespace
                                    // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                                    stripAndCollapse( jQuery.text( elem ) );
                            }
                        },
                        select: {
                            get: function( elem ) {
                                var value, option, i,
                                    options = elem.options,
                                    index = elem.selectedIndex,
                                    one = elem.type === "select-one",
                                    values = one ? null : [],
                                    max = one ? index + 1 : options.length;

                                if ( index < 0 ) {
                                    i = max;

                                } else {
                                    i = one ? index : 0;
                                }

                                // Loop through all the selected options
                                for ( ; i < max; i++ ) {
                                    option = options[ i ];

                                    // Support: IE <=9 only
                                    // IE8-9 doesn't update selected after form reset (#2551)
                                    if ( ( option.selected || i === index ) &&

                                        // Don't return options that are disabled or in a disabled optgroup
                                        !option.disabled &&
                                        ( !option.parentNode.disabled ||
                                            !nodeName( option.parentNode, "optgroup" ) ) ) {

                                        // Get the specific value for the option
                                        value = jQuery( option ).val();

                                        // We don't need an array for one selects
                                        if ( one ) {
                                            return value;
                                        }

                                        // Multi-Selects return an array
                                        values.push( value );
                                    }
                                }

                                return values;
                            },

                            set: function( elem, value ) {
                                var optionSet, option,
                                    options = elem.options,
                                    values = jQuery.makeArray( value ),
                                    i = options.length;

                                while ( i-- ) {
                                    option = options[ i ];

                                    /* eslint-disable no-cond-assign */

                                    if ( option.selected =
                                        jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
                                    ) {
                                        optionSet = true;
                                    }

                                    /* eslint-enable no-cond-assign */
                                }

                                // Force browsers to behave consistently when non-matching value is set
                                if ( !optionSet ) {
                                    elem.selectedIndex = -1;
                                }
                                return values;
                            }
                        }
                    }
                } );

// Radios and checkboxes getter/setter
                jQuery.each( [ "radio", "checkbox" ], function() {
                    jQuery.valHooks[ this ] = {
                        set: function( elem, value ) {
                            if ( Array.isArray( value ) ) {
                                return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
                            }
                        }
                    };
                    if ( !support.checkOn ) {
                        jQuery.valHooks[ this ].get = function( elem ) {
                            return elem.getAttribute( "value" ) === null ? "on" : elem.value;
                        };
                    }
                } );




// Return jQuery for attributes-only inclusion


                support.focusin = "onfocusin" in window;


                var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
                    stopPropagationCallback = function( e ) {
                        e.stopPropagation();
                    };

                jQuery.extend( jQuery.event, {

                    trigger: function( event, data, elem, onlyHandlers ) {

                        var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
                            eventPath = [ elem || document ],
                            type = hasOwn.call( event, "type" ) ? event.type : event,
                            namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

                        cur = lastElement = tmp = elem = elem || document;

                        // Don't do events on text and comment nodes
                        if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
                            return;
                        }

                        // focus/blur morphs to focusin/out; ensure we're not firing them right now
                        if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
                            return;
                        }

                        if ( type.indexOf( "." ) > -1 ) {

                            // Namespaced trigger; create a regexp to match event type in handle()
                            namespaces = type.split( "." );
                            type = namespaces.shift();
                            namespaces.sort();
                        }
                        ontype = type.indexOf( ":" ) < 0 && "on" + type;

                        // Caller can pass in a jQuery.Event object, Object, or just an event type string
                        event = event[ jQuery.expando ] ?
                            event :
                            new jQuery.Event( type, typeof event === "object" && event );

                        // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
                        event.isTrigger = onlyHandlers ? 2 : 3;
                        event.namespace = namespaces.join( "." );
                        event.rnamespace = event.namespace ?
                            new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
                            null;

                        // Clean up the event in case it is being reused
                        event.result = undefined;
                        if ( !event.target ) {
                            event.target = elem;
                        }

                        // Clone any incoming data and prepend the event, creating the handler arg list
                        data = data == null ?
                            [ event ] :
                            jQuery.makeArray( data, [ event ] );

                        // Allow special events to draw outside the lines
                        special = jQuery.event.special[ type ] || {};
                        if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
                            return;
                        }

                        // Determine event propagation path in advance, per W3C events spec (#9951)
                        // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
                        if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

                            bubbleType = special.delegateType || type;
                            if ( !rfocusMorph.test( bubbleType + type ) ) {
                                cur = cur.parentNode;
                            }
                            for ( ; cur; cur = cur.parentNode ) {
                                eventPath.push( cur );
                                tmp = cur;
                            }

                            // Only add window if we got to document (e.g., not plain obj or detached DOM)
                            if ( tmp === ( elem.ownerDocument || document ) ) {
                                eventPath.push( tmp.defaultView || tmp.parentWindow || window );
                            }
                        }

                        // Fire handlers on the event path
                        i = 0;
                        while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
                            lastElement = cur;
                            event.type = i > 1 ?
                                bubbleType :
                                special.bindType || type;

                            // jQuery handler
                            handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
                                dataPriv.get( cur, "handle" );
                            if ( handle ) {
                                handle.apply( cur, data );
                            }

                            // Native handler
                            handle = ontype && cur[ ontype ];
                            if ( handle && handle.apply && acceptData( cur ) ) {
                                event.result = handle.apply( cur, data );
                                if ( event.result === false ) {
                                    event.preventDefault();
                                }
                            }
                        }
                        event.type = type;

                        // If nobody prevented the default action, do it now
                        if ( !onlyHandlers && !event.isDefaultPrevented() ) {

                            if ( ( !special._default ||
                                special._default.apply( eventPath.pop(), data ) === false ) &&
                                acceptData( elem ) ) {

                                // Call a native DOM method on the target with the same name as the event.
                                // Don't do default actions on window, that's where global variables be (#6170)
                                if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

                                    // Don't re-trigger an onFOO event when we call its FOO() method
                                    tmp = elem[ ontype ];

                                    if ( tmp ) {
                                        elem[ ontype ] = null;
                                    }

                                    // Prevent re-triggering of the same event, since we already bubbled it above
                                    jQuery.event.triggered = type;

                                    if ( event.isPropagationStopped() ) {
                                        lastElement.addEventListener( type, stopPropagationCallback );
                                    }

                                    elem[ type ]();

                                    if ( event.isPropagationStopped() ) {
                                        lastElement.removeEventListener( type, stopPropagationCallback );
                                    }

                                    jQuery.event.triggered = undefined;

                                    if ( tmp ) {
                                        elem[ ontype ] = tmp;
                                    }
                                }
                            }
                        }

                        return event.result;
                    },

                    // Piggyback on a donor event to simulate a different one
                    // Used only for `focus(in | out)` events
                    simulate: function( type, elem, event ) {
                        var e = jQuery.extend(
                            new jQuery.Event(),
                            event,
                            {
                                type: type,
                                isSimulated: true
                            }
                        );

                        jQuery.event.trigger( e, null, elem );
                    }

                } );

                jQuery.fn.extend( {

                    trigger: function( type, data ) {
                        return this.each( function() {
                            jQuery.event.trigger( type, data, this );
                        } );
                    },
                    triggerHandler: function( type, data ) {
                        var elem = this[ 0 ];
                        if ( elem ) {
                            return jQuery.event.trigger( type, data, elem, true );
                        }
                    }
                } );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
                if ( !support.focusin ) {
                    jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

                        // Attach a single capturing handler on the document while someone wants focusin/focusout
                        var handler = function( event ) {
                            jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
                        };

                        jQuery.event.special[ fix ] = {
                            setup: function() {
                                var doc = this.ownerDocument || this,
                                    attaches = dataPriv.access( doc, fix );

                                if ( !attaches ) {
                                    doc.addEventListener( orig, handler, true );
                                }
                                dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
                            },
                            teardown: function() {
                                var doc = this.ownerDocument || this,
                                    attaches = dataPriv.access( doc, fix ) - 1;

                                if ( !attaches ) {
                                    doc.removeEventListener( orig, handler, true );
                                    dataPriv.remove( doc, fix );

                                } else {
                                    dataPriv.access( doc, fix, attaches );
                                }
                            }
                        };
                    } );
                }
                var location = window.location;

                var nonce = Date.now();

                var rquery = ( /\?/ );



// Cross-browser xml parsing
                jQuery.parseXML = function( data ) {
                    var xml;
                    if ( !data || typeof data !== "string" ) {
                        return null;
                    }

                    // Support: IE 9 - 11 only
                    // IE throws on parseFromString with invalid input.
                    try {
                        xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
                    } catch ( e ) {
                        xml = undefined;
                    }

                    if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
                        jQuery.error( "Invalid XML: " + data );
                    }
                    return xml;
                };


                var
                    rbracket = /\[\]$/,
                    rCRLF = /\r?\n/g,
                    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
                    rsubmittable = /^(?:input|select|textarea|keygen)/i;

                function buildParams( prefix, obj, traditional, add ) {
                    var name;

                    if ( Array.isArray( obj ) ) {

                        // Serialize array item.
                        jQuery.each( obj, function( i, v ) {
                            if ( traditional || rbracket.test( prefix ) ) {

                                // Treat each array item as a scalar.
                                add( prefix, v );

                            } else {

                                // Item is non-scalar (array or object), encode its numeric index.
                                buildParams(
                                    prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
                                    v,
                                    traditional,
                                    add
                                );
                            }
                        } );

                    } else if ( !traditional && toType( obj ) === "object" ) {

                        // Serialize object item.
                        for ( name in obj ) {
                            buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
                        }

                    } else {

                        // Serialize scalar item.
                        add( prefix, obj );
                    }
                }

// Serialize an array of form elements or a set of
// key/values into a query string
                jQuery.param = function( a, traditional ) {
                    var prefix,
                        s = [],
                        add = function( key, valueOrFunction ) {

                            // If value is a function, invoke it and use its return value
                            var value = isFunction( valueOrFunction ) ?
                                valueOrFunction() :
                                valueOrFunction;

                            s[ s.length ] = encodeURIComponent( key ) + "=" +
                                encodeURIComponent( value == null ? "" : value );
                        };

                    if ( a == null ) {
                        return "";
                    }

                    // If an array was passed in, assume that it is an array of form elements.
                    if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

                        // Serialize the form elements
                        jQuery.each( a, function() {
                            add( this.name, this.value );
                        } );

                    } else {

                        // If traditional, encode the "old" way (the way 1.3.2 or older
                        // did it), otherwise encode params recursively.
                        for ( prefix in a ) {
                            buildParams( prefix, a[ prefix ], traditional, add );
                        }
                    }

                    // Return the resulting serialization
                    return s.join( "&" );
                };

                jQuery.fn.extend( {
                    serialize: function() {
                        return jQuery.param( this.serializeArray() );
                    },
                    serializeArray: function() {
                        return this.map( function() {

                            // Can add propHook for "elements" to filter or add form elements
                            var elements = jQuery.prop( this, "elements" );
                            return elements ? jQuery.makeArray( elements ) : this;
                        } )
                            .filter( function() {
                                var type = this.type;

                                // Use .is( ":disabled" ) so that fieldset[disabled] works
                                return this.name && !jQuery( this ).is( ":disabled" ) &&
                                    rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
                                    ( this.checked || !rcheckableType.test( type ) );
                            } )
                            .map( function( i, elem ) {
                                var val = jQuery( this ).val();

                                if ( val == null ) {
                                    return null;
                                }

                                if ( Array.isArray( val ) ) {
                                    return jQuery.map( val, function( val ) {
                                        return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                                    } );
                                }

                                return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                            } ).get();
                    }
                } );


                var
                    r20 = /%20/g,
                    rhash = /#.*$/,
                    rantiCache = /([?&])_=[^&]*/,
                    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

                    // #7653, #8125, #8152: local protocol detection
                    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
                    rnoContent = /^(?:GET|HEAD)$/,
                    rprotocol = /^\/\//,

                    /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
                    prefilters = {},

                    /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
                    transports = {},

                    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
                    allTypes = "*/".concat( "*" ),

                    // Anchor tag for parsing the document origin
                    originAnchor = document.createElement( "a" );
                originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
                function addToPrefiltersOrTransports( structure ) {

                    // dataTypeExpression is optional and defaults to "*"
                    return function( dataTypeExpression, func ) {

                        if ( typeof dataTypeExpression !== "string" ) {
                            func = dataTypeExpression;
                            dataTypeExpression = "*";
                        }

                        var dataType,
                            i = 0,
                            dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

                        if ( isFunction( func ) ) {

                            // For each dataType in the dataTypeExpression
                            while ( ( dataType = dataTypes[ i++ ] ) ) {

                                // Prepend if requested
                                if ( dataType[ 0 ] === "+" ) {
                                    dataType = dataType.slice( 1 ) || "*";
                                    ( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

                                    // Otherwise append
                                } else {
                                    ( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
                                }
                            }
                        }
                    };
                }

// Base inspection function for prefilters and transports
                function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

                    var inspected = {},
                        seekingTransport = ( structure === transports );

                    function inspect( dataType ) {
                        var selected;
                        inspected[ dataType ] = true;
                        jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
                            var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
                            if ( typeof dataTypeOrTransport === "string" &&
                                !seekingTransport && !inspected[ dataTypeOrTransport ] ) {

                                options.dataTypes.unshift( dataTypeOrTransport );
                                inspect( dataTypeOrTransport );
                                return false;
                            } else if ( seekingTransport ) {
                                return !( selected = dataTypeOrTransport );
                            }
                        } );
                        return selected;
                    }

                    return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
                }

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
                function ajaxExtend( target, src ) {
                    var key, deep,
                        flatOptions = jQuery.ajaxSettings.flatOptions || {};

                    for ( key in src ) {
                        if ( src[ key ] !== undefined ) {
                            ( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
                        }
                    }
                    if ( deep ) {
                        jQuery.extend( true, target, deep );
                    }

                    return target;
                }

                /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
                function ajaxHandleResponses( s, jqXHR, responses ) {

                    var ct, type, finalDataType, firstDataType,
                        contents = s.contents,
                        dataTypes = s.dataTypes;

                    // Remove auto dataType and get content-type in the process
                    while ( dataTypes[ 0 ] === "*" ) {
                        dataTypes.shift();
                        if ( ct === undefined ) {
                            ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
                        }
                    }

                    // Check if we're dealing with a known content-type
                    if ( ct ) {
                        for ( type in contents ) {
                            if ( contents[ type ] && contents[ type ].test( ct ) ) {
                                dataTypes.unshift( type );
                                break;
                            }
                        }
                    }

                    // Check to see if we have a response for the expected dataType
                    if ( dataTypes[ 0 ] in responses ) {
                        finalDataType = dataTypes[ 0 ];
                    } else {

                        // Try convertible dataTypes
                        for ( type in responses ) {
                            if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
                                finalDataType = type;
                                break;
                            }
                            if ( !firstDataType ) {
                                firstDataType = type;
                            }
                        }

                        // Or just use first one
                        finalDataType = finalDataType || firstDataType;
                    }

                    // If we found a dataType
                    // We add the dataType to the list if needed
                    // and return the corresponding response
                    if ( finalDataType ) {
                        if ( finalDataType !== dataTypes[ 0 ] ) {
                            dataTypes.unshift( finalDataType );
                        }
                        return responses[ finalDataType ];
                    }
                }

                /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
                function ajaxConvert( s, response, jqXHR, isSuccess ) {
                    var conv2, current, conv, tmp, prev,
                        converters = {},

                        // Work with a copy of dataTypes in case we need to modify it for conversion
                        dataTypes = s.dataTypes.slice();

                    // Create converters map with lowercased keys
                    if ( dataTypes[ 1 ] ) {
                        for ( conv in s.converters ) {
                            converters[ conv.toLowerCase() ] = s.converters[ conv ];
                        }
                    }

                    current = dataTypes.shift();

                    // Convert to each sequential dataType
                    while ( current ) {

                        if ( s.responseFields[ current ] ) {
                            jqXHR[ s.responseFields[ current ] ] = response;
                        }

                        // Apply the dataFilter if provided
                        if ( !prev && isSuccess && s.dataFilter ) {
                            response = s.dataFilter( response, s.dataType );
                        }

                        prev = current;
                        current = dataTypes.shift();

                        if ( current ) {

                            // There's only work to do if current dataType is non-auto
                            if ( current === "*" ) {

                                current = prev;

                                // Convert response if prev dataType is non-auto and differs from current
                            } else if ( prev !== "*" && prev !== current ) {

                                // Seek a direct converter
                                conv = converters[ prev + " " + current ] || converters[ "* " + current ];

                                // If none found, seek a pair
                                if ( !conv ) {
                                    for ( conv2 in converters ) {

                                        // If conv2 outputs current
                                        tmp = conv2.split( " " );
                                        if ( tmp[ 1 ] === current ) {

                                            // If prev can be converted to accepted input
                                            conv = converters[ prev + " " + tmp[ 0 ] ] ||
                                                converters[ "* " + tmp[ 0 ] ];
                                            if ( conv ) {

                                                // Condense equivalence converters
                                                if ( conv === true ) {
                                                    conv = converters[ conv2 ];

                                                    // Otherwise, insert the intermediate dataType
                                                } else if ( converters[ conv2 ] !== true ) {
                                                    current = tmp[ 0 ];
                                                    dataTypes.unshift( tmp[ 1 ] );
                                                }
                                                break;
                                            }
                                        }
                                    }
                                }

                                // Apply converter (if not an equivalence)
                                if ( conv !== true ) {

                                    // Unless errors are allowed to bubble, catch and return them
                                    if ( conv && s.throws ) {
                                        response = conv( response );
                                    } else {
                                        try {
                                            response = conv( response );
                                        } catch ( e ) {
                                            return {
                                                state: "parsererror",
                                                error: conv ? e : "No conversion from " + prev + " to " + current
                                            };
                                        }
                                    }
                                }
                            }
                        }
                    }

                    return { state: "success", data: response };
                }

                jQuery.extend( {

                    // Counter for holding the number of active queries
                    active: 0,

                    // Last-Modified header cache for next request
                    lastModified: {},
                    etag: {},

                    ajaxSettings: {
                        url: location.href,
                        type: "GET",
                        isLocal: rlocalProtocol.test( location.protocol ),
                        global: true,
                        processData: true,
                        async: true,
                        contentType: "application/x-www-form-urlencoded; charset=UTF-8",

                        /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

                        accepts: {
                            "*": allTypes,
                            text: "text/plain",
                            html: "text/html",
                            xml: "application/xml, text/xml",
                            json: "application/json, text/javascript"
                        },

                        contents: {
                            xml: /\bxml\b/,
                            html: /\bhtml/,
                            json: /\bjson\b/
                        },

                        responseFields: {
                            xml: "responseXML",
                            text: "responseText",
                            json: "responseJSON"
                        },

                        // Data converters
                        // Keys separate source (or catchall "*") and destination types with a single space
                        converters: {

                            // Convert anything to text
                            "* text": String,

                            // Text to html (true = no transformation)
                            "text html": true,

                            // Evaluate text as a json expression
                            "text json": JSON.parse,

                            // Parse text as xml
                            "text xml": jQuery.parseXML
                        },

                        // For options that shouldn't be deep extended:
                        // you can add your own custom options here if
                        // and when you create one that shouldn't be
                        // deep extended (see ajaxExtend)
                        flatOptions: {
                            url: true,
                            context: true
                        }
                    },

                    // Creates a full fledged settings object into target
                    // with both ajaxSettings and settings fields.
                    // If target is omitted, writes into ajaxSettings.
                    ajaxSetup: function( target, settings ) {
                        return settings ?

                            // Building a settings object
                            ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

                            // Extending ajaxSettings
                            ajaxExtend( jQuery.ajaxSettings, target );
                    },

                    ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
                    ajaxTransport: addToPrefiltersOrTransports( transports ),

                    // Main method
                    ajax: function( url, options ) {

                        // If url is an object, simulate pre-1.5 signature
                        if ( typeof url === "object" ) {
                            options = url;
                            url = undefined;
                        }

                        // Force options to be an object
                        options = options || {};

                        var transport,

                            // URL without anti-cache param
                            cacheURL,

                            // Response headers
                            responseHeadersString,
                            responseHeaders,

                            // timeout handle
                            timeoutTimer,

                            // Url cleanup var
                            urlAnchor,

                            // Request state (becomes false upon send and true upon completion)
                            completed,

                            // To know if global events are to be dispatched
                            fireGlobals,

                            // Loop variable
                            i,

                            // uncached part of the url
                            uncached,

                            // Create the final options object
                            s = jQuery.ajaxSetup( {}, options ),

                            // Callbacks context
                            callbackContext = s.context || s,

                            // Context for global events is callbackContext if it is a DOM node or jQuery collection
                            globalEventContext = s.context &&
                            ( callbackContext.nodeType || callbackContext.jquery ) ?
                                jQuery( callbackContext ) :
                                jQuery.event,

                            // Deferreds
                            deferred = jQuery.Deferred(),
                            completeDeferred = jQuery.Callbacks( "once memory" ),

                            // Status-dependent callbacks
                            statusCode = s.statusCode || {},

                            // Headers (they are sent all at once)
                            requestHeaders = {},
                            requestHeadersNames = {},

                            // Default abort message
                            strAbort = "canceled",

                            // Fake xhr
                            jqXHR = {
                                readyState: 0,

                                // Builds headers hashtable if needed
                                getResponseHeader: function( key ) {
                                    var match;
                                    if ( completed ) {
                                        if ( !responseHeaders ) {
                                            responseHeaders = {};
                                            while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
                                                responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
                                                    ( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
                                                        .concat( match[ 2 ] );
                                            }
                                        }
                                        match = responseHeaders[ key.toLowerCase() + " " ];
                                    }
                                    return match == null ? null : match.join( ", " );
                                },

                                // Raw string
                                getAllResponseHeaders: function() {
                                    return completed ? responseHeadersString : null;
                                },

                                // Caches the header
                                setRequestHeader: function( name, value ) {
                                    if ( completed == null ) {
                                        name = requestHeadersNames[ name.toLowerCase() ] =
                                            requestHeadersNames[ name.toLowerCase() ] || name;
                                        requestHeaders[ name ] = value;
                                    }
                                    return this;
                                },

                                // Overrides response content-type header
                                overrideMimeType: function( type ) {
                                    if ( completed == null ) {
                                        s.mimeType = type;
                                    }
                                    return this;
                                },

                                // Status-dependent callbacks
                                statusCode: function( map ) {
                                    var code;
                                    if ( map ) {
                                        if ( completed ) {

                                            // Execute the appropriate callbacks
                                            jqXHR.always( map[ jqXHR.status ] );
                                        } else {

                                            // Lazy-add the new callbacks in a way that preserves old ones
                                            for ( code in map ) {
                                                statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
                                            }
                                        }
                                    }
                                    return this;
                                },

                                // Cancel the request
                                abort: function( statusText ) {
                                    var finalText = statusText || strAbort;
                                    if ( transport ) {
                                        transport.abort( finalText );
                                    }
                                    done( 0, finalText );
                                    return this;
                                }
                            };

                        // Attach deferreds
                        deferred.promise( jqXHR );

                        // Add protocol if not provided (prefilters might expect it)
                        // Handle falsy url in the settings object (#10093: consistency with old signature)
                        // We also use the url parameter if available
                        s.url = ( ( url || s.url || location.href ) + "" )
                            .replace( rprotocol, location.protocol + "//" );

                        // Alias method option to type as per ticket #12004
                        s.type = options.method || options.type || s.method || s.type;

                        // Extract dataTypes list
                        s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

                        // A cross-domain request is in order when the origin doesn't match the current origin.
                        if ( s.crossDomain == null ) {
                            urlAnchor = document.createElement( "a" );

                            // Support: IE <=8 - 11, Edge 12 - 15
                            // IE throws exception on accessing the href property if url is malformed,
                            // e.g. http://example.com:80x/
                            try {
                                urlAnchor.href = s.url;

                                // Support: IE <=8 - 11 only
                                // Anchor's host property isn't correctly set when s.url is relative
                                urlAnchor.href = urlAnchor.href;
                                s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
                                    urlAnchor.protocol + "//" + urlAnchor.host;
                            } catch ( e ) {

                                // If there is an error parsing the URL, assume it is crossDomain,
                                // it can be rejected by the transport if it is invalid
                                s.crossDomain = true;
                            }
                        }

                        // Convert data if not already a string
                        if ( s.data && s.processData && typeof s.data !== "string" ) {
                            s.data = jQuery.param( s.data, s.traditional );
                        }

                        // Apply prefilters
                        inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

                        // If request was aborted inside a prefilter, stop there
                        if ( completed ) {
                            return jqXHR;
                        }

                        // We can fire global events as of now if asked to
                        // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
                        fireGlobals = jQuery.event && s.global;

                        // Watch for a new set of requests
                        if ( fireGlobals && jQuery.active++ === 0 ) {
                            jQuery.event.trigger( "ajaxStart" );
                        }

                        // Uppercase the type
                        s.type = s.type.toUpperCase();

                        // Determine if request has content
                        s.hasContent = !rnoContent.test( s.type );

                        // Save the URL in case we're toying with the If-Modified-Since
                        // and/or If-None-Match header later on
                        // Remove hash to simplify url manipulation
                        cacheURL = s.url.replace( rhash, "" );

                        // More options handling for requests with no content
                        if ( !s.hasContent ) {

                            // Remember the hash so we can put it back
                            uncached = s.url.slice( cacheURL.length );

                            // If data is available and should be processed, append data to url
                            if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
                                cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

                                // #9682: remove data so that it's not used in an eventual retry
                                delete s.data;
                            }

                            // Add or update anti-cache param if needed
                            if ( s.cache === false ) {
                                cacheURL = cacheURL.replace( rantiCache, "$1" );
                                uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
                            }

                            // Put hash and anti-cache on the URL that will be requested (gh-1732)
                            s.url = cacheURL + uncached;

                            // Change '%20' to '+' if this is encoded form body content (gh-2658)
                        } else if ( s.data && s.processData &&
                            ( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
                            s.data = s.data.replace( r20, "+" );
                        }

                        // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                        if ( s.ifModified ) {
                            if ( jQuery.lastModified[ cacheURL ] ) {
                                jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
                            }
                            if ( jQuery.etag[ cacheURL ] ) {
                                jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
                            }
                        }

                        // Set the correct header, if data is being sent
                        if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
                            jqXHR.setRequestHeader( "Content-Type", s.contentType );
                        }

                        // Set the Accepts header for the server, depending on the dataType
                        jqXHR.setRequestHeader(
                            "Accept",
                            s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
                                s.accepts[ s.dataTypes[ 0 ] ] +
                                ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
                                s.accepts[ "*" ]
                        );

                        // Check for headers option
                        for ( i in s.headers ) {
                            jqXHR.setRequestHeader( i, s.headers[ i ] );
                        }

                        // Allow custom headers/mimetypes and early abort
                        if ( s.beforeSend &&
                            ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

                            // Abort if not done already and return
                            return jqXHR.abort();
                        }

                        // Aborting is no longer a cancellation
                        strAbort = "abort";

                        // Install callbacks on deferreds
                        completeDeferred.add( s.complete );
                        jqXHR.done( s.success );
                        jqXHR.fail( s.error );

                        // Get transport
                        transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

                        // If no transport, we auto-abort
                        if ( !transport ) {
                            done( -1, "No Transport" );
                        } else {
                            jqXHR.readyState = 1;

                            // Send global event
                            if ( fireGlobals ) {
                                globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
                            }

                            // If request was aborted inside ajaxSend, stop there
                            if ( completed ) {
                                return jqXHR;
                            }

                            // Timeout
                            if ( s.async && s.timeout > 0 ) {
                                timeoutTimer = window.setTimeout( function() {
                                    jqXHR.abort( "timeout" );
                                }, s.timeout );
                            }

                            try {
                                completed = false;
                                transport.send( requestHeaders, done );
                            } catch ( e ) {

                                // Rethrow post-completion exceptions
                                if ( completed ) {
                                    throw e;
                                }

                                // Propagate others as results
                                done( -1, e );
                            }
                        }

                        // Callback for when everything is done
                        function done( status, nativeStatusText, responses, headers ) {
                            var isSuccess, success, error, response, modified,
                                statusText = nativeStatusText;

                            // Ignore repeat invocations
                            if ( completed ) {
                                return;
                            }

                            completed = true;

                            // Clear timeout if it exists
                            if ( timeoutTimer ) {
                                window.clearTimeout( timeoutTimer );
                            }

                            // Dereference transport for early garbage collection
                            // (no matter how long the jqXHR object will be used)
                            transport = undefined;

                            // Cache response headers
                            responseHeadersString = headers || "";

                            // Set readyState
                            jqXHR.readyState = status > 0 ? 4 : 0;

                            // Determine if successful
                            isSuccess = status >= 200 && status < 300 || status === 304;

                            // Get response data
                            if ( responses ) {
                                response = ajaxHandleResponses( s, jqXHR, responses );
                            }

                            // Convert no matter what (that way responseXXX fields are always set)
                            response = ajaxConvert( s, response, jqXHR, isSuccess );

                            // If successful, handle type chaining
                            if ( isSuccess ) {

                                // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                                if ( s.ifModified ) {
                                    modified = jqXHR.getResponseHeader( "Last-Modified" );
                                    if ( modified ) {
                                        jQuery.lastModified[ cacheURL ] = modified;
                                    }
                                    modified = jqXHR.getResponseHeader( "etag" );
                                    if ( modified ) {
                                        jQuery.etag[ cacheURL ] = modified;
                                    }
                                }

                                // if no content
                                if ( status === 204 || s.type === "HEAD" ) {
                                    statusText = "nocontent";

                                    // if not modified
                                } else if ( status === 304 ) {
                                    statusText = "notmodified";

                                    // If we have data, let's convert it
                                } else {
                                    statusText = response.state;
                                    success = response.data;
                                    error = response.error;
                                    isSuccess = !error;
                                }
                            } else {

                                // Extract error from statusText and normalize for non-aborts
                                error = statusText;
                                if ( status || !statusText ) {
                                    statusText = "error";
                                    if ( status < 0 ) {
                                        status = 0;
                                    }
                                }
                            }

                            // Set data for the fake xhr object
                            jqXHR.status = status;
                            jqXHR.statusText = ( nativeStatusText || statusText ) + "";

                            // Success/Error
                            if ( isSuccess ) {
                                deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
                            } else {
                                deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
                            }

                            // Status-dependent callbacks
                            jqXHR.statusCode( statusCode );
                            statusCode = undefined;

                            if ( fireGlobals ) {
                                globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
                                    [ jqXHR, s, isSuccess ? success : error ] );
                            }

                            // Complete
                            completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

                            if ( fireGlobals ) {
                                globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

                                // Handle the global AJAX counter
                                if ( !( --jQuery.active ) ) {
                                    jQuery.event.trigger( "ajaxStop" );
                                }
                            }
                        }

                        return jqXHR;
                    },

                    getJSON: function( url, data, callback ) {
                        return jQuery.get( url, data, callback, "json" );
                    },

                    getScript: function( url, callback ) {
                        return jQuery.get( url, undefined, callback, "script" );
                    }
                } );

                jQuery.each( [ "get", "post" ], function( i, method ) {
                    jQuery[ method ] = function( url, data, callback, type ) {

                        // Shift arguments if data argument was omitted
                        if ( isFunction( data ) ) {
                            type = type || callback;
                            callback = data;
                            data = undefined;
                        }

                        // The url can be an options object (which then must have .url)
                        return jQuery.ajax( jQuery.extend( {
                            url: url,
                            type: method,
                            dataType: type,
                            data: data,
                            success: callback
                        }, jQuery.isPlainObject( url ) && url ) );
                    };
                } );


                jQuery._evalUrl = function( url, options ) {
                    return jQuery.ajax( {
                        url: url,

                        // Make this explicit, since user can override this through ajaxSetup (#11264)
                        type: "GET",
                        dataType: "script",
                        cache: true,
                        async: false,
                        global: false,

                        // Only evaluate the response if it is successful (gh-4126)
                        // dataFilter is not invoked for failure responses, so using it instead
                        // of the default converter is kludgy but it works.
                        converters: {
                            "text script": function() {}
                        },
                        dataFilter: function( response ) {
                            jQuery.globalEval( response, options );
                        }
                    } );
                };


                jQuery.fn.extend( {
                    wrapAll: function( html ) {
                        var wrap;

                        if ( this[ 0 ] ) {
                            if ( isFunction( html ) ) {
                                html = html.call( this[ 0 ] );
                            }

                            // The elements to wrap the target around
                            wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

                            if ( this[ 0 ].parentNode ) {
                                wrap.insertBefore( this[ 0 ] );
                            }

                            wrap.map( function() {
                                var elem = this;

                                while ( elem.firstElementChild ) {
                                    elem = elem.firstElementChild;
                                }

                                return elem;
                            } ).append( this );
                        }

                        return this;
                    },

                    wrapInner: function( html ) {
                        if ( isFunction( html ) ) {
                            return this.each( function( i ) {
                                jQuery( this ).wrapInner( html.call( this, i ) );
                            } );
                        }

                        return this.each( function() {
                            var self = jQuery( this ),
                                contents = self.contents();

                            if ( contents.length ) {
                                contents.wrapAll( html );

                            } else {
                                self.append( html );
                            }
                        } );
                    },

                    wrap: function( html ) {
                        var htmlIsFunction = isFunction( html );

                        return this.each( function( i ) {
                            jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
                        } );
                    },

                    unwrap: function( selector ) {
                        this.parent( selector ).not( "body" ).each( function() {
                            jQuery( this ).replaceWith( this.childNodes );
                        } );
                        return this;
                    }
                } );


                jQuery.expr.pseudos.hidden = function( elem ) {
                    return !jQuery.expr.pseudos.visible( elem );
                };
                jQuery.expr.pseudos.visible = function( elem ) {
                    return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
                };




                jQuery.ajaxSettings.xhr = function() {
                    try {
                        return new window.XMLHttpRequest();
                    } catch ( e ) {}
                };

                var xhrSuccessStatus = {

                        // File protocol always yields status code 0, assume 200
                        0: 200,

                        // Support: IE <=9 only
                        // #1450: sometimes IE returns 1223 when it should be 204
                        1223: 204
                    },
                    xhrSupported = jQuery.ajaxSettings.xhr();

                support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
                support.ajax = xhrSupported = !!xhrSupported;

                jQuery.ajaxTransport( function( options ) {
                    var callback, errorCallback;

                    // Cross domain only allowed if supported through XMLHttpRequest
                    if ( support.cors || xhrSupported && !options.crossDomain ) {
                        return {
                            send: function( headers, complete ) {
                                var i,
                                    xhr = options.xhr();

                                xhr.open(
                                    options.type,
                                    options.url,
                                    options.async,
                                    options.username,
                                    options.password
                                );

                                // Apply custom fields if provided
                                if ( options.xhrFields ) {
                                    for ( i in options.xhrFields ) {
                                        xhr[ i ] = options.xhrFields[ i ];
                                    }
                                }

                                // Override mime type if needed
                                if ( options.mimeType && xhr.overrideMimeType ) {
                                    xhr.overrideMimeType( options.mimeType );
                                }

                                // X-Requested-With header
                                // For cross-domain requests, seeing as conditions for a preflight are
                                // akin to a jigsaw puzzle, we simply never set it to be sure.
                                // (it can always be set on a per-request basis or even using ajaxSetup)
                                // For same-domain requests, won't change header if already provided.
                                if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
                                    headers[ "X-Requested-With" ] = "XMLHttpRequest";
                                }

                                // Set headers
                                for ( i in headers ) {
                                    xhr.setRequestHeader( i, headers[ i ] );
                                }

                                // Callback
                                callback = function( type ) {
                                    return function() {
                                        if ( callback ) {
                                            callback = errorCallback = xhr.onload =
                                                xhr.onerror = xhr.onabort = xhr.ontimeout =
                                                    xhr.onreadystatechange = null;

                                            if ( type === "abort" ) {
                                                xhr.abort();
                                            } else if ( type === "error" ) {

                                                // Support: IE <=9 only
                                                // On a manual native abort, IE9 throws
                                                // errors on any property access that is not readyState
                                                if ( typeof xhr.status !== "number" ) {
                                                    complete( 0, "error" );
                                                } else {
                                                    complete(

                                                        // File: protocol always yields status 0; see #8605, #14207
                                                        xhr.status,
                                                        xhr.statusText
                                                    );
                                                }
                                            } else {
                                                complete(
                                                    xhrSuccessStatus[ xhr.status ] || xhr.status,
                                                    xhr.statusText,

                                                    // Support: IE <=9 only
                                                    // IE9 has no XHR2 but throws on binary (trac-11426)
                                                    // For XHR2 non-text, let the caller handle it (gh-2498)
                                                    ( xhr.responseType || "text" ) !== "text"  ||
                                                    typeof xhr.responseText !== "string" ?
                                                        { binary: xhr.response } :
                                                        { text: xhr.responseText },
                                                    xhr.getAllResponseHeaders()
                                                );
                                            }
                                        }
                                    };
                                };

                                // Listen to events
                                xhr.onload = callback();
                                errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

                                // Support: IE 9 only
                                // Use onreadystatechange to replace onabort
                                // to handle uncaught aborts
                                if ( xhr.onabort !== undefined ) {
                                    xhr.onabort = errorCallback;
                                } else {
                                    xhr.onreadystatechange = function() {

                                        // Check readyState before timeout as it changes
                                        if ( xhr.readyState === 4 ) {

                                            // Allow onerror to be called first,
                                            // but that will not handle a native abort
                                            // Also, save errorCallback to a variable
                                            // as xhr.onerror cannot be accessed
                                            window.setTimeout( function() {
                                                if ( callback ) {
                                                    errorCallback();
                                                }
                                            } );
                                        }
                                    };
                                }

                                // Create the abort callback
                                callback = callback( "abort" );

                                try {

                                    // Do send the request (this may raise an exception)
                                    xhr.send( options.hasContent && options.data || null );
                                } catch ( e ) {

                                    // #14683: Only rethrow if this hasn't been notified as an error yet
                                    if ( callback ) {
                                        throw e;
                                    }
                                }
                            },

                            abort: function() {
                                if ( callback ) {
                                    callback();
                                }
                            }
                        };
                    }
                } );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
                jQuery.ajaxPrefilter( function( s ) {
                    if ( s.crossDomain ) {
                        s.contents.script = false;
                    }
                } );

// Install script dataType
                jQuery.ajaxSetup( {
                    accepts: {
                        script: "text/javascript, application/javascript, " +
                            "application/ecmascript, application/x-ecmascript"
                    },
                    contents: {
                        script: /\b(?:java|ecma)script\b/
                    },
                    converters: {
                        "text script": function( text ) {
                            jQuery.globalEval( text );
                            return text;
                        }
                    }
                } );

// Handle cache's special case and crossDomain
                jQuery.ajaxPrefilter( "script", function( s ) {
                    if ( s.cache === undefined ) {
                        s.cache = false;
                    }
                    if ( s.crossDomain ) {
                        s.type = "GET";
                    }
                } );

// Bind script tag hack transport
                jQuery.ajaxTransport( "script", function( s ) {

                    // This transport only deals with cross domain or forced-by-attrs requests
                    if ( s.crossDomain || s.scriptAttrs ) {
                        var script, callback;
                        return {
                            send: function( _, complete ) {
                                script = jQuery( "<script>" )
                                    .attr( s.scriptAttrs || {} )
                                    .prop( { charset: s.scriptCharset, src: s.url } )
                                    .on( "load error", callback = function( evt ) {
                                        script.remove();
                                        callback = null;
                                        if ( evt ) {
                                            complete( evt.type === "error" ? 404 : 200, evt.type );
                                        }
                                    } );

                                // Use native DOM manipulation to avoid our domManip AJAX trickery
                                document.head.appendChild( script[ 0 ] );
                            },
                            abort: function() {
                                if ( callback ) {
                                    callback();
                                }
                            }
                        };
                    }
                } );




                var oldCallbacks = [],
                    rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
                jQuery.ajaxSetup( {
                    jsonp: "callback",
                    jsonpCallback: function() {
                        var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
                        this[ callback ] = true;
                        return callback;
                    }
                } );

// Detect, normalize options and install callbacks for jsonp requests
                jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

                    var callbackName, overwritten, responseContainer,
                        jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
                                "url" :
                                typeof s.data === "string" &&
                                ( s.contentType || "" )
                                    .indexOf( "application/x-www-form-urlencoded" ) === 0 &&
                                rjsonp.test( s.data ) && "data"
                        );

                    // Handle iff the expected data type is "jsonp" or we have a parameter to set
                    if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

                        // Get callback name, remembering preexisting value associated with it
                        callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
                            s.jsonpCallback() :
                            s.jsonpCallback;

                        // Insert callback into url or form data
                        if ( jsonProp ) {
                            s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
                        } else if ( s.jsonp !== false ) {
                            s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
                        }

                        // Use data converter to retrieve json after script execution
                        s.converters[ "script json" ] = function() {
                            if ( !responseContainer ) {
                                jQuery.error( callbackName + " was not called" );
                            }
                            return responseContainer[ 0 ];
                        };

                        // Force json dataType
                        s.dataTypes[ 0 ] = "json";

                        // Install callback
                        overwritten = window[ callbackName ];
                        window[ callbackName ] = function() {
                            responseContainer = arguments;
                        };

                        // Clean-up function (fires after converters)
                        jqXHR.always( function() {

                            // If previous value didn't exist - remove it
                            if ( overwritten === undefined ) {
                                jQuery( window ).removeProp( callbackName );

                                // Otherwise restore preexisting value
                            } else {
                                window[ callbackName ] = overwritten;
                            }

                            // Save back as free
                            if ( s[ callbackName ] ) {

                                // Make sure that re-using the options doesn't screw things around
                                s.jsonpCallback = originalSettings.jsonpCallback;

                                // Save the callback name for future use
                                oldCallbacks.push( callbackName );
                            }

                            // Call if it was a function and we have a response
                            if ( responseContainer && isFunction( overwritten ) ) {
                                overwritten( responseContainer[ 0 ] );
                            }

                            responseContainer = overwritten = undefined;
                        } );

                        // Delegate to script
                        return "script";
                    }
                } );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
                support.createHTMLDocument = ( function() {
                    var body = document.implementation.createHTMLDocument( "" ).body;
                    body.innerHTML = "<form></form><form></form>";
                    return body.childNodes.length === 2;
                } )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
                jQuery.parseHTML = function( data, context, keepScripts ) {
                    if ( typeof data !== "string" ) {
                        return [];
                    }
                    if ( typeof context === "boolean" ) {
                        keepScripts = context;
                        context = false;
                    }

                    var base, parsed, scripts;

                    if ( !context ) {

                        // Stop scripts or inline event handlers from being executed immediately
                        // by using document.implementation
                        if ( support.createHTMLDocument ) {
                            context = document.implementation.createHTMLDocument( "" );

                            // Set the base href for the created document
                            // so any parsed elements with URLs
                            // are based on the document's URL (gh-2965)
                            base = context.createElement( "base" );
                            base.href = document.location.href;
                            context.head.appendChild( base );
                        } else {
                            context = document;
                        }
                    }

                    parsed = rsingleTag.exec( data );
                    scripts = !keepScripts && [];

                    // Single tag
                    if ( parsed ) {
                        return [ context.createElement( parsed[ 1 ] ) ];
                    }

                    parsed = buildFragment( [ data ], context, scripts );

                    if ( scripts && scripts.length ) {
                        jQuery( scripts ).remove();
                    }

                    return jQuery.merge( [], parsed.childNodes );
                };


                /**
                 * Load a url into a page
                 */
                jQuery.fn.load = function( url, params, callback ) {
                    var selector, type, response,
                        self = this,
                        off = url.indexOf( " " );

                    if ( off > -1 ) {
                        selector = stripAndCollapse( url.slice( off ) );
                        url = url.slice( 0, off );
                    }

                    // If it's a function
                    if ( isFunction( params ) ) {

                        // We assume that it's the callback
                        callback = params;
                        params = undefined;

                        // Otherwise, build a param string
                    } else if ( params && typeof params === "object" ) {
                        type = "POST";
                    }

                    // If we have elements to modify, make the request
                    if ( self.length > 0 ) {
                        jQuery.ajax( {
                            url: url,

                            // If "type" variable is undefined, then "GET" method will be used.
                            // Make value of this field explicit since
                            // user can override it through ajaxSetup method
                            type: type || "GET",
                            dataType: "html",
                            data: params
                        } ).done( function( responseText ) {

                            // Save response for use in complete callback
                            response = arguments;

                            self.html( selector ?

                                // If a selector was specified, locate the right elements in a dummy div
                                // Exclude scripts to avoid IE 'Permission Denied' errors
                                jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

                                // Otherwise use the full result
                                responseText );

                            // If the request succeeds, this function gets "data", "status", "jqXHR"
                            // but they are ignored because response was set above.
                            // If it fails, this function gets "jqXHR", "status", "error"
                        } ).always( callback && function( jqXHR, status ) {
                            self.each( function() {
                                callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
                            } );
                        } );
                    }

                    return this;
                };




// Attach a bunch of functions for handling common AJAX events
                jQuery.each( [
                    "ajaxStart",
                    "ajaxStop",
                    "ajaxComplete",
                    "ajaxError",
                    "ajaxSuccess",
                    "ajaxSend"
                ], function( i, type ) {
                    jQuery.fn[ type ] = function( fn ) {
                        return this.on( type, fn );
                    };
                } );




                jQuery.expr.pseudos.animated = function( elem ) {
                    return jQuery.grep( jQuery.timers, function( fn ) {
                        return elem === fn.elem;
                    } ).length;
                };




                jQuery.offset = {
                    setOffset: function( elem, options, i ) {
                        var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
                            position = jQuery.css( elem, "position" ),
                            curElem = jQuery( elem ),
                            props = {};

                        // Set position first, in-case top/left are set even on static elem
                        if ( position === "static" ) {
                            elem.style.position = "relative";
                        }

                        curOffset = curElem.offset();
                        curCSSTop = jQuery.css( elem, "top" );
                        curCSSLeft = jQuery.css( elem, "left" );
                        calculatePosition = ( position === "absolute" || position === "fixed" ) &&
                            ( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

                        // Need to be able to calculate position if either
                        // top or left is auto and position is either absolute or fixed
                        if ( calculatePosition ) {
                            curPosition = curElem.position();
                            curTop = curPosition.top;
                            curLeft = curPosition.left;

                        } else {
                            curTop = parseFloat( curCSSTop ) || 0;
                            curLeft = parseFloat( curCSSLeft ) || 0;
                        }

                        if ( isFunction( options ) ) {

                            // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
                            options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
                        }

                        if ( options.top != null ) {
                            props.top = ( options.top - curOffset.top ) + curTop;
                        }
                        if ( options.left != null ) {
                            props.left = ( options.left - curOffset.left ) + curLeft;
                        }

                        if ( "using" in options ) {
                            options.using.call( elem, props );

                        } else {
                            curElem.css( props );
                        }
                    }
                };

                jQuery.fn.extend( {

                    // offset() relates an element's border box to the document origin
                    offset: function( options ) {

                        // Preserve chaining for setter
                        if ( arguments.length ) {
                            return options === undefined ?
                                this :
                                this.each( function( i ) {
                                    jQuery.offset.setOffset( this, options, i );
                                } );
                        }

                        var rect, win,
                            elem = this[ 0 ];

                        if ( !elem ) {
                            return;
                        }

                        // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
                        // Support: IE <=11 only
                        // Running getBoundingClientRect on a
                        // disconnected node in IE throws an error
                        if ( !elem.getClientRects().length ) {
                            return { top: 0, left: 0 };
                        }

                        // Get document-relative position by adding viewport scroll to viewport-relative gBCR
                        rect = elem.getBoundingClientRect();
                        win = elem.ownerDocument.defaultView;
                        return {
                            top: rect.top + win.pageYOffset,
                            left: rect.left + win.pageXOffset
                        };
                    },

                    // position() relates an element's margin box to its offset parent's padding box
                    // This corresponds to the behavior of CSS absolute positioning
                    position: function() {
                        if ( !this[ 0 ] ) {
                            return;
                        }

                        var offsetParent, offset, doc,
                            elem = this[ 0 ],
                            parentOffset = { top: 0, left: 0 };

                        // position:fixed elements are offset from the viewport, which itself always has zero offset
                        if ( jQuery.css( elem, "position" ) === "fixed" ) {

                            // Assume position:fixed implies availability of getBoundingClientRect
                            offset = elem.getBoundingClientRect();

                        } else {
                            offset = this.offset();

                            // Account for the *real* offset parent, which can be the document or its root element
                            // when a statically positioned element is identified
                            doc = elem.ownerDocument;
                            offsetParent = elem.offsetParent || doc.documentElement;
                            while ( offsetParent &&
                            ( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
                            jQuery.css( offsetParent, "position" ) === "static" ) {

                                offsetParent = offsetParent.parentNode;
                            }
                            if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

                                // Incorporate borders into its offset, since they are outside its content origin
                                parentOffset = jQuery( offsetParent ).offset();
                                parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
                                parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
                            }
                        }

                        // Subtract parent offsets and element margins
                        return {
                            top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
                            left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
                        };
                    },

                    // This method will return documentElement in the following cases:
                    // 1) For the element inside the iframe without offsetParent, this method will return
                    //    documentElement of the parent window
                    // 2) For the hidden or detached element
                    // 3) For body or html element, i.e. in case of the html node - it will return itself
                    //
                    // but those exceptions were never presented as a real life use-cases
                    // and might be considered as more preferable results.
                    //
                    // This logic, however, is not guaranteed and can change at any point in the future
                    offsetParent: function() {
                        return this.map( function() {
                            var offsetParent = this.offsetParent;

                            while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
                                offsetParent = offsetParent.offsetParent;
                            }

                            return offsetParent || documentElement;
                        } );
                    }
                } );

// Create scrollLeft and scrollTop methods
                jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
                    var top = "pageYOffset" === prop;

                    jQuery.fn[ method ] = function( val ) {
                        return access( this, function( elem, method, val ) {

                            // Coalesce documents and windows
                            var win;
                            if ( isWindow( elem ) ) {
                                win = elem;
                            } else if ( elem.nodeType === 9 ) {
                                win = elem.defaultView;
                            }

                            if ( val === undefined ) {
                                return win ? win[ prop ] : elem[ method ];
                            }

                            if ( win ) {
                                win.scrollTo(
                                    !top ? val : win.pageXOffset,
                                    top ? val : win.pageYOffset
                                );

                            } else {
                                elem[ method ] = val;
                            }
                        }, method, val, arguments.length );
                    };
                } );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
                jQuery.each( [ "top", "left" ], function( i, prop ) {
                    jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
                        function( elem, computed ) {
                            if ( computed ) {
                                computed = curCSS( elem, prop );

                                // If curCSS returns percentage, fallback to offset
                                return rnumnonpx.test( computed ) ?
                                    jQuery( elem ).position()[ prop ] + "px" :
                                    computed;
                            }
                        }
                    );
                } );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
                jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
                    jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
                        function( defaultExtra, funcName ) {

                            // Margin is only for outerHeight, outerWidth
                            jQuery.fn[ funcName ] = function( margin, value ) {
                                var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
                                    extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

                                return access( this, function( elem, type, value ) {
                                    var doc;

                                    if ( isWindow( elem ) ) {

                                        // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                                        return funcName.indexOf( "outer" ) === 0 ?
                                            elem[ "inner" + name ] :
                                            elem.document.documentElement[ "client" + name ];
                                    }

                                    // Get document width or height
                                    if ( elem.nodeType === 9 ) {
                                        doc = elem.documentElement;

                                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                                        // whichever is greatest
                                        return Math.max(
                                            elem.body[ "scroll" + name ], doc[ "scroll" + name ],
                                            elem.body[ "offset" + name ], doc[ "offset" + name ],
                                            doc[ "client" + name ]
                                        );
                                    }

                                    return value === undefined ?

                                        // Get width or height on the element, requesting but not forcing parseFloat
                                        jQuery.css( elem, type, extra ) :

                                        // Set width or height on the element
                                        jQuery.style( elem, type, value, extra );
                                }, type, chainable ? margin : undefined, chainable );
                            };
                        } );
                } );


                jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
                    "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
                    "change select submit keydown keypress keyup contextmenu" ).split( " " ),
                    function( i, name ) {

                        // Handle event binding
                        jQuery.fn[ name ] = function( data, fn ) {
                            return arguments.length > 0 ?
                                this.on( name, null, data, fn ) :
                                this.trigger( name );
                        };
                    } );

                jQuery.fn.extend( {
                    hover: function( fnOver, fnOut ) {
                        return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
                    }
                } );




                jQuery.fn.extend( {

                    bind: function( types, data, fn ) {
                        return this.on( types, null, data, fn );
                    },
                    unbind: function( types, fn ) {
                        return this.off( types, null, fn );
                    },

                    delegate: function( selector, types, data, fn ) {
                        return this.on( types, selector, data, fn );
                    },
                    undelegate: function( selector, types, fn ) {

                        // ( namespace ) or ( selector, types [, fn] )
                        return arguments.length === 1 ?
                            this.off( selector, "**" ) :
                            this.off( types, selector || "**", fn );
                    }
                } );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
                jQuery.proxy = function( fn, context ) {
                    var tmp, args, proxy;

                    if ( typeof context === "string" ) {
                        tmp = fn[ context ];
                        context = fn;
                        fn = tmp;
                    }

                    // Quick check to determine if target is callable, in the spec
                    // this throws a TypeError, but we will just return undefined.
                    if ( !isFunction( fn ) ) {
                        return undefined;
                    }

                    // Simulated bind
                    args = slice.call( arguments, 2 );
                    proxy = function() {
                        return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
                    };

                    // Set the guid of unique handler to the same of original handler, so it can be removed
                    proxy.guid = fn.guid = fn.guid || jQuery.guid++;

                    return proxy;
                };

                jQuery.holdReady = function( hold ) {
                    if ( hold ) {
                        jQuery.readyWait++;
                    } else {
                        jQuery.ready( true );
                    }
                };
                jQuery.isArray = Array.isArray;
                jQuery.parseJSON = JSON.parse;
                jQuery.nodeName = nodeName;
                jQuery.isFunction = isFunction;
                jQuery.isWindow = isWindow;
                jQuery.camelCase = camelCase;
                jQuery.type = toType;

                jQuery.now = Date.now;

                jQuery.isNumeric = function( obj ) {

                    // As of jQuery 3.0, isNumeric is limited to
                    // strings and numbers (primitives or objects)
                    // that can be coerced to finite numbers (gh-2662)
                    var type = jQuery.type( obj );
                    return ( type === "number" || type === "string" ) &&

                        // parseFloat NaNs numeric-cast false positives ("")
                        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
                        // subtraction forces infinities to NaN
                        !isNaN( obj - parseFloat( obj ) );
                };




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

                if ( true ) {
                    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
                        return jQuery;
                    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                }




                var

                    // Map over jQuery in case of overwrite
                    _jQuery = window.jQuery,

                    // Map over the $ in case of overwrite
                    _$ = window.$;

                jQuery.noConflict = function( deep ) {
                    if ( window.$ === jQuery ) {
                        window.$ = _$;
                    }

                    if ( deep && window.jQuery === jQuery ) {
                        window.jQuery = _jQuery;
                    }

                    return jQuery;
                };

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
                if ( !noGlobal ) {
                    window.jQuery = window.$ = jQuery;
                }




                return jQuery;
            } );


            /***/ }),

        /***/ "./node_modules/metismenu/dist/metisMenu.js":
        /*!**************************************************!*\
  !*** ./node_modules/metismenu/dist/metisMenu.js ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(jQuery) {/*
 * metismenu - v1.1.3
 * Easy menu jQuery plugin for Twitter Bootstrap 3
 * https://github.com/onokumus/metisMenu
 *
 * Made by Osman Nuri Okumus
 * Under MIT License
 */
                ;(function($, window, document, undefined) {

                    var pluginName = "metisMenu",
                        defaults = {
                            toggle: true,
                            doubleTapToGo: false
                        };

                    function Plugin(element, options) {
                        this.element = $(element);
                        this.settings = $.extend({}, defaults, options);
                        this._defaults = defaults;
                        this._name = pluginName;
                        this.init();
                    }

                    Plugin.prototype = {
                        init: function() {

                            var $this = this.element,
                                $toggle = this.settings.toggle,
                                obj = this;

                            if (this.isIE() <= 9) {
                                $this.find("li.active").has("ul").children("ul").collapse("show");
                                $this.find("li").not(".active").has("ul").children("ul").collapse("hide");
                            } else {
                                $this.find("li.active").has("ul").children("ul").addClass("collapse in");
                                $this.find("li").not(".active").has("ul").children("ul").addClass("collapse");
                            }

                            //add the "doubleTapToGo" class to active items if needed
                            if (obj.settings.doubleTapToGo) {
                                $this.find("li.active").has("ul").children("a").addClass("doubleTapToGo");
                            }

                            $this.find("li").has("ul").children("a").on("click" + "." + pluginName, function(e) {
                                e.preventDefault();

                                //Do we need to enable the double tap
                                if (obj.settings.doubleTapToGo) {

                                    //if we hit a second time on the link and the href is valid, navigate to that url
                                    if (obj.doubleTapToGo($(this)) && $(this).attr("href") !== "#" && $(this).attr("href") !== "") {
                                        e.stopPropagation();
                                        document.location = $(this).attr("href");
                                        return;
                                    }
                                }

                                $(this).parent("li").toggleClass("active").children("ul").collapse("toggle");

                                if ($toggle) {
                                    $(this).parent("li").siblings().removeClass("active").children("ul.in").collapse("hide");
                                }

                            });
                        },

                        isIE: function() { //https://gist.github.com/padolsey/527683
                            var undef,
                                v = 3,
                                div = document.createElement("div"),
                                all = div.getElementsByTagName("i");

                            while (
                                div.innerHTML = "<!--[if gt IE " + (++v) + "]><i></i><![endif]-->",
                                    all[0]
                                ) {
                                return v > 4 ? v : undef;
                            }
                        },

                        //Enable the link on the second click.
                        doubleTapToGo: function(elem) {
                            var $this = this.element;

                            //if the class "doubleTapToGo" exists, remove it and return
                            if (elem.hasClass("doubleTapToGo")) {
                                elem.removeClass("doubleTapToGo");
                                return true;
                            }

                            //does not exists, add a new class and return false
                            if (elem.parent().children("ul").length) {
                                //first remove all other class
                                $this.find(".doubleTapToGo").removeClass("doubleTapToGo");
                                //add the class on the current element
                                elem.addClass("doubleTapToGo");
                                return false;
                            }
                        },

                        remove: function() {
                            this.element.off("." + pluginName);
                            this.element.removeData(pluginName);
                        }

                    };

                    $.fn[pluginName] = function(options) {
                        this.each(function () {
                            var el = $(this);
                            if (el.data(pluginName)) {
                                el.data(pluginName).remove();
                            }
                            el.data(pluginName, new Plugin(this, options));
                        });
                        return this;
                    };

                })(jQuery, window, document);
                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./node_modules/process/browser.js":
        /*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

// shim for using process in browser
            var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

            var cachedSetTimeout;
            var cachedClearTimeout;

            function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
            }
            function defaultClearTimeout () {
                throw new Error('clearTimeout has not been defined');
            }
            (function () {
                try {
                    if (typeof setTimeout === 'function') {
                        cachedSetTimeout = setTimeout;
                    } else {
                        cachedSetTimeout = defaultSetTimout;
                    }
                } catch (e) {
                    cachedSetTimeout = defaultSetTimout;
                }
                try {
                    if (typeof clearTimeout === 'function') {
                        cachedClearTimeout = clearTimeout;
                    } else {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                } catch (e) {
                    cachedClearTimeout = defaultClearTimeout;
                }
            } ())
            function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                    //normal enviroments in sane situations
                    return setTimeout(fun, 0);
                }
                // if setTimeout wasn't available but was latter defined
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                    cachedSetTimeout = setTimeout;
                    return setTimeout(fun, 0);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedSetTimeout(fun, 0);
                } catch(e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                        return cachedSetTimeout.call(null, fun, 0);
                    } catch(e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                        return cachedSetTimeout.call(this, fun, 0);
                    }
                }


            }
            function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                    //normal enviroments in sane situations
                    return clearTimeout(marker);
                }
                // if clearTimeout wasn't available but was latter defined
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                    cachedClearTimeout = clearTimeout;
                    return clearTimeout(marker);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedClearTimeout(marker);
                } catch (e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                        return cachedClearTimeout.call(null, marker);
                    } catch (e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                        return cachedClearTimeout.call(this, marker);
                    }
                }



            }
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;

            function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                    return;
                }
                draining = false;
                if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                } else {
                    queueIndex = -1;
                }
                if (queue.length) {
                    drainQueue();
                }
            }

            function drainQueue() {
                if (draining) {
                    return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;

                var len = queue.length;
                while(len) {
                    currentQueue = queue;
                    queue = [];
                    while (++queueIndex < len) {
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    len = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
            }

            process.nextTick = function (fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for (var i = 1; i < arguments.length; i++) {
                        args[i - 1] = arguments[i];
                    }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                    runTimeout(drainQueue);
                }
            };

// v8 likes predictible objects
            function Item(fun, array) {
                this.fun = fun;
                this.array = array;
            }
            Item.prototype.run = function () {
                this.fun.apply(null, this.array);
            };
            process.title = 'browser';
            process.browser = true;
            process.env = {};
            process.argv = [];
            process.version = ''; // empty string to avoid regexp issues
            process.versions = {};

            function noop() {}

            process.on = noop;
            process.addListener = noop;
            process.once = noop;
            process.off = noop;
            process.removeListener = noop;
            process.removeAllListeners = noop;
            process.emit = noop;
            process.prependListener = noop;
            process.prependOnceListener = noop;

            process.listeners = function (name) { return [] }

            process.binding = function (name) {
                throw new Error('process.binding is not supported');
            };

            process.cwd = function () { return '/' };
            process.chdir = function (dir) {
                throw new Error('process.chdir is not supported');
            };
            process.umask = function() { return 0; };


            /***/ }),

        /***/ "./node_modules/toastr/toastr.js":
        /*!***************************************!*\
  !*** ./node_modules/toastr/toastr.js ***!
  \***************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * Toastr
 * Copyright 2012-2015
 * Authors: John Papa, Hans Fjällemark, and Tim Ferrell.
 * All Rights Reserved.
 * Use, reproduction, distribution, and modification of this code is subject to the terms and
 * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php
 *
 * ARIA Support: Greta Krafsig
 *
 * Project: https://github.com/CodeSeven/toastr
 */
            /* global define */
            (function (define) {
                !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($) {
                    return (function () {
                        var $container;
                        var listener;
                        var toastId = 0;
                        var toastType = {
                            error: 'error',
                            info: 'info',
                            success: 'success',
                            warning: 'warning'
                        };

                        var toastr = {
                            clear: clear,
                            remove: remove,
                            error: error,
                            getContainer: getContainer,
                            info: info,
                            options: {},
                            subscribe: subscribe,
                            success: success,
                            version: '2.1.4',
                            warning: warning
                        };

                        var previousToast;

                        return toastr;

                        ////////////////

                        function error(message, title, optionsOverride) {
                            return notify({
                                type: toastType.error,
                                iconClass: getOptions().iconClasses.error,
                                message: message,
                                optionsOverride: optionsOverride,
                                title: title
                            });
                        }

                        function getContainer(options, create) {
                            if (!options) { options = getOptions(); }
                            $container = $('#' + options.containerId);
                            if ($container.length) {
                                return $container;
                            }
                            if (create) {
                                $container = createContainer(options);
                            }
                            return $container;
                        }

                        function info(message, title, optionsOverride) {
                            return notify({
                                type: toastType.info,
                                iconClass: getOptions().iconClasses.info,
                                message: message,
                                optionsOverride: optionsOverride,
                                title: title
                            });
                        }

                        function subscribe(callback) {
                            listener = callback;
                        }

                        function success(message, title, optionsOverride) {
                            return notify({
                                type: toastType.success,
                                iconClass: getOptions().iconClasses.success,
                                message: message,
                                optionsOverride: optionsOverride,
                                title: title
                            });
                        }

                        function warning(message, title, optionsOverride) {
                            return notify({
                                type: toastType.warning,
                                iconClass: getOptions().iconClasses.warning,
                                message: message,
                                optionsOverride: optionsOverride,
                                title: title
                            });
                        }

                        function clear($toastElement, clearOptions) {
                            var options = getOptions();
                            if (!$container) { getContainer(options); }
                            if (!clearToast($toastElement, options, clearOptions)) {
                                clearContainer(options);
                            }
                        }

                        function remove($toastElement) {
                            var options = getOptions();
                            if (!$container) { getContainer(options); }
                            if ($toastElement && $(':focus', $toastElement).length === 0) {
                                removeToast($toastElement);
                                return;
                            }
                            if ($container.children().length) {
                                $container.remove();
                            }
                        }

                        // internal functions

                        function clearContainer (options) {
                            var toastsToClear = $container.children();
                            for (var i = toastsToClear.length - 1; i >= 0; i--) {
                                clearToast($(toastsToClear[i]), options);
                            }
                        }

                        function clearToast ($toastElement, options, clearOptions) {
                            var force = clearOptions && clearOptions.force ? clearOptions.force : false;
                            if ($toastElement && (force || $(':focus', $toastElement).length === 0)) {
                                $toastElement[options.hideMethod]({
                                    duration: options.hideDuration,
                                    easing: options.hideEasing,
                                    complete: function () { removeToast($toastElement); }
                                });
                                return true;
                            }
                            return false;
                        }

                        function createContainer(options) {
                            $container = $('<div/>')
                                .attr('id', options.containerId)
                                .addClass(options.positionClass);

                            $container.appendTo($(options.target));
                            return $container;
                        }

                        function getDefaults() {
                            return {
                                tapToDismiss: true,
                                toastClass: 'toast',
                                containerId: 'toast-container',
                                debug: false,

                                showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery
                                showDuration: 300,
                                showEasing: 'swing', //swing and linear are built into jQuery
                                onShown: undefined,
                                hideMethod: 'fadeOut',
                                hideDuration: 1000,
                                hideEasing: 'swing',
                                onHidden: undefined,
                                closeMethod: false,
                                closeDuration: false,
                                closeEasing: false,
                                closeOnHover: true,

                                extendedTimeOut: 1000,
                                iconClasses: {
                                    error: 'toast-error',
                                    info: 'toast-info',
                                    success: 'toast-success',
                                    warning: 'toast-warning'
                                },
                                iconClass: 'toast-info',
                                positionClass: 'toast-top-right',
                                timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky
                                titleClass: 'toast-title',
                                messageClass: 'toast-message',
                                escapeHtml: false,
                                target: 'body',
                                closeHtml: '<button type="button">&times;</button>',
                                closeClass: 'toast-close-button',
                                newestOnTop: true,
                                preventDuplicates: false,
                                progressBar: false,
                                progressClass: 'toast-progress',
                                rtl: false
                            };
                        }

                        function publish(args) {
                            if (!listener) { return; }
                            listener(args);
                        }

                        function notify(map) {
                            var options = getOptions();
                            var iconClass = map.iconClass || options.iconClass;

                            if (typeof (map.optionsOverride) !== 'undefined') {
                                options = $.extend(options, map.optionsOverride);
                                iconClass = map.optionsOverride.iconClass || iconClass;
                            }

                            if (shouldExit(options, map)) { return; }

                            toastId++;

                            $container = getContainer(options, true);

                            var intervalId = null;
                            var $toastElement = $('<div/>');
                            var $titleElement = $('<div/>');
                            var $messageElement = $('<div/>');
                            var $progressElement = $('<div/>');
                            var $closeElement = $(options.closeHtml);
                            var progressBar = {
                                intervalId: null,
                                hideEta: null,
                                maxHideTime: null
                            };
                            var response = {
                                toastId: toastId,
                                state: 'visible',
                                startTime: new Date(),
                                options: options,
                                map: map
                            };

                            personalizeToast();

                            displayToast();

                            handleEvents();

                            publish(response);

                            if (options.debug && console) {
                                console.log(response);
                            }

                            return $toastElement;

                            function escapeHtml(source) {
                                if (source == null) {
                                    source = '';
                                }

                                return source
                                    .replace(/&/g, '&amp;')
                                    .replace(/"/g, '&quot;')
                                    .replace(/'/g, '&#39;')
                                    .replace(/</g, '&lt;')
                                    .replace(/>/g, '&gt;');
                            }

                            function personalizeToast() {
                                setIcon();
                                setTitle();
                                setMessage();
                                setCloseButton();
                                setProgressBar();
                                setRTL();
                                setSequence();
                                setAria();
                            }

                            function setAria() {
                                var ariaValue = '';
                                switch (map.iconClass) {
                                    case 'toast-success':
                                    case 'toast-info':
                                        ariaValue =  'polite';
                                        break;
                                    default:
                                        ariaValue = 'assertive';
                                }
                                $toastElement.attr('aria-live', ariaValue);
                            }

                            function handleEvents() {
                                if (options.closeOnHover) {
                                    $toastElement.hover(stickAround, delayedHideToast);
                                }

                                if (!options.onclick && options.tapToDismiss) {
                                    $toastElement.click(hideToast);
                                }

                                if (options.closeButton && $closeElement) {
                                    $closeElement.click(function (event) {
                                        if (event.stopPropagation) {
                                            event.stopPropagation();
                                        } else if (event.cancelBubble !== undefined && event.cancelBubble !== true) {
                                            event.cancelBubble = true;
                                        }

                                        if (options.onCloseClick) {
                                            options.onCloseClick(event);
                                        }

                                        hideToast(true);
                                    });
                                }

                                if (options.onclick) {
                                    $toastElement.click(function (event) {
                                        options.onclick(event);
                                        hideToast();
                                    });
                                }
                            }

                            function displayToast() {
                                $toastElement.hide();

                                $toastElement[options.showMethod](
                                    {duration: options.showDuration, easing: options.showEasing, complete: options.onShown}
                                );

                                if (options.timeOut > 0) {
                                    intervalId = setTimeout(hideToast, options.timeOut);
                                    progressBar.maxHideTime = parseFloat(options.timeOut);
                                    progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;
                                    if (options.progressBar) {
                                        progressBar.intervalId = setInterval(updateProgress, 10);
                                    }
                                }
                            }

                            function setIcon() {
                                if (map.iconClass) {
                                    $toastElement.addClass(options.toastClass).addClass(iconClass);
                                }
                            }

                            function setSequence() {
                                if (options.newestOnTop) {
                                    $container.prepend($toastElement);
                                } else {
                                    $container.append($toastElement);
                                }
                            }

                            function setTitle() {
                                if (map.title) {
                                    var suffix = map.title;
                                    if (options.escapeHtml) {
                                        suffix = escapeHtml(map.title);
                                    }
                                    $titleElement.append(suffix).addClass(options.titleClass);
                                    $toastElement.append($titleElement);
                                }
                            }

                            function setMessage() {
                                if (map.message) {
                                    var suffix = map.message;
                                    if (options.escapeHtml) {
                                        suffix = escapeHtml(map.message);
                                    }
                                    $messageElement.append(suffix).addClass(options.messageClass);
                                    $toastElement.append($messageElement);
                                }
                            }

                            function setCloseButton() {
                                if (options.closeButton) {
                                    $closeElement.addClass(options.closeClass).attr('role', 'button');
                                    $toastElement.prepend($closeElement);
                                }
                            }

                            function setProgressBar() {
                                if (options.progressBar) {
                                    $progressElement.addClass(options.progressClass);
                                    $toastElement.prepend($progressElement);
                                }
                            }

                            function setRTL() {
                                if (options.rtl) {
                                    $toastElement.addClass('rtl');
                                }
                            }

                            function shouldExit(options, map) {
                                if (options.preventDuplicates) {
                                    if (map.message === previousToast) {
                                        return true;
                                    } else {
                                        previousToast = map.message;
                                    }
                                }
                                return false;
                            }

                            function hideToast(override) {
                                var method = override && options.closeMethod !== false ? options.closeMethod : options.hideMethod;
                                var duration = override && options.closeDuration !== false ?
                                    options.closeDuration : options.hideDuration;
                                var easing = override && options.closeEasing !== false ? options.closeEasing : options.hideEasing;
                                if ($(':focus', $toastElement).length && !override) {
                                    return;
                                }
                                clearTimeout(progressBar.intervalId);
                                return $toastElement[method]({
                                    duration: duration,
                                    easing: easing,
                                    complete: function () {
                                        removeToast($toastElement);
                                        clearTimeout(intervalId);
                                        if (options.onHidden && response.state !== 'hidden') {
                                            options.onHidden();
                                        }
                                        response.state = 'hidden';
                                        response.endTime = new Date();
                                        publish(response);
                                    }
                                });
                            }

                            function delayedHideToast() {
                                if (options.timeOut > 0 || options.extendedTimeOut > 0) {
                                    intervalId = setTimeout(hideToast, options.extendedTimeOut);
                                    progressBar.maxHideTime = parseFloat(options.extendedTimeOut);
                                    progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;
                                }
                            }

                            function stickAround() {
                                clearTimeout(intervalId);
                                progressBar.hideEta = 0;
                                $toastElement.stop(true, true)[options.showMethod](
                                    {duration: options.showDuration, easing: options.showEasing}
                                );
                            }

                            function updateProgress() {
                                var percentage = ((progressBar.hideEta - (new Date().getTime())) / progressBar.maxHideTime) * 100;
                                $progressElement.width(percentage + '%');
                            }
                        }

                        function getOptions() {
                            return $.extend({}, getDefaults(), toastr.options);
                        }

                        function removeToast($toastElement) {
                            if (!$container) { $container = getContainer(); }
                            if ($toastElement.is(':visible')) {
                                return;
                            }
                            $toastElement.remove();
                            $toastElement = null;
                            if ($container.children().length === 0) {
                                $container.remove();
                                previousToast = undefined;
                            }
                        }

                    })();
                }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
                __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            }(__webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js")));


            /***/ }),

        /***/ "./node_modules/webpack/buildin/amd-define.js":
        /*!***************************************!*\
  !*** (webpack)/buildin/amd-define.js ***!
  \***************************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            module.exports = function() {
                throw new Error("define cannot be used indirect");
            };


            /***/ }),

        /***/ "./node_modules/webpack/buildin/global.js":
        /*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
        /*! no static exports found */
        /***/ (function(module, exports) {

            var g;

// This works in non-strict mode
            g = (function() {
                return this;
            })();

            try {
                // This works if eval is allowed (see CSP)
                g = g || new Function("return this")();
            } catch (e) {
                // This works if the window reference is available
                if (typeof window === "object") g = window;
            }

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

            module.exports = g;


            /***/ }),

        /***/ "./scripts/app.js":
        /*!************************!*\
  !*** ./scripts/app.js ***!
  \************************/
        /*! no exports provided */
        /***/ (function(module, __webpack_exports__, __webpack_require__) {

            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");
                /* harmony import */ var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");
                /* harmony import */ var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_1__);
                /* harmony import */ var core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");
                /* harmony import */ var core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_2__);
                /* harmony import */ var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.function.name */ "./node_modules/core-js/modules/es.function.name.js");
                /* harmony import */ var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_3__);
                /* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");
                /* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_4__);
                /* harmony import */ var core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.promise */ "./node_modules/core-js/modules/es.promise.js");
                /* harmony import */ var core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_5__);
                /* harmony import */ var core_js_modules_es_promise_finally__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.promise.finally */ "./node_modules/core-js/modules/es.promise.finally.js");
                /* harmony import */ var core_js_modules_es_promise_finally__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_finally__WEBPACK_IMPORTED_MODULE_6__);
                /* harmony import */ var core_js_modules_es_regexp_constructor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.regexp.constructor */ "./node_modules/core-js/modules/es.regexp.constructor.js");
                /* harmony import */ var core_js_modules_es_regexp_constructor__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_constructor__WEBPACK_IMPORTED_MODULE_7__);
                /* harmony import */ var core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");
                /* harmony import */ var core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_8__);
                /* harmony import */ var core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");
                /* harmony import */ var core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_9__);
                /* harmony import */ var core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");
                /* harmony import */ var core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_10__);
                /* harmony import */ var core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.string.split */ "./node_modules/core-js/modules/es.string.split.js");
                /* harmony import */ var core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_11__);
                /* harmony import */ var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
                /* harmony import */ var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_12__);
                /* harmony import */ var bootstrap__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/npm.js");
                /* harmony import */ var bootstrap__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(bootstrap__WEBPACK_IMPORTED_MODULE_13__);
                /* harmony import */ var bootstrap_datepicker__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! bootstrap-datepicker */ "./node_modules/bootstrap-datepicker/dist/js/bootstrap-datepicker.js");
                /* harmony import */ var bootstrap_datepicker__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(bootstrap_datepicker__WEBPACK_IMPORTED_MODULE_14__);
                /* harmony import */ var bootstrap_tagsinput__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! bootstrap-tagsinput */ "./node_modules/bootstrap-tagsinput/dist/bootstrap-tagsinput.js");
                /* harmony import */ var bootstrap_tagsinput__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(bootstrap_tagsinput__WEBPACK_IMPORTED_MODULE_15__);
                /* harmony import */ var bootstrap_select__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! bootstrap-select */ "./node_modules/bootstrap-select/dist/js/bootstrap-select.js");
                /* harmony import */ var bootstrap_select__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(bootstrap_select__WEBPACK_IMPORTED_MODULE_16__);
                /* harmony import */ var bootstrap_select_dist_js_i18n_defaults_ua_UA_min__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! bootstrap-select/dist/js/i18n/defaults-ua_UA.min */ "./node_modules/bootstrap-select/dist/js/i18n/defaults-ua_UA.min.js");
                /* harmony import */ var bootstrap_select_dist_js_i18n_defaults_ua_UA_min__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(bootstrap_select_dist_js_i18n_defaults_ua_UA_min__WEBPACK_IMPORTED_MODULE_17__);
                /* harmony import */ var metismenu__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! metismenu */ "./node_modules/metismenu/dist/metisMenu.js");
                /* harmony import */ var metismenu__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(metismenu__WEBPACK_IMPORTED_MODULE_18__);
                /* harmony import */ var jquery_slimscroll__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! jquery-slimscroll */ "./node_modules/jquery-slimscroll/jquery.slimscroll.js");
                /* harmony import */ var jquery_slimscroll__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(jquery_slimscroll__WEBPACK_IMPORTED_MODULE_19__);
                /* harmony import */ var _themes_js_waves__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../themes/js/waves */ "./themes/js/waves.js");
                /* harmony import */ var _themes_js_waves__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_themes_js_waves__WEBPACK_IMPORTED_MODULE_20__);
                /* harmony import */ var _themes_js_custom__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../themes/js/custom */ "./themes/js/custom.js");
                /* harmony import */ var _themes_js_custom__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(_themes_js_custom__WEBPACK_IMPORTED_MODULE_21__);
                /* harmony import */ var _modules_upload_crop_image__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./modules/upload-crop-image */ "./scripts/modules/upload-crop-image.js");
                /* harmony import */ var _modules_upload_image__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./modules/upload-image */ "./scripts/modules/upload-image.js");
                /* harmony import */ var _modules_clients__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./modules/clients */ "./scripts/modules/clients/index.js");
                /* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
                /* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_25__);
                /* harmony import */ var toastr__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! toastr */ "./node_modules/toastr/toastr.js");
                /* harmony import */ var toastr__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(toastr__WEBPACK_IMPORTED_MODULE_26__);





























                $('.js-datepicker').datepicker({
                    'format': 'dd-mm-yyyy',
                    uiLibrary: 'bootstrap4',
                    weekStart:1,
                    language: "uk"

                });
                var formCollection = document.querySelectorAll("form .dynamic__collection");

                if (formCollection) {
                    var getSelectOptionsArray = function getSelectOptionsArray(rowElement) {
                        var currentSelect = rowElement.querySelector('select');
                        var availableOptions = [];

                        for (var i = 0; i < currentSelect.options.length; i++) {
                            var option = currentSelect.options[i];

                            if (option.value) {
                                availableOptions.push(option);
                            }
                        }

                        return availableOptions;
                    };

                    var updateSelectOptions = function updateSelectOptions(select, selectedValues) {
                        for (var i = 0; i < selectedValues.length; i++) {
                            for (var j = 0; j < select.options.length; j++) {
                                if (select.options[j].value === selectedValues[i]) {
                                    select.remove(j);
                                }
                            }
                        }

                        $('select.selectpicker.disabled').selectpicker('refresh');
                    };

                    var getSelectedValues = function getSelectedValues(selectElements) {
                        var alreadySelectedValues = [];
                        selectElements.forEach(function (element) {
                            if (element.options[element.selectedIndex].value !== '') {
                                alreadySelectedValues.push(element.options[element.selectedIndex].value);
                            }
                        });
                        return alreadySelectedValues;
                    };

                    var getRow = function getRow(container, counter) {
                        var proto = container.getAttribute('data-prototype');
                        var protoName = container.getAttribute('data-prototype-name') || '__name__';
                        var id = container.getAttribute('id'); // Set field id

                        var idRegexp = new RegExp(id + '_' + protoName, 'g');
                        proto = proto.replace(idRegexp, id + '_' + counter); // Set field name

                        var parts = id.split('_');
                        var nameRegexp = new RegExp(parts[parts.length - 1] + '\\[' + protoName, 'g');
                        proto = proto.replace(nameRegexp, parts[parts.length - 1] + '[' + counter);
                        var newProto = document.createElement('div');
                        newProto.innerHTML = proto;
                        return newProto;
                    };

                    $('select.selectpicker.disabled').on('loaded.bs.select', function (e) {
                        var target = e.target;

                        if (target.value && $(target).hasClass('disabled') === true) {
                            var parent = $(target).closest('.bootstrap-select');
                            parent.find('button.dropdown-toggle').addClass('disabled');
                        }
                    });
                    $('select.selectpicker.disabled').on('refreshed.bs.select', function (e) {
                        var target = e.target;

                        if (target.value && $(target).hasClass('disabled') === true) {
                            var parent = $(target).closest('.bootstrap-select');
                            parent.find('button.dropdown-toggle').addClass('disabled');
                        }
                    });
                    formCollection.forEach(function (element) {
                        var counter = element.querySelectorAll('div.collection-row').length;
                        var newProto = getRow(element, counter);
                        var allOptionsArray = getSelectOptionsArray(newProto);

                        if (allOptionsArray.length === counter) {
                            var sddButtonBlock = element.querySelector('#button__block');
                            sddButtonBlock.classList.add("hidden");
                        }

                        var addButton = element.querySelector('.collection-add');
                        addButton.addEventListener("click", function (e) {
                            var target = e.target;
                            var container = target.closest('[data-prototype]');
                            var parent = target.closest('#button__block');
                            var newProto = getRow(container, counter);
                            var allOptionsArray = getSelectOptionsArray(newProto);
                            var newSelect = newProto.querySelector('select');
                            newSelect.addEventListener("change", function (e) {
                                var selectElements = element.querySelectorAll('select');
                                selectElements.forEach(function (selectElement) {
                                    if (selectElement.options[selectElement.selectedIndex].value !== '') {
                                        return;
                                    }

                                    var selectElements = element.querySelectorAll('select');
                                    var selectedValues = getSelectedValues(selectElements);
                                    updateSelectOptions(selectElement, selectedValues);
                                });
                            });
                            var selectElements = element.querySelectorAll('select');

                            if (selectElements) {
                                var selectedValues = getSelectedValues(selectElements);
                                updateSelectOptions(newSelect, selectedValues);

                                if (allOptionsArray.length === counter + 1) {
                                    var _sddButtonBlock = element.querySelector('#button__block');

                                    _sddButtonBlock.classList.add("hidden");
                                }
                            }

                            container.insertBefore(newProto, parent);
                            $('.selectpicker.disabled').selectpicker('refresh');
                            element.querySelectorAll('select.selectpicker.disabled').forEach(function (disabledSelect) {
                                $(disabledSelect).on('changed.bs.select', function (e) {
                                    var target = e.target;
                                    var collection = target.closest('.dynamic__collection');
                                    collection.querySelectorAll('select.selectpicker.disabled').forEach(function (e) {
                                        if (e.selectedIndex > 0) {
                                            var _parent = $(e).closest('.bootstrap-select');

                                            _parent.find('button.dropdown-toggle').addClass('disabled');
                                        }
                                    });
                                });
                                $(disabledSelect).on('refreshed.bs.select', function (e) {
                                    var target = e.target;
                                    var collection = target.closest('.dynamic__collection');
                                    collection.querySelectorAll('select.selectpicker.disabled').forEach(function (e) {
                                        if (e.selectedIndex > 0) {
                                            var _parent2 = $(e).closest('.bootstrap-select');

                                            _parent2.find('button.dropdown-toggle').addClass('disabled');
                                        }
                                    });
                                });
                            });
                            counter++;
                        });
                        $(element).on('click', '.collection-delete', function (event) {
                            $(this).closest('.collection-row').remove();
                            counter--;
                            var sddButtonBlock = element.querySelector('#button__block');
                            sddButtonBlock.classList.remove("hidden");
                        });
                    });
                }

                var supplyTypesSelect = document.getElementById('supplyTypes');

                if (supplyTypesSelect) {
                    var removeOptions = function removeOptions(select) {
                        for (var i = select.options.length - 1; i >= 0; i--) {
                            select.remove(i);
                        }
                    };

                    supplyTypesSelect.addEventListener("change", function (e) {
                        var select = document.getElementById('supplies');
                        select.setAttribute('disabled', 'disabled');
                        $(select).selectpicker('refresh');
                        var target = e.target;
                        var types = [],
                            option;
                        var length = target.options.length;

                        for (var i = 0; i < length; i++) {
                            option = target.options[i];

                            if (true === option.selected) {
                                types.push(option.value);
                            }
                        }

                        if (types.length === 0) {
                            removeOptions(select);
                            select.setAttribute('disabled', 'disabled');
                            $(select).selectpicker('refresh');
                            return;
                        }

                        axios__WEBPACK_IMPORTED_MODULE_25___default.a.get('/admin/api/v1/transactions/supplies', {
                            params: {
                                type: types
                            }
                        }).then(function (response) {
                            select.removeAttribute('disabled');
                            removeOptions(select);
                            response.data.map(function (item) {
                                var opt = document.createElement("option");
                                opt.value = item.code;
                                opt.text = item.name;
                                select.options.add(opt, null);
                            });
                            $(select).selectpicker('refresh');
                        }).catch(function (error) {
                            console.log(error);
                        }).finally(function () {// always executed
                        });
                    });
                }
                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./scripts/libs/modal.js":
        /*!*******************************!*\
  !*** ./scripts/libs/modal.js ***!
  \*******************************/
        /*! exports provided: default */
        /***/ (function(module, __webpack_exports__, __webpack_require__) {

            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");
                /* harmony import */ var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var core_js_modules_es_date_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.date.to-string */ "./node_modules/core-js/modules/es.date.to-string.js");
                /* harmony import */ var core_js_modules_es_date_to_string__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_string__WEBPACK_IMPORTED_MODULE_1__);
                /* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");
                /* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_2__);
                /* harmony import */ var core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");
                /* harmony import */ var core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_3__);
                /* harmony import */ var core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");
                /* harmony import */ var core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_4__);
                /* harmony import */ var core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");
                /* harmony import */ var core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_5__);







                var modal = function self(options) {
                    options = $.extend({
                        title: '',
                        body: '',
                        remote: false,
                        backdrop: 'static',
                        size: false,
                        onShow: false,
                        onHide: false,
                        actions: false
                    }, options);
                    self.onShow = typeof options.onShow == 'function' ? options.onShow : function () {};
                    self.onHide = typeof options.onHide == 'function' ? options.onHide : function () {};

                    if (self.$modal === undefined) {
                        self.$modal = $('<div class="modal fade"><div class="modal-dialog"><div class="modal-content"></div></div></div>').appendTo('body');
                        self.$modal.on('shown.bs.modal', function (e) {
                            self.onShow.call(this, e);
                        });
                    }

                    self.$modal.on('hidden.bs.modal', function (e) {
                        self.onHide.call(this, e);
                    });
                    var modalClass = {
                        small: "modal-sm",
                        large: "modal-lg"
                    };
                    self.$modal.data('bs.modal', false);
                    self.$modal.find('.modal-dialog').removeClass().addClass('modal-dialog ' + (modalClass[options.size] || ''));
                    self.$modal.find('.modal-content').html('<div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4 class="modal-title">${title}</h4></div><div class="modal-body">${body}</div><div class="modal-footer"></div>'.replace('${title}', options.title).replace('${body}', options.body));
                    var footer = self.$modal.find('.modal-footer');

                    if (Object.prototype.toString.call(options.actions) === "[object Array]") {
                        for (var i = 0, l = options.actions.length; i < l; i++) {
                            options.actions[i].onClick = typeof options.actions[i].onClick == 'function' ? options.actions[i].onClick : function () {};
                            $('<button type="button" class="btn ' + (options.actions[i].cssClass || '') + '">' + (options.actions[i].label || '{Label Missing!}') + '</button>').appendTo(footer).on('click', options.actions[i].onClick);
                        }
                    } else {
                        $('<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>').appendTo(footer);
                    }

                    self.$modal.modal(options);

                    self.close = function () {
                        self.$modal.modal('hide');
                    };

                    return self.$modal;
                };

                /* harmony default export */ __webpack_exports__["default"] = (modal);
                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./scripts/modules/clients/index.js":
        /*!******************************************!*\
  !*** ./scripts/modules/clients/index.js ***!
  \******************************************/
        /*! no exports provided */
        /***/ (function(module, __webpack_exports__, __webpack_require__) {

            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony import */ var _register_new_company__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./register-new-company */ "./scripts/modules/clients/register-new-company.js");


            /***/ }),

        /***/ "./scripts/modules/clients/register-new-company.js":
        /*!*********************************************************!*\
  !*** ./scripts/modules/clients/register-new-company.js ***!
  \*********************************************************/
        /*! no exports provided */
        /***/ (function(module, __webpack_exports__, __webpack_require__) {

            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");
                /* harmony import */ var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");
                /* harmony import */ var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_1__);
                /* harmony import */ var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.function.name */ "./node_modules/core-js/modules/es.function.name.js");
                /* harmony import */ var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_2__);
                /* harmony import */ var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
                /* harmony import */ var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_3__);
                /* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
                /* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_4__);
                /* harmony import */ var toastr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! toastr */ "./node_modules/toastr/toastr.js");
                /* harmony import */ var toastr__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(toastr__WEBPACK_IMPORTED_MODULE_5__);
                /* harmony import */ var _libs_modal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../libs/modal */ "./scripts/libs/modal.js");









                var formTemplate = '<form action="">\n' + '                    <div class="form-group">\n' + '                        <label for="recipient-name" class="control-label">\n' + '                            Email*\n' + '                        </label>\n' + '                        <input type="email" required="" class="form-control" id="email" name="email">\n' + '                    </div>\n' + '                </form>';
                var list = document.querySelector("#clients-list");

                if (list) {
                    var sendLink = function sendLink(button, url, form, modal) {
                        var inputs = form.querySelectorAll('input');
                        inputs.forEach(function (element) {
                            var row = element.closest('.form-group');
                            row.classList.remove('has-error');
                            var errorBlock = row.querySelector('.help-block');

                            if (errorBlock) {
                                errorBlock.remove();
                            }
                        });
                        axios__WEBPACK_IMPORTED_MODULE_4___default()({
                            method: "post",
                            url: url,
                            data: {
                                email: form.querySelector('#email').value
                            },
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        }).then(function (response) {
                            toastr__WEBPACK_IMPORTED_MODULE_5___default.a.success("Message sent successfully!");
                            var data = response.data;

                            if (data.id) {
                                button.classList.remove('btn-success');
                                button.classList.add('btn-primary');
                                button.setAttribute('data-email', data.email);
                                button.setAttribute('data-path', '/admin/api/v1/company/resend-register-link/' + data.id);
                                button.innerHTML = '<i class="fa fa-external-link-square" aria-hidden="true"></i>&nbsp;Відправити посилання повторно';
                            }

                            modal.modal('hide');
                        }).catch(function (error) {
                            if (!error || !error.response) {
                                return;
                            }

                            var errors = error.response.data.errors;

                            var _loop = function _loop(key) {
                                inputs.forEach(function (element) {
                                    if (element.getAttribute('name') === key) {
                                        var row = element.closest('.form-group');
                                        row.classList.add('has-error');
                                        var el = document.createElement("span");
                                        el.classList.add('help-block');
                                        el.innerHTML = errors[key];
                                        element.parentNode.insertBefore(el, element.nextSibling);
                                    }
                                });
                            };

                            for (var key in errors) {
                                _loop(key);
                            }
                        });
                    };

                    var buttons = list.querySelectorAll('#send_register_link');
                    buttons.forEach(function (element) {
                        var _this = this;

                        element.addEventListener("click", function (e) {
                            var button = e.target;
                            var url = button.getAttribute("data-path");
                            var data = {
                                email: button.getAttribute('data-email') || ''
                            };
                            Object(_libs_modal__WEBPACK_IMPORTED_MODULE_6__["default"])({
                                title: button.getAttribute('data-client'),
                                body: formTemplate,
                                onShow: function onShow(e) {
                                    var inputs = $(e.target)[0].querySelectorAll('input');
                                    inputs.forEach(function (element) {
                                        if (data.hasOwnProperty(element.name)) {
                                            element.value = data[element.name];
                                        }
                                    });
                                    $(e.target).find('.datepicker-autoclose').datepicker({
                                        format: 'yyyy-mm-dd',
                                        uiLibrary: 'bootstrap4',
                                        autoclose: true,
                                        todayHighlight: true
                                    });
                                },
                                onHide: function onHide(e) {
                                    $(_this).data('bs.modal', null);
                                    $(_this).remove();
                                },
                                actions: [{
                                    label: 'Закрити',
                                    cssClass: 'btn-default',
                                    onClick: function onClick(e) {
                                        $(e.target).closest('.modal').modal('hide');
                                    }
                                }, {
                                    label: 'Відправити',
                                    cssClass: 'btn-success',
                                    onClick: function onClick(e) {
                                        var form = $(e.target).closest('.modal').find('form')[0];
                                        sendLink(button, url, form, $(e.target).closest('.modal'));
                                    }
                                }]
                            });
                        });
                    });
                }
                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./scripts/modules/upload-crop-image.js":
        /*!**********************************************!*\
  !*** ./scripts/modules/upload-crop-image.js ***!
  \**********************************************/
        /*! no exports provided */
        /***/ (function(module, __webpack_exports__, __webpack_require__) {

            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var core_js_modules_es_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.symbol */ "./node_modules/core-js/modules/es.symbol.js");
                /* harmony import */ var core_js_modules_es_symbol__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var core_js_modules_es_symbol_description__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.symbol.description */ "./node_modules/core-js/modules/es.symbol.description.js");
                /* harmony import */ var core_js_modules_es_symbol_description__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description__WEBPACK_IMPORTED_MODULE_1__);
                /* harmony import */ var core_js_modules_es_symbol_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator */ "./node_modules/core-js/modules/es.symbol.iterator.js");
                /* harmony import */ var core_js_modules_es_symbol_iterator__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator__WEBPACK_IMPORTED_MODULE_2__);
                /* harmony import */ var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");
                /* harmony import */ var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_3__);
                /* harmony import */ var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");
                /* harmony import */ var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_4__);
                /* harmony import */ var core_js_modules_es_array_index_of__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.array.index-of */ "./node_modules/core-js/modules/es.array.index-of.js");
                /* harmony import */ var core_js_modules_es_array_index_of__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_index_of__WEBPACK_IMPORTED_MODULE_5__);
                /* harmony import */ var core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");
                /* harmony import */ var core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_6__);
                /* harmony import */ var core_js_modules_es_date_to_string__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.date.to-string */ "./node_modules/core-js/modules/es.date.to-string.js");
                /* harmony import */ var core_js_modules_es_date_to_string__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_string__WEBPACK_IMPORTED_MODULE_7__);
                /* harmony import */ var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.function.name */ "./node_modules/core-js/modules/es.function.name.js");
                /* harmony import */ var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_8__);
                /* harmony import */ var core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.object.assign */ "./node_modules/core-js/modules/es.object.assign.js");
                /* harmony import */ var core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_9__);
                /* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");
                /* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_10__);
                /* harmony import */ var core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");
                /* harmony import */ var core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_11__);
                /* harmony import */ var core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");
                /* harmony import */ var core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_12__);
                /* harmony import */ var core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");
                /* harmony import */ var core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_13__);
                /* harmony import */ var core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");
                /* harmony import */ var core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_14__);
                /* harmony import */ var core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.string.split */ "./node_modules/core-js/modules/es.string.split.js");
                /* harmony import */ var core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_15__);
                /* harmony import */ var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
                /* harmony import */ var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_16__);
                /* harmony import */ var core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
                /* harmony import */ var core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_17__);
                /* harmony import */ var _themes_plugins_dropify__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../themes/plugins/dropify */ "./themes/plugins/dropify/dist/js/dropify.js");
                /* harmony import */ var _themes_plugins_dropify__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_themes_plugins_dropify__WEBPACK_IMPORTED_MODULE_18__);
                /* harmony import */ var cropperjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! cropperjs */ "./node_modules/cropperjs/dist/cropper.js");
                /* harmony import */ var cropperjs__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(cropperjs__WEBPACK_IMPORTED_MODULE_19__);
                /* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
                /* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_20__);





















                function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }





                var _ref = window.__CROPPER_CONFIG__ || {
                        uploadUrl: '/',
                        cropImageUrl: '/'
                    },
                    uploadUrl = _ref.uploadUrl,
                    cropImageUrl = _ref.cropImageUrl;

                var cropperDropifyElements = document.querySelectorAll(".dropify-cropper");

                if (cropperDropifyElements) {
                    _themes_plugins_dropify__WEBPACK_IMPORTED_MODULE_18___default.a.prototype.isImage = function () {
                        return true;
                    };

                    _themes_plugins_dropify__WEBPACK_IMPORTED_MODULE_18___default.a.prototype.onFileReady = function (event, src) {
                        this.input.off('dropify.fileReady', this.onFileReady);

                        if (this.errorsEvent.errors.length === 0) {
                            if (this.input.hasClass('dropify-cropper') === true) {
                                Upload.renderModal(event, src, this.file);
                                Upload.setDropify(this.input, this);
                                Upload.fileIsChanged = true;
                            } else {
                                this.setPreview(src, this.file.name);
                            }
                        } else {
                            this.input.trigger(this.errorsEvent, [this]);

                            for (var i = this.errorsEvent.errors.length - 1; i >= 0; i--) {
                                var errorNamespace = this.errorsEvent.errors[i].namespace;
                                var errorKey = errorNamespace.split('.').pop();
                                this.showError(errorKey);
                            }

                            if (typeof this.errorsContainer !== "undefined") {
                                this.errorsContainer.addClass('visible');
                                var errorsContainer = this.errorsContainer;
                                setTimeout(function () {
                                    errorsContainer.removeClass('visible');
                                }, 1000);
                            }

                            this.wrapper.addClass('has-error');
                            this.resetPreview();
                            this.clearElement();
                        }
                    };

                    _themes_plugins_dropify__WEBPACK_IMPORTED_MODULE_18___default.a.prototype.clearElement = function () {
                        if (this.errorsEvent.errors.length === 0) {
                            var eventBefore = $.Event("dropify.beforeClear");
                            this.input.trigger(eventBefore, [this]);

                            if (eventBefore.result !== false) {
                                clearInput(this);
                                this.input.trigger($.Event("dropify.afterClear"), [this]);
                            }
                        } else {
                            clearInput(this);
                        }

                        function clearInput(dropify) {
                            dropify.resetFile();
                            dropify.input.val('');
                            dropify.input.attr('data-default-file', '');
                            dropify.input.attr('data-original-file', '');
                            dropify.input.attr('data-cropper-data', '');
                            dropify.resetPreview();
                            Upload.clearData(dropify.element.closest('.form-group'));
                        }
                    };

                    cropperDropifyElements.forEach(function (element) {
                        $(element).dropify();
                        element.addEventListener("click", function (e) {
                            var clickedElem = e.target;
                            var cropperData = JSON.parse(clickedElem.getAttribute('data-cropper-data'));
                            var cropperOptions = JSON.parse(clickedElem.getAttribute('data-cropper-options'));
                            var originalFile = clickedElem.getAttribute('data-original-file');
                            Upload.setCropperData(cropperData);
                            Upload.setCropperOptions(cropperOptions);
                            Upload.setDropify(clickedElem);

                            if (originalFile && originalFile.length > 0) {
                                e.preventDefault();
                                Upload.renderModal(e, originalFile);
                            }
                        });
                    });
                }

                var Upload = function () {
                    var _renderModal = function renderModal(body) {
                        return showBSModal({
                            title: "Медіа",
                            size: "large",
                            body: body,
                            onHide: function onHide(e) {
                                $(this).data('bs.modal', null);
                                $(this).remove();
                            },
                            actions: [{
                                label: 'Зберегти',
                                cssClass: 'btn-success',
                                onClick: function onClick(e) {
                                    Upload.save();
                                }
                            }, {
                                label: 'Закрити',
                                cssClass: 'btn-default',
                                onClick: function onClick(e) {
                                    $(e.target).parents('.modal').modal('hide');
                                }
                            }]
                        });
                    };

                    return {
                        el: null,
                        modal: null,
                        dropify: null,
                        dropifyElement: null,
                        image: null,
                        file: null,
                        fileIsChanged: false,
                        cropper: null,
                        cropperData: {},
                        cropperOptions: {
                            aspectRatio: 16 / 9,
                            preview: '.img-preview',
                            autoCropArea: true,
                            movable: false,
                            strict: false,
                            guides: false,
                            highlight: false,
                            center: true,
                            scalable: false,
                            zoomable: false,
                            crop: function crop(e) {
                                var data = e.detail;
                                Upload.modal.find('.dataX').val(Math.round(data.x));
                                Upload.modal.find('.dataY').val(Math.round(data.y));
                                Upload.modal.find('.dataHeight').val(Math.round(data.height));
                                Upload.modal.find('.dataWidth').val(Math.round(data.width));
                            },
                            ready: function ready() {
                                Upload.cropper.setData(Upload.cropperData);
                            }
                        },
                        init: function init(options) {
                            Object.assign(this, options);
                            this.modal.find('#original__image').attr('src', this.src);
                            this.cropperOptions.preview = this.modal.find('.img-preview');
                        },
                        initCropper: function initCropper() {
                            if (this.cropper !== null) {
                                this.destroyCropper();
                            }

                            this.cropper = new cropperjs__WEBPACK_IMPORTED_MODULE_19___default.a(this.image, this.cropperOptions);

                            var _this = this;

                            this.modal.find('.docs-buttons')[0].onclick = function (e) {
                                var target = e.target || e.currentTarget;
                                var result;
                                var input;
                                var data;

                                if (!_this.cropper) {
                                    return;
                                }

                                while (target !== this) {
                                    if (target.getAttribute('data-method')) {
                                        break;
                                    }

                                    target = target.parentNode;
                                }

                                if (target === this || target.disabled || target.className.indexOf('disabled') > -1) {
                                    return;
                                }

                                data = {
                                    method: target.getAttribute('data-method'),
                                    target: target.getAttribute('data-target'),
                                    option: target.getAttribute('data-option') || undefined,
                                    secondOption: target.getAttribute('data-second-option') || undefined
                                };

                                if (data.method) {
                                    result = _this.cropper[data.method](data.option, data.secondOption);

                                    if (_typeof(result) === 'object' && result !== _this.cropper && input) {
                                        try {
                                            input.value = JSON.stringify(result);
                                        } catch (e) {
                                            console.log(e.message);
                                        }
                                    }
                                }
                            };
                        },
                        destroyCropper: function destroyCropper() {
                            if (this.cropper) {
                                this.cropper.destroy();
                                this.cropper = null;
                                this.cropperData = {};
                            }
                        },
                        getData: function getData() {
                            return {
                                'file': this.src,
                                'fileName': this.modal.find('input[data-name=fileName]').val(),
                                'path': this.modal.find('input[data-name=path]').val(),
                                'cropData': {
                                    'x': this.modal.find('.dataX').val(),
                                    'y': this.modal.find('.dataY').val(),
                                    'width': this.modal.find('.dataWidth').val(),
                                    'height': this.modal.find('.dataHeight').val()
                                }
                            };
                        },
                        setData: function setData(data) {
                            var _this = this;

                            $.each(data, function (k, v) {
                                var input = _this.el.find("input[data-name='" + k + "']");

                                if (input && input.attr('type') !== 'file') {
                                    input.attr('value', v);
                                }
                            });

                            if (data.cropData) {
                                var cropper = data.cropData;

                                _this.el.find("input.dataX").val(cropper.x);

                                _this.el.find("input.dataY").val(cropper.y);

                                _this.el.find("input.dataWidth").val(cropper.width);

                                _this.el.find("input.dataHeight").val(cropper.height);
                            }
                        },
                        clearData: function clearData(el) {
                            el = $(el);
                            $.each(el.find("input[type=hidden]"), function (k, input) {
                                input.value = null;
                            });
                        },
                        save: function save() {
                            var _this2 = this;

                            var errorsBlockEl = this.modal.find('.errors__block.has-error');
                            errorsBlockEl.empty();

                            if (this.fileIsChanged === false) {
                                axios__WEBPACK_IMPORTED_MODULE_20___default()({
                                    method: "post",
                                    url: cropImageUrl,
                                    data: JSON.stringify(this.getData()),
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                }).then(function (response) {
                                    var result = response.data;

                                    _this2.setData(result);

                                    _this2.updateDropifyPreview(result.file, result.fileName);

                                    _this2.modal.modal('hide');
                                });
                                return;
                            }

                            axios__WEBPACK_IMPORTED_MODULE_20___default()({
                                method: "post",
                                url: uploadUrl,
                                data: JSON.stringify(this.getData()),
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            }).then(function (response) {
                                var result = response.data;

                                _this2.modal.modal('hide');

                                _this2.setData(result);

                                _this2.updateDropifyPreview(result.file, result.fileName);

                                _this2.updateDropifyData(result.originalFile, result.cropData);

                                var saveEvent = $.Event("saved");

                                _this2.modal.trigger(saveEvent, [result]);

                                _this2.fileIsChanged = false;
                            }).catch(function (error) {
                                var errors = error.response.data;

                                if (error.response.status === 500) {
                                    alert(error.response.statusText);
                                    return;
                                }

                                $.each(errors, function (attribute, values) {
                                    $.each(values, function (k, value) {
                                        errorsBlockEl.append('<span class="help-block">' + value + '</span>');
                                    });
                                });
                            });
                        },
                        renderModal: function renderModal(event, src, file) {
                            var parent = $(event.currentTarget).closest('.form-group');
                            var body = parent.find('#modal-form');

                            var modal = _renderModal(body.html());

                            this.init({
                                el: parent,
                                modal: modal,
                                image: modal.find('img#original__image')[0],
                                src: src,
                                file: file || null
                            });
                            document.getElementById("inputImage").value = "";

                            var _this = this;

                            modal.on('shown.bs.modal', function () {
                                _this.initCropper();
                            });
                            modal.on('hidden.bs.modal', function () {
                                _this.destroyCropper();
                            });
                            return modal;
                        },
                        onChange: function onChange(e) {
                            var files = e.files;

                            if (!Upload.image) {
                                Upload.modal = $(e).closest('.modal');
                                Upload.image = $(e).closest('.cropper__block').find('img')[0];
                            }

                            if (files && files[0]) {
                                var reader = new FileReader();
                                var image = new Image();
                                var file = files[0];
                                reader.readAsDataURL(file);

                                reader.onload = function (_file) {
                                    image.src = _file.target.result;

                                    image.onload = function () {
                                        Upload.destroyCropper();
                                        Upload.image.src = image.src;
                                        Upload.src = image.src;
                                        Upload.file = file;
                                        Upload.initCropper();
                                        Upload.cropper.reset();
                                        Upload.fileIsChanged = true;
                                    };
                                }.bind(this);
                            }
                        },
                        setCropperData: function setCropperData(cropperData) {
                            this.cropperData = cropperData;
                        },
                        setCropperOptions: function setCropperOptions(options) {
                            Object.assign(this.cropperOptions, options);
                        },
                        setDropify: function setDropify(el, dropify) {
                            this.dropifyElement = el;
                            this.dropify = dropify || null;
                        },
                        setEndpoint: function setEndpoint(endpoint) {
                            this.endpoint = endpoint;
                        },
                        updateDropifyPreview: function updateDropifyPreview(file, fileName) {
                            $(this.dropifyElement).attr('data-default-file', file);
                            $(this.dropifyElement).parent().find('img').attr('src', file);

                            if (this.dropify && fileName) {
                                this.dropify.file.name = fileName;
                                this.dropify.setPreview(file, fileName);
                            }
                        },
                        updateDropifyData: function updateDropifyData(originalFile, cropperData) {
                            $(this.dropifyElement).attr('data-original-file', originalFile);
                            $(this.dropifyElement).attr('data-cropper-data', JSON.stringify(cropperData));
                        }
                    };
                }();

                window.upload = Upload;

                window.showBSModal = function self(options) {
                    var options = $.extend({
                        title: '',
                        body: '',
                        remote: false,
                        backdrop: 'static',
                        size: false,
                        onShow: false,
                        onHide: false,
                        actions: false
                    }, options);
                    self.onShow = typeof options.onShow == 'function' ? options.onShow : function () {};
                    self.onHide = typeof options.onHide == 'function' ? options.onHide : function () {};

                    if (self.$modal === undefined) {
                        self.$modal = $('<div class="modal fade"><div class="modal-dialog"><div class="modal-content"></div></div></div>').appendTo('body');
                        self.$modal.on('shown.bs.modal', function (e) {
                            self.onShow.call(this, e);
                        });
                    }

                    self.$modal.on('hidden.bs.modal', function (e) {
                        self.onHide.call(this, e);
                    });
                    var modalClass = {
                        small: "modal-sm",
                        large: "modal-lg"
                    };
                    self.$modal.data('bs.modal', false);
                    self.$modal.find('.modal-dialog').removeClass().addClass('modal-dialog ' + (modalClass[options.size] || ''));
                    self.$modal.find('.modal-content').html('<div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4 class="modal-title">${title}</h4></div><div class="modal-body">${body}</div><div class="modal-footer"></div>'.replace('${title}', options.title).replace('${body}', options.body));
                    var footer = self.$modal.find('.modal-footer');

                    if (Object.prototype.toString.call(options.actions) === "[object Array]") {
                        for (var i = 0, l = options.actions.length; i < l; i++) {
                            options.actions[i].onClick = typeof options.actions[i].onClick == 'function' ? options.actions[i].onClick : function () {};
                            $('<button type="button" class="btn ' + (options.actions[i].cssClass || '') + '">' + (options.actions[i].label || '{Label Missing!}') + '</button>').appendTo(footer).on('click', options.actions[i].onClick);
                        }
                    } else {
                        $('<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>').appendTo(footer);
                    }

                    self.$modal.modal(options);
                    return self.$modal;
                };
                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./scripts/modules/upload-image.js":
        /*!*****************************************!*\
  !*** ./scripts/modules/upload-image.js ***!
  \*****************************************/
        /*! no exports provided */
        /***/ (function(module, __webpack_exports__, __webpack_require__) {

            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");
                /* harmony import */ var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");
                /* harmony import */ var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_1__);
                /* harmony import */ var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.function.name */ "./node_modules/core-js/modules/es.function.name.js");
                /* harmony import */ var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_2__);
                /* harmony import */ var core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.assign */ "./node_modules/core-js/modules/es.object.assign.js");
                /* harmony import */ var core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_3__);
                /* harmony import */ var core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");
                /* harmony import */ var core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_4__);
                /* harmony import */ var core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.string.split */ "./node_modules/core-js/modules/es.string.split.js");
                /* harmony import */ var core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_5__);
                /* harmony import */ var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
                /* harmony import */ var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_6__);
                /* harmony import */ var _themes_plugins_dropify__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../themes/plugins/dropify */ "./themes/plugins/dropify/dist/js/dropify.js");
                /* harmony import */ var _themes_plugins_dropify__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_themes_plugins_dropify__WEBPACK_IMPORTED_MODULE_7__);
                /* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
                /* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_8__);












                var _ref = window.__UPLOAD_IMAGE_CONFIG__ || {
                        uploadUrl: '/'
                    },
                    uploadUrl = _ref.uploadUrl;

                var imageDropifyElements = document.querySelectorAll(".dropify-image");

                if (imageDropifyElements) {
                    _themes_plugins_dropify__WEBPACK_IMPORTED_MODULE_7___default.a.prototype.isImage = function () {
                        return true;
                    };

                    _themes_plugins_dropify__WEBPACK_IMPORTED_MODULE_7___default.a.prototype.onFileReady = function (event, src) {
                        this.input.off('dropify.fileReady', this.onFileReady);

                        if (this.errorsEvent.errors.length === 0) {
                            if (this.input.hasClass('dropify-image') === true) {
                                UploadImage.setDropify(this.input, this);
                                UploadImage.file = this.file.object;
                                var reader = new FileReader();
                                var file = this.file.object;
                                reader.readAsDataURL(file);

                                reader.onload = function (_file) {
                                    UploadImage.src = _file.target.result;
                                    UploadImage.fileIsChanged = true;
                                    UploadImage.save(_file.target.result);
                                }.bind(this);
                            } else {
                                this.setPreview(src, this.file.name);
                            }
                        } else {
                            this.input.trigger(this.errorsEvent, [this]);

                            for (var i = this.errorsEvent.errors.length - 1; i >= 0; i--) {
                                var errorNamespace = this.errorsEvent.errors[i].namespace;
                                var errorKey = errorNamespace.split('.').pop();
                                this.showError(errorKey);
                            }

                            if (typeof this.errorsContainer !== "undefined") {
                                this.errorsContainer.addClass('visible');
                                var errorsContainer = this.errorsContainer;
                                setTimeout(function () {
                                    errorsContainer.removeClass('visible');
                                }, 1000);
                            }

                            this.wrapper.addClass('has-error');
                            this.resetPreview();
                            this.clearElement();
                        }
                    };

                    imageDropifyElements.forEach(function (element) {
                        $(element).dropify();
                    });
                }

                var UploadImage = function () {
                    return {
                        el: null,
                        src: null,
                        dropify: null,
                        dropifyElement: null,
                        image: null,
                        file: null,
                        fileIsChanged: false,
                        init: function init(options) {
                            Object.assign(this, options);
                        },
                        getData: function getData() {
                            return {
                                'file': this.src
                            };
                        },
                        setData: function setData(data) {
                            var _this = this;

                            $.each(data, function (k, v) {
                                var input = _this.dropifyElement.closest('.form-group').find("input[data-name='" + k + "']");

                                if (input && input.attr('type') !== 'file') {
                                    input.attr('value', v);
                                }
                            });
                        },
                        save: function save() {
                            var _this2 = this;

                            var errorsBlockEl = this.dropifyElement.closest('.form-group').find('.errors__block.has-error');
                            errorsBlockEl.empty();
                            axios__WEBPACK_IMPORTED_MODULE_8___default()({
                                method: "post",
                                url: uploadUrl,
                                data: JSON.stringify(this.getData()),
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            }).then(function (response) {
                                var result = response.data;

                                _this2.setData(result);

                                _this2.updateDropifyPreview(result.file, result.fileName);

                                _this2.fileIsChanged = false;
                            }).catch(function (error) {
                                if (error && error.response) {
                                    var errors = error.response.data;

                                    _this2.dropify.hideLoader();

                                    if (error.response.status === 500) {
                                        alert(error.response.statusText);
                                        return;
                                    }

                                    $.each(errors, function (attribute, values) {
                                        $.each(values, function (k, value) {
                                            errorsBlockEl.append('<span class="help-block">' + value + '</span>');
                                        });
                                    });
                                }
                            });
                        },
                        setDropify: function setDropify(el, dropify) {
                            this.dropifyElement = el;
                            this.dropify = dropify || null;
                        },
                        setEndpoint: function setEndpoint(endpoint) {
                            this.endpoint = endpoint;
                        },
                        updateDropifyPreview: function updateDropifyPreview(file, fileName) {
                            $(this.dropifyElement).attr('data-default-file', file);
                            $(this.dropifyElement).parent().find('img').attr('src', file);

                            if (this.dropify && fileName) {
                                this.dropify.file.name = fileName;
                                this.dropify.setPreview(file, fileName);
                            }
                        }
                    };
                }();
                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./themes/js/custom.js":
        /*!*****************************!*\
  !*** ./themes/js/custom.js ***!
  \*****************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function($, jQuery) {__webpack_require__(/*! core-js/modules/es.array.filter */ "./node_modules/core-js/modules/es.array.filter.js");

                __webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");

                $(document).ready(function () {
                    $(function () {
                        $(".preloader").fadeOut();
                        $('#side-menu').metisMenu();
                        var url = window.location;
                        var element = $('ul.nav a').filter(function () {
                            // return this.href === url || url.href.indexOf(this.href) === 0;
                            return this.href === url.href;
                        }).addClass('active').parent().parent().addClass('in').parent();

                        if (element.is('li')) {
                            element.addClass('active');
                        }
                    }); // Theme settings
                    //Open-Close-right sidebar

                    $(".right-side-toggle").click(function () {
                        $(".right-sidebar").slideDown(50);
                        $(".right-sidebar").toggleClass("shw-rside"); // Fix header

                        $(".fxhdr").click(function () {
                            $("body").toggleClass("fix-header");
                        }); // Fix sidebar

                        $(".fxsdr").click(function () {
                            $("body").toggleClass("fix-sidebar");
                        }); // Service panel js

                        if ($("body").hasClass("fix-header")) {
                            $('.fxhdr').attr('checked', true);
                        } else {
                            $('.fxhdr').attr('checked', false);
                        }

                        if ($("body").hasClass("fix-sidebar")) {
                            $('.fxsdr').attr('checked', true);
                        } else {
                            $('.fxsdr').attr('checked', false);
                        }
                    }); //Loads the correct sidebar on window load,
                    //collapses the sidebar on window resize.
                    // Sets the min-height of #page-wrapper to window size

                    $(function () {
                        $(window).bind("load resize", function () {
                            topOffset = 60;
                            width = this.window.innerWidth > 0 ? this.window.innerWidth : this.screen.width;

                            if (width < 768) {
                                $('div.navbar-collapse').addClass('collapse');
                                topOffset = 100; // 2-row-menu
                            } else {
                                $('div.navbar-collapse').removeClass('collapse');
                            }

                            height = (this.window.innerHeight > 0 ? this.window.innerHeight : this.screen.height) - 1;
                            height = height - topOffset;
                            if (height < 1) height = 1;

                            if (height > topOffset) {
                                $("#page-wrapper").css("min-height", height + "px");
                            }
                        });
                    }); // This is for resize window

                    $(function () {
                        $(window).bind("load resize", function () {
                            width = this.window.innerWidth > 0 ? this.window.innerWidth : this.screen.width;

                            if (width < 1170) {
                                $('body').addClass('content-wrapper');
                                $(".open-close i").removeClass('icon-arrow-left-circle');
                                $(".sidebar-nav, .slimScrollDiv").css("overflow-x", "visible").parent().css("overflow", "visible");
                                $(".logo span").hide();
                            } else {
                                $('body').removeClass('content-wrapper');
                                $(".open-close i").addClass('icon-arrow-left-circle');
                                $(".logo span").show();
                            }
                        });
                    }); // This is for click on open close button
                    // Sidebar open close

                    $(".open-close").on('click', function () {
                        if ($("body").hasClass("content-wrapper")) {
                            $("body").trigger("resize");
                            $(".sidebar-nav, .slimScrollDiv").css("overflow", "hidden").parent().css("overflow", "visible");
                            $("body").removeClass("content-wrapper");
                            $(".open-close i").addClass("icon-arrow-left-circle");
                            $(".logo span").show();
                        } else {
                            $("body").trigger("resize");
                            $(".sidebar-nav, .slimScrollDiv").css("overflow-x", "visible").parent().css("overflow", "visible");
                            $("body").addClass("content-wrapper");
                            $(".open-close i").removeClass("icon-arrow-left-circle");
                            $(".logo span").hide();
                        }
                    }); // Collapse Panels

                    (function ($, window, document) {
                        var panelSelector = '[data-perform="panel-collapse"]';
                        $(panelSelector).each(function () {
                            var $this = $(this),
                                parent = $this.closest('.panel'),
                                wrapper = parent.find('.panel-wrapper'),
                                collapseOpts = {
                                    toggle: false
                                };

                            if (!wrapper.length) {
                                wrapper = parent.children('.panel-heading').nextAll().wrapAll('<div/>').parent().addClass('panel-wrapper');
                                collapseOpts = {};
                            }

                            wrapper.collapse(collapseOpts).on('hide.bs.collapse', function () {
                                $this.children('i').removeClass('ti-minus').addClass('ti-plus');
                            }).on('show.bs.collapse', function () {
                                $this.children('i').removeClass('ti-plus').addClass('ti-minus');
                            });
                        });
                        $(document).on('click', panelSelector, function (e) {
                            e.preventDefault();
                            var parent = $(this).closest('.panel');
                            var wrapper = parent.find('.panel-wrapper');
                            wrapper.collapse('toggle');
                        });
                    })(jQuery, window, document); // Remove Panels


                    (function ($, window, document) {
                        var panelSelector = '[data-perform="panel-dismiss"]';
                        $(document).on('click', panelSelector, function (e) {
                            e.preventDefault();
                            var parent = $(this).closest('.panel');
                            removeElement();

                            function removeElement() {
                                var col = parent.parent();
                                parent.remove();
                                col.filter(function () {
                                    var el = $(this);
                                    return el.is('[class*="col-"]') && el.children('*').length === 0;
                                }).remove();
                            }
                        });
                    })(jQuery, window, document); //tooltip


                    $(function () {
                        $('[data-toggle="tooltip"]').tooltip();
                    }); //Popover

                    $(function () {
                        $('[data-toggle="popover"]').popover();
                    }); // Task

                    $(".list-task li label").click(function () {
                        $(this).toggleClass("task-done");
                    });
                    $(".settings_box a").click(function () {
                        $("ul.theme_color").toggleClass("theme_block");
                    });
                }); //Colepsible toggle

                $(".collapseble").click(function () {
                    $(".collapseblebox").fadeToggle(350);
                }); // Sidebar

                $('.slimscrollright').slimScroll({
                    height: '100%',
                    position: 'right',
                    size: "5px",
                    color: '#dcdcdc'
                });
                $('.slimscrollsidebar').slimScroll({
                    height: '100%',
                    position: 'right',
                    size: "0px",
                    color: '#dcdcdc'
                });
                $('.chat-list').slimScroll({
                    height: '100%',
                    position: 'right',
                    size: "0px",
                    color: '#dcdcdc'
                }); // Resize all elements

                $("body").trigger("resize"); // visited ul li

                $('.visited li a').click(function (e) {
                    $('.visited li').removeClass('active');
                    var $parent = $(this).parent();

                    if (!$parent.hasClass('active')) {
                        $parent.addClass('active');
                    }

                    e.preventDefault();
                }); // Login and recover password

                $('#to-recover').click(function () {
                    $("#loginform").slideUp();
                    $("#recoverform").fadeIn();
                }); // Update 1.5
// this is for close icon when navigation open in mobile view

                $(".navbar-toggle").click(function () {
                    $(".navbar-toggle i").toggleClass("ti-menu");
                    $(".navbar-toggle i").addClass("ti-close");
                }); // Update 1.6
                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

            /***/ }),

        /***/ "./themes/js/waves.js":
        /*!****************************!*\
  !*** ./themes/js/waves.js ***!
  \****************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(/*! core-js/modules/es.array.index-of */ "./node_modules/core-js/modules/es.array.index-of.js");

            __webpack_require__(/*! core-js/modules/es.date.to-string */ "./node_modules/core-js/modules/es.date.to-string.js");

            __webpack_require__(/*! core-js/modules/es.number.constructor */ "./node_modules/core-js/modules/es.number.constructor.js");

            __webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

            __webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

            !function (t) {
                "use strict";

                function e(t) {
                    return null !== t && t === t.window;
                }

                function n(t) {
                    return e(t) ? t : 9 === t.nodeType && t.defaultView;
                }

                function a(t) {
                    var e,
                        a,
                        i = {
                            top: 0,
                            left: 0
                        },
                        o = t && t.ownerDocument;
                    return e = o.documentElement, "undefined" != typeof t.getBoundingClientRect && (i = t.getBoundingClientRect()), a = n(o), {
                        top: i.top + a.pageYOffset - e.clientTop,
                        left: i.left + a.pageXOffset - e.clientLeft
                    };
                }

                function i(t) {
                    var e = "";

                    for (var n in t) {
                        t.hasOwnProperty(n) && (e += n + ":" + t[n] + ";");
                    }

                    return e;
                }

                function o(t) {
                    if (d.allowEvent(t) === !1) return null;

                    for (var e = null, n = t.target || t.srcElement; null !== n.parentElement;) {
                        if (!(n instanceof SVGElement || -1 === n.className.indexOf("waves-effect"))) {
                            e = n;
                            break;
                        }

                        if (n.classList.contains("waves-effect")) {
                            e = n;
                            break;
                        }

                        n = n.parentElement;
                    }

                    return e;
                }

                function r(e) {
                    var n = o(e);
                    null !== n && (c.show(e, n), "ontouchstart" in t && (n.addEventListener("touchend", c.hide, !1), n.addEventListener("touchcancel", c.hide, !1)), n.addEventListener("mouseup", c.hide, !1), n.addEventListener("mouseleave", c.hide, !1));
                }

                var s = s || {},
                    u = document.querySelectorAll.bind(document),
                    c = {
                        duration: 750,
                        show: function show(t, e) {
                            if (2 === t.button) return !1;
                            var n = e || this,
                                o = document.createElement("div");
                            o.className = "waves-ripple", n.appendChild(o);
                            var r = a(n),
                                s = t.pageY - r.top,
                                u = t.pageX - r.left,
                                d = "scale(" + n.clientWidth / 100 * 10 + ")";
                            "touches" in t && (s = t.touches[0].pageY - r.top, u = t.touches[0].pageX - r.left), o.setAttribute("data-hold", Date.now()), o.setAttribute("data-scale", d), o.setAttribute("data-x", u), o.setAttribute("data-y", s);
                            var l = {
                                top: s + "px",
                                left: u + "px"
                            };
                            o.className = o.className + " waves-notransition", o.setAttribute("style", i(l)), o.className = o.className.replace("waves-notransition", ""), l["-webkit-transform"] = d, l["-moz-transform"] = d, l["-ms-transform"] = d, l["-o-transform"] = d, l.transform = d, l.opacity = "1", l["-webkit-transition-duration"] = c.duration + "ms", l["-moz-transition-duration"] = c.duration + "ms", l["-o-transition-duration"] = c.duration + "ms", l["transition-duration"] = c.duration + "ms", l["-webkit-transition-timing-function"] = "cubic-bezier(0.250, 0.460, 0.450, 0.940)", l["-moz-transition-timing-function"] = "cubic-bezier(0.250, 0.460, 0.450, 0.940)", l["-o-transition-timing-function"] = "cubic-bezier(0.250, 0.460, 0.450, 0.940)", l["transition-timing-function"] = "cubic-bezier(0.250, 0.460, 0.450, 0.940)", o.setAttribute("style", i(l));
                        },
                        hide: function hide(t) {
                            d.touchup(t);
                            var e = this,
                                n = (1.4 * e.clientWidth, null),
                                a = e.getElementsByClassName("waves-ripple");
                            if (!(a.length > 0)) return !1;
                            n = a[a.length - 1];
                            var o = n.getAttribute("data-x"),
                                r = n.getAttribute("data-y"),
                                s = n.getAttribute("data-scale"),
                                u = Date.now() - Number(n.getAttribute("data-hold")),
                                l = 350 - u;
                            0 > l && (l = 0), setTimeout(function () {
                                var t = {
                                    top: r + "px",
                                    left: o + "px",
                                    opacity: "0",
                                    "-webkit-transition-duration": c.duration + "ms",
                                    "-moz-transition-duration": c.duration + "ms",
                                    "-o-transition-duration": c.duration + "ms",
                                    "transition-duration": c.duration + "ms",
                                    "-webkit-transform": s,
                                    "-moz-transform": s,
                                    "-ms-transform": s,
                                    "-o-transform": s,
                                    transform: s
                                };
                                n.setAttribute("style", i(t)), setTimeout(function () {
                                    try {
                                        e.removeChild(n);
                                    } catch (t) {
                                        return !1;
                                    }
                                }, c.duration);
                            }, l);
                        },
                        wrapInput: function wrapInput(t) {
                            for (var e = 0; e < t.length; e++) {
                                var n = t[e];

                                if ("input" === n.tagName.toLowerCase()) {
                                    var a = n.parentNode;
                                    if ("i" === a.tagName.toLowerCase() && -1 !== a.className.indexOf("waves-effect")) continue;
                                    var i = document.createElement("i");
                                    i.className = n.className + " waves-input-wrapper";
                                    var o = n.getAttribute("style");
                                    o || (o = ""), i.setAttribute("style", o), n.className = "waves-button-input", n.removeAttribute("style"), a.replaceChild(i, n), i.appendChild(n);
                                }
                            }
                        }
                    },
                    d = {
                        touches: 0,
                        allowEvent: function allowEvent(t) {
                            var e = !0;
                            return "touchstart" === t.type ? d.touches += 1 : "touchend" === t.type || "touchcancel" === t.type ? setTimeout(function () {
                                d.touches > 0 && (d.touches -= 1);
                            }, 500) : "mousedown" === t.type && d.touches > 0 && (e = !1), e;
                        },
                        touchup: function touchup(t) {
                            d.allowEvent(t);
                        }
                    };
                s.displayEffect = function (e) {
                    e = e || {}, "duration" in e && (c.duration = e.duration), c.wrapInput(u(".waves-effect")), "ontouchstart" in t && document.body.addEventListener("touchstart", r, !1), document.body.addEventListener("mousedown", r, !1);
                }, s.attach = function (e) {
                    "input" === e.tagName.toLowerCase() && (c.wrapInput([e]), e = e.parentElement), "ontouchstart" in t && e.addEventListener("touchstart", r, !1), e.addEventListener("mousedown", r, !1);
                }, t.Waves = s, document.addEventListener("DOMContentLoaded", function () {
                    s.displayEffect();
                }, !1);
            }(window);

            /***/ }),

        /***/ "./themes/plugins/dropify/dist/js/dropify.js":
        /*!***************************************************!*\
  !*** ./themes/plugins/dropify/dist/js/dropify.js ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.symbol */ "./node_modules/core-js/modules/es.symbol.js");

            __webpack_require__(/*! core-js/modules/es.symbol.description */ "./node_modules/core-js/modules/es.symbol.description.js");

            __webpack_require__(/*! core-js/modules/es.symbol.iterator */ "./node_modules/core-js/modules/es.symbol.iterator.js");

            __webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");

            __webpack_require__(/*! core-js/modules/es.array.index-of */ "./node_modules/core-js/modules/es.array.index-of.js");

            __webpack_require__(/*! core-js/modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");

            __webpack_require__(/*! core-js/modules/es.array.join */ "./node_modules/core-js/modules/es.array.join.js");

            __webpack_require__(/*! core-js/modules/es.array.slice */ "./node_modules/core-js/modules/es.array.slice.js");

            __webpack_require__(/*! core-js/modules/es.function.name */ "./node_modules/core-js/modules/es.function.name.js");

            __webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

            __webpack_require__(/*! core-js/modules/es.parse-float */ "./node_modules/core-js/modules/es.parse-float.js");

            __webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

            __webpack_require__(/*! core-js/modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");

            __webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

            __webpack_require__(/*! core-js/modules/es.string.split */ "./node_modules/core-js/modules/es.string.split.js");

            __webpack_require__(/*! core-js/modules/es.string.trim */ "./node_modules/core-js/modules/es.string.trim.js");

            __webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

            function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

            /*!
 * =============================================================
 * dropify v0.2.0 - Override your input files with style.
 * https://github.com/JeremyFagis/dropify
 *
 * (c) 2016 - Jeremy FAGIS <jeremy@fagis.fr> (http://fagis.fr)
 * =============================================================
 */
            ;

            (function (root, factory) {
                if (true) {
                    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
                        __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                            (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                } else {}
            })(this, function ($) {
                var pluginName = "dropify";
                /**
                 * Dropify plugin
                 *
                 * @param {Object} element
                 * @param {Array} options
                 */

                function Dropify(element, options) {
                    if (!(window.File && window.FileReader && window.FileList && window.Blob)) {
                        return;
                    }

                    var defaults = {
                        defaultFile: '',
                        maxFileSize: 0,
                        minWidth: 0,
                        maxWidth: 0,
                        minHeight: 0,
                        maxHeight: 0,
                        showRemove: true,
                        showLoader: true,
                        showErrors: true,
                        errorsPosition: 'overlay',
                        allowedFormats: ['portrait', 'square', 'landscape'],
                        messages: {
                            'default': 'Drag and drop a file here or click',
                            'replace': 'Drag and drop or click to replace',
                            'remove': 'Remove',
                            'error': 'Ooops, something wrong appended.'
                        },
                        error: {
                            'fileSize': 'The file size is too big ({{ value }} max).',
                            'minWidth': 'The image width is too small ({{ value }}}px min).',
                            'maxWidth': 'The image width is too big ({{ value }}}px max).',
                            'minHeight': 'The image height is too small ({{ value }}}px min).',
                            'maxHeight': 'The image height is too big ({{ value }}px max).',
                            'imageFormat': 'The image format is not allowed ({{ value }} only).'
                        },
                        tpl: {
                            wrap: '<div class="dropify-wrapper"></div>',
                            loader: '<div class="dropify-loader"></div>',
                            message: '<div class="dropify-message"><span class="file-icon" /> <p>{{ default }}</p></div>',
                            preview: '<div class="dropify-preview"><span class="dropify-render"></span><div class="dropify-infos"><div class="dropify-infos-inner"><p class="dropify-infos-message">{{ replace }}</p></div></div></div>',
                            filename: '<p class="dropify-filename"><span class="file-icon"></span> <span class="dropify-filename-inner"></span></p>',
                            clearButton: '<button type="button" class="dropify-clear">{{ remove }}</button>',
                            errorLine: '<p class="dropify-error">{{ error }}</p>',
                            errorsContainer: '<div class="dropify-errors-container"><ul></ul></div>'
                        }
                    };
                    this.element = element;
                    this.input = $(this.element);
                    this.wrapper = null;
                    this.preview = null;
                    this.filenameWrapper = null;
                    this.settings = $.extend(true, defaults, options, this.input.data());
                    this.imgFileExtensions = ['png', 'jpg', 'jpeg', 'gif', 'bmp'];
                    this.errorsEvent = $.Event('dropify.errors');
                    this.isDisabled = false;
                    this.isInit = false;
                    this.file = {
                        object: null,
                        name: null,
                        size: null,
                        width: null,
                        height: null,
                        type: null
                    };

                    if (!Array.isArray(this.settings.allowedFormats)) {
                        this.settings.allowedFormats = this.settings.allowedFormats.split(' ');
                    }

                    this.onChange = this.onChange.bind(this);
                    this.clearElement = this.clearElement.bind(this);
                    this.onFileReady = this.onFileReady.bind(this);
                    this.translateMessages();
                    this.createElements();
                    this.setContainerSize();
                    this.errorsEvent.errors = [];
                    this.input.on('change', this.onChange);
                }
                /**
                 * On change event
                 */


                Dropify.prototype.onChange = function () {
                    this.resetPreview();
                    this.readFile(this.element);
                };
                /**
                 * Create dom elements
                 */


                Dropify.prototype.createElements = function () {
                    this.isInit = true;
                    this.input.wrap($(this.settings.tpl.wrap));
                    this.wrapper = this.input.parent();
                    var messageWrapper = $(this.settings.tpl.message).insertBefore(this.input);
                    $(this.settings.tpl.errorLine).appendTo(messageWrapper);

                    if (this.isTouchDevice() === true) {
                        this.wrapper.addClass('touch-fallback');
                    }

                    if (this.input.attr('disabled')) {
                        this.isDisabled = true;
                        this.wrapper.addClass('disabled');
                    }

                    if (this.settings.showLoader === true) {
                        this.loader = $(this.settings.tpl.loader);
                        this.loader.insertBefore(this.input);
                    }

                    this.preview = $(this.settings.tpl.preview);
                    this.preview.insertAfter(this.input);

                    if (this.isDisabled === false && this.settings.showRemove === true) {
                        this.clearButton = $(this.settings.tpl.clearButton);
                        this.clearButton.insertAfter(this.input);
                        this.clearButton.on('click', this.clearElement);
                    }

                    this.filenameWrapper = $(this.settings.tpl.filename);
                    this.filenameWrapper.prependTo(this.preview.find('.dropify-infos-inner'));

                    if (this.settings.showErrors === true) {
                        this.errorsContainer = $(this.settings.tpl.errorsContainer);

                        if (this.settings.errorsPosition === 'outside') {
                            this.errorsContainer.insertAfter(this.wrapper);
                        } else {
                            this.errorsContainer.insertBefore(this.input);
                        }
                    }

                    var defaultFile = this.settings.defaultFile || '';

                    if (defaultFile.trim() != '') {
                        this.file.name = this.cleanFilename(defaultFile);
                        this.setPreview(defaultFile);
                    }
                };
                /**
                 * Read the file using FileReader
                 *
                 * @param  {Object} input
                 */


                Dropify.prototype.readFile = function (input) {
                    if (input.files && input.files[0]) {
                        var reader = new FileReader();
                        var image = new Image();
                        var file = input.files[0];
                        var srcBase64 = null;

                        var _this = this;

                        var eventFileReady = $.Event("dropify.fileReady");
                        this.clearErrors();
                        this.showLoader();
                        this.setFileInformations(file);
                        reader.readAsDataURL(file);
                        this.errorsEvent.errors = [];
                        this.checkFileSize();

                        reader.onload = function (_file) {
                            srcBase64 = _file.target.result;

                            if (this.isImage()) {
                                image.src = _file.target.result;

                                image.onload = function () {
                                    _this.setFileDimensions(this.width, this.height);

                                    _this.validateImage();

                                    _this.input.trigger(eventFileReady, [srcBase64]);
                                };
                            } else {
                                this.input.trigger(eventFileReady, [srcBase64]);
                            }
                        }.bind(this);

                        this.input.on('dropify.fileReady', this.onFileReady);
                    }
                };
                /**
                 * On file ready to show
                 *
                 * @param  {Event} event
                 * @param  {String} src
                 */


                Dropify.prototype.onFileReady = function (event, src) {
                    this.input.off('dropify.fileReady', this.onFileReady);

                    if (this.errorsEvent.errors.length === 0) {
                        this.setPreview(src, this.file.name);
                    } else {
                        this.input.trigger(this.errorsEvent, [this]);

                        for (var i = this.errorsEvent.errors.length - 1; i >= 0; i--) {
                            var errorNamespace = this.errorsEvent.errors[i].namespace;
                            var errorKey = errorNamespace.split('.').pop();
                            this.showError(errorKey);
                        }

                        if (typeof this.errorsContainer !== "undefined") {
                            this.errorsContainer.addClass('visible');
                            var errorsContainer = this.errorsContainer;
                            setTimeout(function () {
                                errorsContainer.removeClass('visible');
                            }, 1000);
                        }

                        this.wrapper.addClass('has-error');
                        this.resetPreview();
                        this.clearElement();
                    }
                };
                /**
                 * Set file informations
                 *
                 * @param {File} file
                 */


                Dropify.prototype.setFileInformations = function (file) {
                    this.file.object = file;
                    this.file.name = file.name;
                    this.file.size = file.size;
                    this.file.type = file.type;
                    this.file.width = null;
                    this.file.height = null;
                };
                /**
                 * Set file dimensions
                 *
                 * @param {Int} width
                 * @param {Int} height
                 */


                Dropify.prototype.setFileDimensions = function (width, height) {
                    this.file.width = width;
                    this.file.height = height;
                };
                /**
                 * Set the preview and animate it
                 *
                 * @param {String} src
                 */


                Dropify.prototype.setPreview = function (src) {
                    this.wrapper.removeClass('has-error').addClass('has-preview');
                    this.filenameWrapper.children('.dropify-filename-inner').html(this.file.name);
                    var render = this.preview.children('.dropify-render');
                    this.hideLoader();

                    if (this.isImage() === true) {
                        var imgTag = $('<img />').attr('src', src);

                        if (this.settings.height) {
                            imgTag.css("max-height", this.settings.height);
                        }

                        imgTag.appendTo(render);
                    } else {
                        $('<i />').attr('class', 'dropify-font-file').appendTo(render);
                        $('<span class="dropify-extension" />').html(this.getFileType()).appendTo(render);
                    }

                    this.preview.fadeIn();
                };
                /**
                 * Reset the preview
                 */


                Dropify.prototype.resetPreview = function () {
                    this.wrapper.removeClass('has-preview');
                    var render = this.preview.children('.dropify-render');
                    render.find('.dropify-extension').remove();
                    render.find('i').remove();
                    render.find('img').remove();
                    this.preview.hide();
                    this.hideLoader();
                };
                /**
                 * Clean the src and get the filename
                 *
                 * @param  {String} src
                 *
                 * @return {String} filename
                 */


                Dropify.prototype.cleanFilename = function (src) {
                    var filename = src.split('\\').pop();

                    if (filename == src) {
                        filename = src.split('/').pop();
                    }

                    return src != "" ? filename : '';
                };
                /**
                 * Clear the element, events are available
                 */


                Dropify.prototype.clearElement = function () {
                    if (this.errorsEvent.errors.length === 0) {
                        var eventBefore = $.Event("dropify.beforeClear");
                        this.input.trigger(eventBefore, [this]);

                        if (eventBefore.result !== false) {
                            this.resetFile();
                            this.input.val('');
                            this.resetPreview();
                            this.input.trigger($.Event("dropify.afterClear"), [this]);
                        }
                    } else {
                        this.resetFile();
                        this.input.val('');
                        this.resetPreview();
                    }
                };
                /**
                 * Reset file informations
                 */


                Dropify.prototype.resetFile = function () {
                    this.file.object = null;
                    this.file.name = null;
                    this.file.size = null;
                    this.file.type = null;
                    this.file.width = null;
                    this.file.height = null;
                };
                /**
                 * Set the container height
                 */


                Dropify.prototype.setContainerSize = function () {
                    if (this.settings.height) {
                        this.wrapper.height(this.settings.height);
                    }
                };
                /**
                 * Test if it's touch screen
                 *
                 * @return {Boolean}
                 */


                Dropify.prototype.isTouchDevice = function () {
                    return 'ontouchstart' in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
                };
                /**
                 * Get the file type.
                 *
                 * @return {String}
                 */


                Dropify.prototype.getFileType = function () {
                    return this.file.name.split('.').pop().toLowerCase();
                };
                /**
                 * Test if the file is an image
                 *
                 * @return {Boolean}
                 */


                Dropify.prototype.isImage = function () {
                    if (this.imgFileExtensions.indexOf(this.getFileType()) != "-1") {
                        return true;
                    }

                    return false;
                };
                /**
                 * Translate messages if needed.
                 */


                Dropify.prototype.translateMessages = function () {
                    for (var name in this.settings.tpl) {
                        for (var key in this.settings.messages) {
                            this.settings.tpl[name] = this.settings.tpl[name].replace('{{ ' + key + ' }}', this.settings.messages[key]);
                        }
                    }
                };
                /**
                 * Check the limit filesize.
                 */


                Dropify.prototype.checkFileSize = function () {
                    if (this.maxFileSizeToByte() !== 0 && this.file.size > this.maxFileSizeToByte()) {
                        this.pushError("fileSize");
                    }
                };
                /**
                 * Convert filesize to byte.
                 *
                 * @return {Int} value
                 */


                Dropify.prototype.maxFileSizeToByte = function () {
                    var value = 0;

                    if (this.settings.maxFileSize !== 0) {
                        var unit = this.settings.maxFileSize.slice(-1).toUpperCase(),
                            kb = 1024,
                            mb = kb * 1024,
                            gb = mb * 1024;

                        if (unit === 'K') {
                            value = parseFloat(this.settings.maxFileSize) * kb;
                        } else if (unit === 'M') {
                            value = parseFloat(this.settings.maxFileSize) * mb;
                        } else if (unit === 'G') {
                            value = parseFloat(this.settings.maxFileSize) * gb;
                        }
                    }

                    return value;
                };
                /**
                 * Validate image dimensions and format
                 */


                Dropify.prototype.validateImage = function () {
                    if (this.settings.minWidth !== 0 && this.settings.minWidth >= this.file.width) {
                        this.pushError("minWidth");
                    }

                    if (this.settings.maxWidth !== 0 && this.settings.maxWidth <= this.file.width) {
                        this.pushError("maxWidth");
                    }

                    if (this.settings.minHeight !== 0 && this.settings.minHeight >= this.file.height) {
                        this.pushError("minHeight");
                    }

                    if (this.settings.maxHeight !== 0 && this.settings.maxHeight <= this.file.height) {
                        this.pushError("maxHeight");
                    }

                    if (this.settings.allowedFormats.indexOf(this.getImageFormat()) == "-1") {
                        this.pushError("imageFormat");
                    }
                };
                /**
                 * Get image format.
                 *
                 * @return {String}
                 */


                Dropify.prototype.getImageFormat = function () {
                    if (this.file.width == this.file.height) {
                        return "square";
                    }

                    if (this.file.width < this.file.height) {
                        return "portrait";
                    }

                    if (this.file.width > this.file.height) {
                        return "landscape";
                    }
                };
                /**
                 * Push error
                 *
                 * @param {String} errorKey
                 */


                Dropify.prototype.pushError = function (errorKey) {
                    var e = $.Event("dropify.error." + errorKey);
                    this.errorsEvent.errors.push(e);
                    this.input.trigger(e, [this]);
                };
                /**
                 * Clear errors
                 */


                Dropify.prototype.clearErrors = function () {
                    if (typeof this.errorsContainer !== "undefined") {
                        this.errorsContainer.children('ul').html('');
                    }
                };
                /**
                 * Show error in DOM
                 *
                 * @param  {String} errorKey
                 */


                Dropify.prototype.showError = function (errorKey) {
                    if (typeof this.errorsContainer !== "undefined") {
                        this.errorsContainer.children('ul').append('<li>' + this.getError(errorKey) + '</li>');
                    }
                };
                /**
                 * Get error message
                 *
                 * @return  {String} message
                 */


                Dropify.prototype.getError = function (errorKey) {
                    var error = this.settings.error[errorKey],
                        value = '';

                    if (errorKey === 'fileSize') {
                        value = this.settings.maxFileSize;
                    } else if (errorKey === 'minWidth') {
                        value = this.settings.minWidth;
                    } else if (errorKey === 'maxWidth') {
                        value = this.settings.maxWidth;
                    } else if (errorKey === 'minHeight') {
                        value = this.settings.minHeight;
                    } else if (errorKey === 'maxHeight') {
                        value = this.settings.maxHeight;
                    } else if (errorKey === 'imageFormat') {
                        value = this.settings.allowedFormats.join(' ');
                    }

                    if (value !== '') {
                        return error.replace('{{ value }}', value);
                    }

                    return error;
                };
                /**
                 * Show the loader
                 */


                Dropify.prototype.showLoader = function () {
                    if (typeof this.loader !== "undefined") {
                        this.loader.show();
                    }
                };
                /**
                 * Hide the loader
                 */


                Dropify.prototype.hideLoader = function () {
                    if (typeof this.loader !== "undefined") {
                        this.loader.hide();
                    }
                };
                /**
                 * Destroy dropify
                 */


                Dropify.prototype.destroy = function () {
                    this.input.siblings().remove();
                    this.input.unwrap();
                    this.isInit = false;
                };
                /**
                 * Init dropify
                 */


                Dropify.prototype.init = function () {
                    this.createElements();
                };
                /**
                 * Test if element is init
                 */


                Dropify.prototype.isDropified = function () {
                    return this.isInit;
                };

                $.fn[pluginName] = function (options) {
                    this.each(function () {
                        if (!$.data(this, pluginName)) {
                            $.data(this, pluginName, new Dropify(this, options));
                        }
                    });
                    return this;
                };

                return Dropify;
            });

            /***/ }),

        /***/ 0:
        /*!******************************!*\
  !*** multi ./scripts/app.js ***!
  \******************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(/*! ./scripts/app.js */"./scripts/app.js");


            /***/ })

        /******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,